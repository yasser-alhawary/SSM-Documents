schemaVersion: '2.2'
description: Creates a local user account.
parameters:
  UserName:
    type: String
    description: The user to be created.
    allowedPattern: ^[^"'/[]:;|=,+*?<>@r
]+$
    maxChars: 32
  Description:
    type: String
    description: (Optional) The user's description.
    default: ' '
    allowedPattern: ^[^"'/[]:;|=,+*?<>@r
]+$
    maxChars: 48
  CreateHomeDir:
    type: String
    description: (Optional) Set this to 'Yes' to create of user's home directory on linux systems.
    default: 'No'
    allowedValues:
      - 'No'
      - 'Yes'
  PerformAction:
    type: String
    description: (Optional) Set this to 'Yes' to perform the action.
    default: 'No'
    allowedValues:
      - 'No'
      - 'Yes'
mainSteps:
- precondition:
    StringEquals:
      - platformType
      - Windows
  action: aws:runPowerShellScript
  name: InvokeWindowsScript
  inputs:
    runCommand:
      - |
        $ErrorActionPreference = 'Stop'
        
        Function ParseInputParameter {
            param (
                [string]$Name,
                [string]$Value,
                [string]$Regex
            )
        
            $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'
            if ($Value -notmatch $ValidParameterRegex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
            }
            $parameterValue = $Value.Substring(3)
        
            $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()
            $trimmedParameterValue = $trimmedParameterValue.Substring(1)
            $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)
        
            if ($Regex -and $trimmedParameterValue -notmatch $Regex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
            } else {
                $trimmedParameterValue
            }
        }
        
        function ExitWithFailureMessage {
            param (
                [string]$Message,
                [string]$ExceptionMessage,
                [Switch]$PrintJson
            )
            if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
                $errorMessage = $Message
            } else {
                $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
            }
            if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}
            WriteStandardError -Message $errorMessage
            [System.Environment]::Exit(1)
        }
        
        function ExitWithFailureMessageAndExitCode {
            param (
                [string]$Message,
                [string]$ExceptionMessage,
                [int]$ExitCode,
                [Switch]$PrintJson
            )
            if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
                $errorMessage = $Message
            } else {
                $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
            }
            if ($PSBoundParameters.ContainsKey('ExitCode') -eq $true) {
                $exitCode = $ExitCode
            } else {
                $exitCode = 1
            }
            if ($PrintJson) {
                $ErrorObject = @{
                    error = $errorMessage
                    exitCode = $exitCode
                }
                ConvertTo-Json -InputObject $ErrorObject -Compress
            }
            WriteStandardError -Message $errorMessage
            [System.Environment]::Exit($exitCode)
        }
        
        function ExitWithSuccessMessage {
            param (
                [string]$Message
            )
            Write-Host $Message
            [System.Environment]::Exit(0)
        }
        
        function WriteStandardError {
            param (
                [string]$Message
            )
            $Host.UI.WriteErrorLine($Message)
        }

        function TestPerformAction {
            param ( [string]$PerformAction )
            if ($PerformAction -ne 'Yes') {
                ExitWithFailureMessage -Message "No action was taken because the PerformAction parameter is set to $PerformAction. To make the desired change, set this parameter to Yes."
            }
        }

        $UserName = Write-Output --%{{{ UserName }}}
        $UserName = ParseInputParameter -Name 'UserName' -Value $UserName
        
        $Description = Write-Output --%{{{ Description }}}
        $Description = ParseInputParameter -Name 'Description' -Value $Description
        
        $PerformAction = Write-Output --%{{{ PerformAction }}}
        $PerformAction = ParseInputParameter -Name 'PerformAction' -Value $PerformAction -Regex '(Yes|No)'
        TestPerformAction -PerformAction $PerformAction
        
        $net = [System.IO.Path]::Combine($env:SystemRoot, 'System32', 'net.exe')
        try {
            $null = & $net user "$UserName" /add /comment:"$Description" *>&1
            if ($? -eq $true) {
                Write-Host 'The specified user has been created.'
            } else {
                ExitWithFailureMessage -Message 'Failed to create the specified user.' -PrintJson
            }
        } catch {
            ExitWithFailureMessage -Message 'Failed to create the specified user.' -PrintJson
        }
- precondition:
    StringEquals:
      - platformType
      - Linux
  action: aws:runShellScript
  name: InvokeLinuxScript
  inputs:
    runCommand:
      - |
        #!/bin/bash
        set -e
        
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS_RELEASE="$ID${VERSION_ID:+.${VERSION_ID}}"
        elif [ -f /etc/centos-release ]; then
            OS_RELEASE="centos.$(awk '{print $3}' /etc/centos-release)"
        elif [ -f /etc/redhat-release ]; then
            OS_RELEASE="rhel.$(lsb_release -r | awk '{print $2}')"
        fi
        
        case "$OS_RELEASE" in
            amzn.2|centos.7*|centos.8*|fedora.*|rhel.7*|rhel.8*|sles*)
                command_path='/usr/bin/'
                ;;
            amzn.2018.03|centos.6*|debian.*|rhel.6*|ubuntu.16*|ubuntu.18*|ubuntu.20*)
                command_path='/bin/'
                ;;
            *)
                # Catch all without the full path for untested platforms
                command_path=''
        esac
        
        ExitWithFailureMessage() {
            MESSAGE="$1"
            JSON="$2"
            if [[ "$JSON" == "PRINT_JSON" ]]; then
                "${command_path}echo" "{"error":"$MESSAGE"}"
            fi
            WriteStandardError "$MESSAGE"
            exit 1
        }
        
        # exit codes. 0-100 are reserved exit codes. 101-150 codes are for linux, 151-200 are for macos and 200 onwards codes are for windows.
        ExitWithFailureMessageAndExitCode() {
            MESSAGE="$1"
            EXITCODE="$2"
            JSON="$3"
            if [[ "$JSON" == "PRINT_JSON" ]]; then
                "${command_path}echo" "{"error":"$MESSAGE","exitCode":"$EXITCODE"}"
            fi
            WriteStandardError "$MESSAGE"
            exit "$EXITCODE"
        }
        
        ExitWithSuccessMessage() {
            "${command_path}echo" "$1"
            exit 0
        }
        
        WriteStandardError() {
            MESSAGE="$1"
            (>&2 "${command_path}echo" "$MESSAGE")
        }

        TestPerformAction() {
            if [[ "$1" != "Yes" ]]; then
                ExitWithFailureMessage "No action was taken because the PerformAction parameter is set to $1. To make the desired change, set this parameter to Yes."
            fi
        }

        User='{{ UserName }}'
        Description='{{ Description }}'
        CreateHomeDir='{{ CreateHomeDir }}'
        
        PERFORMACTION='{{ PerformAction }}'
        TestPerformAction "$PERFORMACTION"
        
        CREATE_HOME_ARGUMENT='--no-create-home'
        if "${command_path}grep" -q "^$User:" /etc/passwd; then
            ExitWithFailureMessage 'The specified user already exists.' 'PRINT_JSON'
        fi
        
        if [ -f /usr/sbin/useradd ]; then
            COMMAND='/usr/sbin/useradd'
            if [ "$CreateHomeDir" = 'Yes' ]; then
                CREATE_HOME_ARGUMENT='--create-home'
            fi
        elif [ -f /usr/sbin/adduser ]; then
            COMMAND='/usr/sbin/adduser'
            if [ "$CreateHomeDir" = 'Yes' ]; then
                CREATE_HOME_ARGUMENT=''
            fi
        else
            ExitWithFailureMessage 'Neither of the required commands adduser or useradd exist.' 'PRINT_JSON'
        fi
        
        $COMMAND "$User" --comment "$Description" "$CREATE_HOME_ARGUMENT" || ExitWithFailureMessage 'Failed to create the specified user.' 'PRINT_JSON'
        ExitWithSuccessMessage 'The specified user has been created.'
