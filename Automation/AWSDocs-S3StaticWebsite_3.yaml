description: "Tutorial: Configuring a static website on S3
===

This Automation
   document helps you configure a static website on an Amazon Simple Storage Service
   (Amazon S3) bucket. The document automates the procedure described in [Tutorial:
   Configuring a static website](https://docs.aws.amazon.com/AmazonS3/latest/dev/HostingWebsiteOnS3Setup.html)
   in the *Amazon Simple Storage Service User Guide*.

Prerequisites
---

To
   run the following Automation document, you must have permissions to run Automation
   workflows and create the following resources. The Automation workflow runs in
   the context of the current Amazon Identity and Access Management (IAM) user unless
   otherwise specified.

Resources created
---

This Automation document launches
   an Amazon CloudFormation stack to create the following resources.

  * A S3
   bucket that has public read access and a static website configuration
  * An
   index and error document that is uploaded to the S3 bucket

Outputs
---


  After the Automation is complete, go to the S3 bucket's static website properties
   in the Amazon Web Services console to view the public DNS address of the static
   website.

Cleanup
---

To remove resources created by this Automation document,
   navigate to the S3 bucket and remove all items from the bucket and then delete
   the CloudFormation stack created.

*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-S3StaticWebsite).*"
mainSteps:
- action: aws:createStack
  description: Creates the S3 bucket that will host the static webpage. Enables static
    website hosting and public access.
  inputs:
    Parameters:
    - ParameterKey: ExecutionId
      ParameterValue: '{{ automation:EXECUTION_ID }}'
    StackName: S3BucketStaticWebsite
    TemplateBody: "{
  "Parameters": {
      "ExecutionId": {
        "Description"
      : "Used to create a unique S3 bucket.",
        "Type": "String"
  
          }
  },
  "Resources": {
    "S3Bucket": {
        "Type": "
      AWS::S3::Bucket",
        "Properties": {
          "BucketName": {

                  "Fn::Join": ["", ["s3staticwebsite", {"Ref":"ExecutionId"
      }]]
          },
          "AccessControl": "PublicRead",
          "
      WebsiteConfiguration": {
            "IndexDocument": "index.html",

                  "ErrorDocument": "error.html"
          }
        }
   
       },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",

            "Properties": {
        "PolicyDocument": {
          "Id": "
      MyPolicy",
          "Statement": [
              {
                "
      Sid": "PublicReadForGetBucketObjects",
                "Effect": "Allow"
      ,
                "Principal": "*",
                "Action": "s3:GetObject"
      ,
                "Resource": {
                  "Fn::Join": [
    
                        "",
                      [
                        "
      arn:aws:s3:::",
                        {
                            "
      Ref": "S3Bucket"
                        },
                        "
      /*"
                      ]
                    ]
                }
  
                  }
            ]
        },
        "Bucket": {
         
       "Ref": "S3Bucket"
        }
      }
    }
  },
  "Outputs": {

          "S3BucketName": {
      "Value": {
        "Ref": "S3Bucket"

            },
      "Description": "Name of S3Bucket"
    }
  }
}"
  name: createS3Bucket
  onFailure: step:deleteStackOnError
- action: aws:executeAwsApi
  description: Gets information from stack creation that to use in the following step.
  inputs:
    Api: DescribeStacks
    Service: cloudformation
    StackName: '{{ createS3Bucket.StackId }}'
  name: getStackInformation
  outputs:
  - Name: S3BucketName
    Selector: $.Stacks[0].Outputs[0].OutputValue
    Type: String
- action: aws:executeScript
  description: Uploads the index and error page to the S3 bucket.
  inputs:
    Handler: script_handler
    InputPayload:
      S3BucketName: '{{ getStackInformation.S3BucketName }}'
    Runtime: python3.6
    Script: "import boto3
def script_handler(events, context):

  s3 = boto3.resource('s3')

        data = """<html xmlns="http://www.w3.org/1999/xhtml" >
  <head>
 
         <title>My Website Home Page</title>
  </head>
  <body>
    <h1>Welcome
       to my website</h1>
    <p>Now hosted on Amazon S3!</p>
  </body>
</html>"
      ""

  s3.Bucket(events["S3BucketName"]).put_object(Key='index.html', Body=data)

      
  data = """<html xmlns="http://www.w3.org/1999/xhtml" >
  <head>

          <title>Error</title>
  </head>
  <body>
    <p>Encountered an error.</p>

        </body>
</html>"""

  s3.Bucket(events["S3BucketName"]).put_object(Key='error.html',
       Body=data)"
  isEnd: true
  name: uploadContent
  onFailure: step:deleteStackOnError
- action: aws:deleteStack
  description: Deletes the CloudFormation stack when an error is encountered.
  inputs:
    StackName: '{{ createS3Bucket.StackId }}'
  name: deleteStackOnError
parameters:
  AutomationAssumeRole:
    default: ''
    description: (Optional) The ARN of the role that allows Automation to perform
      the actions on your behalf
    type: String
schemaVersion: '0.3'
