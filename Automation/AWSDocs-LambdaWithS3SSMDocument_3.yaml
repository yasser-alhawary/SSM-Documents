description: "Tutorial: Using Amazon Lambda with Amazon S3
===
This Automation document
   sets up a Lambda function that is triggered when a new object is placed into S3.
   It Automates the [Using Amazon Lambda with Amazon S3 Tutorial](https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html)

  
Once this document is executed, uploading a `.jpg` or `.png` image to the source
   S3 bucket will automatically trigger the lambda to create a resized thumbnail
   in the resized S3 bucket.

This tutorial will upload a test image so the source
   bucket and resized bucket will contain a source and resized image as an example.
   
The logs for the lambda can be found under the cloudwatch log group `/aws/lambda/CreateThumbnail`

  
Prerequisites
---
To run the following Automation document, you must have an
   [Automation Role](https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-permissions.html)
   with inline policies enabled to act on the following services: 

* cloudformation

  * iam
* lambda
* s3

This can be achieved by attaching an in-line policy with
   the following: 
```
{
    "Version": "2012-10-17",
    "Statement":
   [
        {
            "Sid": "VisualEditor0",
            "Effect"
  : "Allow",
            "Action": [
                "cloudformation:*",

                  "iam:CreateRole",
                "iam:DeleteRole",
    
              "iam:DeleteRolePolicy",
                "iam:GetRole",
     
             "iam:GetRolePolicy",
                "iam:PassRole",
        
          "iam:PutRolePolicy",
                "lambda:AddPermission",
   
               "lambda:CreateFunction",
                "lambda:DeleteFunction"
  ,
                "lambda:GetFunction",
                "lambda:GetFunctionConfiguration"
  ,
                "lambda:InvokeFunction",
                "lambda:RemovePermission"
  ,
                "s3:CreateBucket",
                "s3:DeleteBucket",

                  "s3:GetObject",
                "s3:PutBucketNotification"
  ,
                "s3:PutObject",
                "s3:DeleteObject"
    
          ],
            "Resource": "*"
        }
    ]
}
```
  
Resources
   created
---
* S3 bucket containing the lambda code
* Lambda function that will
   resize an image to a thumbnail
* S3 bucket containing source image
* S3 bucket
   containing resized image
* IAM Role for executing the Lambda

Cleanup
---

  To remove resources created by this Automation document, navigate to the [Amazon
   CloudFormation console](https://console.aws.amazon.com/cloudformation/home) and
   delete the two stacks created.

**Important:** In order to properly clean up
   the stacks, all files in the three S3 buckets will need to be deleted before the
   stacks can be deleted.

*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-LambdaWithS3SSMDocument).*"
mainSteps:
- action: aws:createStack
  description: Creates an S3 bucket to host the prepared lambda code
  inputs:
    StackName: LambdaCodeS3Stack
    TemplateBody: "Resources:
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
  
        Properties:
      BucketName: !Join
        - ''
        - - {{ automation:EXECUTION_ID
       }}
          - "-lambda-code"
      AccessControl: BucketOwnerFullControl"
  name: createCodeS3Bucket
- action: aws:executeAwsApi
  description: Retrieves the bucket name that will contain the lambda code
  inputs:
    Api: DescribeStackResources
    Service: cloudformation
    StackName: '{{createCodeS3Bucket.StackId}}'
  name: getLambdaBucketName
  onFailure: step:deleteLambdaCodeS3Stack
  outputs:
  - Name: CodeS3BucketName
    Selector: $.StackResources[0].PhysicalResourceId
    Type: String
- action: aws:executeScript
  description: Uploads lambda code to the designated S3 bucket
  inputs:
    Handler: script_handler
    InputPayload:
      S3BucketName: '{{getLambdaBucketName.CodeS3BucketName}}'
    Runtime: python3.6
    Script: "import urllib.request
import boto3
from botocore.exceptions import
       ClientError

def script_handler(events, context):
  url = events['S3BucketName']

        filename = download_code('https://docs.aws.amazon.com/lambda/latest/dg/samples/CreateThumbnail.zip')

        print('downloaded code')
  upload_code_to_S3(filename, events['S3BucketName'])

        print('uploaded code to s3')

def download_code(url):
    filename = "
      CreateThumbnail.zip"
    # Adding information about user agent
    opener=urllib.request.build_opener()

          opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36
       (KHTML, like Gecko) Chrome/36.0.1941.0 Safari/537.36')]
    urllib.request.install_opener(opener)

          urllib.request.urlretrieve(url, filename)

    return filename

def
       upload_code_to_S3(filename, bucket_name):
    s3 = boto3.client('s3')
 
         try:
        response = s3.upload_file(filename, bucket_name, 'CreateThumbnail.zip')

          except ClientError as e:
              print(e)
              
    
                
  
"
  name: uploadLambdaCode
  onFailure: step:deleteLambdaCodeS3Stack
- action: aws:createStack
  description: Creates the resource stack for the tutorial
  inputs:
    Capabilities:
    - CAPABILITY_NAMED_IAM
    StackName: LambdaAndS3Stack
    TemplateBody: "Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:

            AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:

                - Effect: Allow
            Principal:
              Service:

                      - lambda.amazonaws.com
            Action: sts:AssumeRole

            Path: '/'
      
  IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:

            Roles: 
        - !Ref ExecutionRole
      PolicyName: AWSLambdaS3Policy

            PolicyDocument:
        Version: 2012-10-17
        Statement:
  
              - Effect: Allow
            Action:
              - logs:PutLogEvents

                    - logs:CreateLogGroup
              - logs:CreateLogStream

                  Resource: arn:aws:logs:*:*:*
          - Effect: Allow
     
             Action: s3:GetObject
            Resource: !Join 
              -
       ''
              - - "arn:aws:s3:::"
                - !Ref LambdaAndS3Source

                      - "/*"
          - Effect: Allow
            Action: s3:PutObject

                  Resource: !Join 
              - ''
              - - "arn:aws:s3:::"
      
                - !Ref LambdaAndS3SourceResized
                - "/*"

            
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:

            Runtime: nodejs12.x
      FunctionName: CreateThumbnail
      Timeout:
       30
      Role: !GetAtt ExecutionRole.Arn
      Handler: index.handler

            Code:
        S3Bucket: {{getLambdaBucketName.CodeS3BucketName}}
 
             S3Key: CreateThumbnail.zip
  
  LambdaAndS3Source:
    DependsOn:
       LambdaS3Permission
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
       !Join
        - ''
        - - {{ automation:EXECUTION_ID }}
         
       - "-lambda-s3-src"
      AccessControl: BucketOwnerFullControl
      NotificationConfiguration:

              LambdaConfigurations:
          - Event: s3:ObjectCreated:*
    
              Function: !GetAtt LambdaFunction.Arn
      
  LambdaAndS3SourceResized:

          Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
     
         - ''
        - - {{ automation:EXECUTION_ID }}
          - "-lambda-s3-src-resized"
      
      AccessControl: BucketOwnerFullControl
            
  LambdaS3Permission:

          DependsOn: LambdaFunction
    Type: AWS::Lambda::Permission
    Properties:

            FunctionName: CreateThumbnail
      Principal: s3.amazonaws.com
  
          Action: lambda:InvokeFunction
      SourceAccount: !Ref AWS::AccountId

            SourceArn: !Sub
        - "arn:aws:s3:::${ExecutionId}-lambda-s3-src"
      
        - { ExecutionId: {{ automation:EXECUTION_ID }} }
        
  

"
  name: createLambdaAndS3Stack
  onFailure: step:deleteLambdaCodeFromS3
- action: aws:executeAwsApi
  description: Retrieves the bucket names of the two S3 resources created for later
    use
  inputs:
    Api: DescribeStackResources
    Service: cloudformation
    StackName: '{{createLambdaAndS3Stack.StackId}}'
  name: getStackInformation
  onFailure: step:deleteLambdaCodeFromS3
  outputs:
  - Name: S3BucketName
    Selector: $.StackResources[2].PhysicalResourceId
    Type: String
  - Name: S3ResizedBucketName
    Selector: $.StackResources[3].PhysicalResourceId
    Type: String
- action: aws:executeScript
  description: Uploads an image to the source S3 bucket, which will trigger the lambda
    to create a resized image in the resized S3 bucket.
  inputs:
    Handler: script_handler
    InputPayload:
      S3BucketName: '{{getStackInformation.S3BucketName}}'
    Runtime: python3.6
    Script: "import urllib.request
import boto3
from botocore.exceptions import
       ClientError

def script_handler(events, context):

  filename = download_image()

        print('uploading image to ', events['S3BucketName'])
  upload_image_to_S3(filename,
       events['S3BucketName'])

def download_image():
    image_url = "https://docs.aws.amazon.com/lambda/latest/dg/images/landing-page/features-destinations.png"
      
    filename = "lambda.png"
    # Adding information about user agent

          opener=urllib.request.build_opener()
    opener.addheaders=[('User-Agent','Mozilla/5.0
       (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1941.0
       Safari/537.36')]
    urllib.request.install_opener(opener)

    urllib.request.urlretrieve(image_url,
       filename)

    return filename

def upload_image_to_S3(filename, bucket_name):

          s3 = boto3.client('s3')
    try:
        response = s3.upload_file(filename,
       bucket_name, 'lambda.png')
    except ClientError as e:
        print(e)

      
"
  isEnd: true
  name: uploadImageToS3
  onFailure: step:deleteLambdaCodeFromS3
- action: aws:executeAwsApi
  description: Deletes the lambda code from the S3 bucket so that resources can be
    cleaned up
  inputs:
    Api: deleteObject
    Bucket: '{{getLambdaBucketName.CodeS3BucketName}}'
    Key: CreateThumbnail.zip
    Service: s3
  name: deleteLambdaCodeFromS3
  nextStep: deleteLambdaCodeS3Stack
  onFailure: step:deleteLambdaCodeS3Stack
- action: aws:deleteStack
  description: Deletes the stack containing the S3 bucket that stores the lambda code
  inputs:
    StackName: LambdaCodeS3Stack
  isEnd: false
  name: deleteLambdaCodeS3Stack
  nextStep: deleteImageFromS3
  onFailure: step:deleteStack
- action: aws:executeAwsApi
  description: Deletes the tutorial image from the S3 bucket so that resources can
    be cleaned up
  inputs:
    Api: deleteObject
    Bucket: '{{getStackInformation.S3BucketName}}'
    Key: lambda.png
    Service: s3
  name: deleteImageFromS3
  nextStep: deleteResizedImageFromS3
  onFailure: step:deleteStack
- action: aws:executeAwsApi
  description: Deletes the resized tutorial image from the resized S3 bucket so that
    resources can be cleaned up
  inputs:
    Api: deleteObject
    Bucket: '{{getStackInformation.S3ResizedBucketName}}'
    Key: resized-lambda.png
    Service: s3
  name: deleteResizedImageFromS3
  nextStep: deleteStack
  onFailure: step:deleteStack
- action: aws:deleteStack
  description: Cleans up stack for the tutorial
  inputs:
    StackName: LambdaAndS3Stack
  name: deleteStack
parameters:
  AutomationAssumeRole:
    description: (Required) The ARN of the role that allows Automation to perform
      the actions on your behalf
    type: String
schemaVersion: '0.3'
