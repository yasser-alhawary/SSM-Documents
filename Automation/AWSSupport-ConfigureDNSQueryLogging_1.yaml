description: "The AWSSupport-ConfigureDNSQueryLogging runbook allows you to automate
   DNS Query Logs configuration.  Query Log data is published to the Amazon CloudWatch
   Logs, Amazon Simple Storage Service (Amazon S3) or Amazon Kinesis stream you choose.
   After you've created a DNS Query Log, you can retrieve and view its data in the
   chosen destination. For more information, see [Public DNS Query Logs](https://docs.aws.amazon.com/Route53/latestDeveloperGuide/query-logs.html)
   and [Resolver DNS Query Logs](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver-query-logs.html).

  
### Additional Information
DNS Query Logs configuration is a feature that enables
   you to capture DNS Queries traffic flow generated from your VPCs or Route53 hosted
   zones. The data can be used for investigating and troubleshooting connectivity
   issues.
### Important
Please note that your account will be charged for the
   costs associated with the storage fees for the AWS Service you want to forward
   the logs to: CloudWatch Logs, S3, or Amazon Kinesis Firehose. For more information
   see  [Public DNS Query Logs](https://docs.aws.amazon.com/Route53/latestDeveloperGuide/query-logs.html)
   and [Resolver DNS Query Logs](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver-query-logs.html)

  
``Note: If you don’t specify a value for LogDestinationArn, the runbook tries
   to create a new CloudWatch Log Group with the name ‘AWSSupport-ConfigureDNSQueryLogging-<automation:EXECUTION_ID>’
  . When the automation creates the new Log Group, it sets the number of days to retain
   the log data to 14 days. Public DNS Query Logs only support CloudWatch Log group
   as LogDestinationArn.``

[Run this Automation (console)](https://console.aws.amazon.com/systems-manager/automation/execute/AWSSupport-ConfigureDNSQueryLogging)"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
- "CreateDNSLogConfig.message"
parameters:
  ResourceId:
    type: "String"
    allowedPattern: "(^Z[A-Z0-9_]{4,32}$|^vpc-[a-z0-9]{8,17}$)"
    description: "(Required) The resource Id for which the DNS logging is created.
       If you specify 'Public' in *QueryLogType*, the resource needs to be the Hosted
       Zone ID (ex. Z111111QQQQQQQ). If you specify 'Resolver/Private', the resouce
       needs to be the VPC Id (ex. vpc-1a2b3c4d)"
  QueryLogType:
    type: "String"
    default: "Public"
    description: "(Optional) Type of configuration for the DNS logging. The allowed
       types are Public or Resolver/Private"
    allowedValues:
    - "Public"
    - "Resolver/Private"
  LogDestinationArn:
    type: "String"
    default: ""
    description: "(Optional) CloudWatch Log group, Amazon S3 bucket or a Kinesis stream
       ARN for the Creation of the Resolver DNS log config. Route53 Public DNS query
       Logging only supports CloudWatch Log Groups. *Note:* `if nothing is specified,
       the automation will create a CloudWatch Log Group, stream and the IAM Resource
       policy to put data in it on behalf of Route53.`"
    allowedPattern: "(^arn:(aws[a-zA-Z-]*)?:(logs|s3|kinesis):([w+-]+)?:(d{12})?:[
      w+-]+(:|/)?[w+=,.@-:/*]+$)?"
  AutomationAssumeRole:
    type: "String"
    default: ""
    description: "(Optional) The ARN of the role that allows the Automation runbook
       to perform the actions on your behalf. If no role is specified, Systems Manager
       Automation uses your current IAM user permissions context to execute this
       runbook."
    allowedPattern: "(^arn:(aws[a-zA-Z-]*)?:iam::d{12}:role/[w+=,.@-]+$)?"
mainSteps:
- name: "ValidateResourceId"
  description: "Validates the Resource existence and checks if it's the correct Resource
     type for the *QueryLogType* (Public or Resolver/Private)."
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.7"
    Handler: "script_handler"
    Script: "#
# Copyright 2010-2021 Amazon.com, Inc. or its affiliates. All Rights
       Reserved.
#
# Permission is hereby granted, free of charge, to any person
       obtaining a copy of this
# software and associated documentation files (the
       "Software"), to deal in the Software
# without restriction, including without
       limitation the rights to use, copy, modify,
# merge, publish, distribute,
       sublicense, and/or sell copies of the Software, and to
# permit persons to
       whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "
      AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT
       NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR
       PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT

      # HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
       ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
       WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#


      import boto3
import re

def script_handler(events, context):

    ACCOUNT_ID
       = context["global:ACCOUNT_ID"]
    region = context["global:REGION"]

          ExecutionId = context["automation:EXECUTION_ID"]
    # @Parameters

          ResourceId = events["ResourceId"]
    QueryLogType = events["QueryLogType"
      ]

    ec2 = boto3.client('ec2')
    route53 = boto3.client('route53')


          vpc_pattern = re.compile('^vpc-[a-z0-9]{8,17}$')
    host_id_pattern =
       re.compile('^Z[A-Z0-9_]{4,32}$')

    if QueryLogType == 'Public':
   
           if (host_id_pattern.match(ResourceId)):
            response = route53.get_hosted_zone(

                      Id = ResourceId
            )
            if ResourceId in
       response['HostedZone']['Id']:
                return
            else:

                      raise Exception("Resource Id not found in Route53")
   
           else:
            raise Exception("Resource Id Type is not correct"
      )
    elif QueryLogType == 'Resolver/Private':
        if (vpc_pattern.match(ResourceId)):

                  response = ec2.describe_vpcs(
                VpcIds=[ResourceId]

                  )
            if len(response['Vpcs']) > 0:
                return

                  else:
                raise Exception("Resource Id not found
       in VPCs")
        else:
            raise Exception("Resource Id Type
       is not correct")
"
    InputPayload:
      ResourceId: "{{ResourceId}}"
      QueryLogType: "{{QueryLogType}}"
      LogDestinationArn: "{{LogDestinationArn}}"
  onFailure: "Abort"
  onCancel: "Abort"
  nextStep: "CheckDestinationARN"
  timeoutSeconds: 120
- name: "CheckDestinationARN"
  action: "aws:executeScript"
  description: "Checks if *LogDestinationArn* parameter it's the correct Destination
     type (s3, cloudwatch log, or kinesis stream) for the *QueryLogType* (Public
     or Resolver/Private)."
  inputs:
    Runtime: "python3.7"
    Handler: "script_handler"
    Script: "#
# Copyright 2010-2021 Amazon.com, Inc. or its affiliates. All Rights
       Reserved.
#
# Permission is hereby granted, free of charge, to any person
       obtaining a copy of this
# software and associated documentation files (the
       "Software"), to deal in the Software
# without restriction, including without
       limitation the rights to use, copy, modify,
# merge, publish, distribute,
       sublicense, and/or sell copies of the Software, and to
# permit persons to
       whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "
      AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT
       NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR
       PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT

      # HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
       ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
       WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#


      import boto3
import time
import re

def script_handler(events, context):

          RETENTION_DAYS = 14
    ACCOUNT_ID = context["global:ACCOUNT_ID"]

          region = context["global:REGION"]
    ExecutionId = context["automation:EXECUTION_ID"
      ]
    # @Parameters
    ResourceId = events["ResourceId"]
    QueryLogType
       = events["QueryLogType"]
    LogDestinationArn = events["LogDestinationArn"
      ]

    cwlog_pattern = re.compile('(^arn:(aws[a-zA-Z-]*)?:logs:([w+-]+)?:(
      d{12})?:[w+-]+(:|/)?[w+=,.@-:/*]+$)?')
    s3_firehose_pattern =
       re.compile('(^arn:(aws[a-zA-Z-]*)?:(logs|s3|firehose):([w+-]+)?:(d{12})?:[
      w+-]+(:|/)?[w+=,.@-:/*]+$)?')


    if QueryLogType == 'Public':

              if LogDestinationArn == '':
            LogDestinationArn = create_log_group_with_retention('us-east-1',
       ACCOUNT_ID, RETENTION_DAYS, ExecutionId)
            return LogDestinationArn

              elif (cwlog_pattern.match(LogDestinationArn)):
            logGroupNamePrefix
       = re.sub('arn:aws:logs:([w+-]+)?:(d{12})?:log-group:', '', LogDestinationArn)

                  logGroupNamePrefix = re.sub('(:*)?$', '', logGroupNamePrefix)

                  # Logs must be in us-east-1 as Route53 is global therefore the
       default region is N. Virginia
            logs = boto3.client('logs', region_name='us-east-1')

                  response = logs.describe_log_groups(
                logGroupNamePrefix=logGroupNamePrefix,

                      limit=1
            )
            if LogDestinationArn in
       response['logGroups'][0]['arn']:
                return LogDestinationArn

                  else:
                raise Exception("Destination ARN not found"
      )
        else:
            raise Exception("Destination Type is not correct"
      )
    elif QueryLogType == 'Resolver/Private':
        if LogDestinationArn
       == '':
            LogDestinationArn = create_log_group_with_retention(region,
       ACCOUNT_ID, RETENTION_DAYS, ExecutionId)
            return LogDestinationArn

              elif (s3_firehose_pattern.match(LogDestinationArn)):
            return
       LogDestinationArn
        else:
            raise Exception("Destination
       Type is not correct")


def create_log_group_with_retention (region, ACCOUNT_ID,
       RETENTION_DAYS, ExecutionId):

    logs = boto3.client('logs', region_name=region)

          
    try:
        response = logs.create_log_group(
            logGroupName='AWSSupport-ConfigureDNSQueryLogging-'+ExecutionId,

                  tags={
                'Author': 'Created by AWSSupport-ConfigureDNSQueryLogging
       automation'
            }
        )
        if response['ResponseMetadata']["
      HTTPStatusCode"] == 200:
            time.sleep(3)
            response =
       logs.put_retention_policy(
                logGroupName='AWSSupport-ConfigureDNSQueryLogging-'+ExecutionId,

                      retentionInDays=RETENTION_DAYS
            )
           
       return 'arn:aws:logs:'+region+':'+ACCOUNT_ID+':log-group:AWSSupport-ConfigureDNSQueryLogging-'+ExecutionId+':*'

          except Exception as e:
        if "ResourceAlreadyExistsException" in
       str(e):
            return 'arn:aws:logs:'+region+':'+ACCOUNT_ID+':log-group:AWSSupport-ConfigureDNSQueryLogging-'+ExecutionId+':*'

              else:
            raise Exception("Something went wrong on Log Group
       Creation, please check: "+"
"+str(e))
"
    InputPayload:
      ResourceId: "{{ResourceId}}"
      QueryLogType: "{{QueryLogType}}"
      LogDestinationArn: "{{LogDestinationArn}}"
  nextStep: "CheckResourcePolicy"
  timeoutSeconds: 120
  onFailure: "Abort"
  onCancel: "Abort"
  outputs:
  - Name: "message"
    Selector: "$.Payload"
    Type: "String"
- name: "CheckResourcePolicy"
  description: "Checks the permission for Route53 to put logs into the CloudWatch
     log group, and creates the resource policy if it doesn't exist"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.7"
    Handler: "script_handler"
    Script: "#
# Copyright 2010-2021 Amazon.com, Inc. or its affiliates. All Rights
       Reserved.
#
# Permission is hereby granted, free of charge, to any person
       obtaining a copy of this
# software and associated documentation files (the
       "Software"), to deal in the Software
# without restriction, including without
       limitation the rights to use, copy, modify,
# merge, publish, distribute,
       sublicense, and/or sell copies of the Software, and to
# permit persons to
       whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "
      AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT
       NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR
       PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT

      # HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
       ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
       WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#


      import boto3
import json
import time
import re

def script_handler(events,
       context):

    RETENTION_DAYS = 14
    ACCOUNT_ID = context["global:ACCOUNT_ID"
      ]
    region = context["global:REGION"]
    ExecutionId = context["automation:EXECUTION_ID"
      ]
    # @Parameters
    ResourceId = events["ResourceId"]
    QueryLogType
       = events["QueryLogType"]
    LogDestinationArn = events["LogDestinationArn"
      ]

    logs = boto3.client('logs', region_name='us-east-1')

    if QueryLogType
       == 'Public':
        paginator = logs.get_paginator('describe_resource_policies')

              response = paginator.paginate().build_full_result()
        resource_policy
       = filter(
            lambda policy : 
                policy["policyName"
      ] == 'AWSServiceRoleForRoute53',
            response["resourcePolicies"
      ])
        resource_policy = list(filter(policy_filter, resource_policy))

              if len(resource_policy) > 0:
            return
        else:
 
                 create_logs_resource_policy(ACCOUNT_ID, LogDestinationArn)
   

      def create_logs_resource_policy(ACCOUNT_ID, LogDestinationArn):

    policyDocument
       = '{ "Version": "2012-10-17", "Statement": [ { "Sid
      ": "Route53LogsToCloudWatchLogs", "Effect": "Allow", "
      Principal": { "Service": "route53.amazonaws.com" }, "Action
      ": [ "logs:CreateLogStream", "logs:PutLogEvents" ], "Resource
      ": "' + LogDestinationArn + '" } ] }'
    logs = boto3.client('logs',
       region_name='us-east-1')
    try:
        response = logs.put_resource_policy(

                  policyName="AWSServiceRoleForRoute53",
            policyDocument=policyDocument

              )
        if response["resourcePolicy"]["policyName"] == "AWSServiceRoleForRoute53"
      :
            return
    except Exception as e:
        raise Exception("
      Something went wrong, please check: "+"
"+str(e))

def policy_filter(policy):

          policy_doc = json.loads(policy["policyDocument"])
    return policy_doc["
      Statement"][0]["Effect"] == "Allow" and policy_doc["Statement"][0]["
      Principal"]["Service"] == "route53.amazonaws.com" and any('logs:CreateLogStream'
       in a for a in policy_doc["Statement"][0]["Action"]) and any('logs:PutLogEvents'
       in a for a in policy_doc["Statement"][0]["Action"])
"
    InputPayload:
      ResourceId: "{{ResourceId}}"
      QueryLogType: "{{QueryLogType}}"
      LogDestinationArn: "{{LogDestinationArn}}"
  onFailure: "Abort"
  onCancel: "Abort"
  timeoutSeconds: 120
  nextStep: "CreateDNSLogConfig"
- name: "CreateDNSLogConfig"
  description: "Creates the DNS query logging on the selected destination, based on
     the Resource Id."
  action: "aws:executeScript"
  timeoutSeconds: 180
  onFailure: "Abort"
  onCancel: "Abort"
  isCritical: true
  inputs:
    Runtime: "python3.7"
    Handler: "script_handler"
    Script: "#
# Copyright 2010-2021 Amazon.com, Inc. or its affiliates. All Rights
       Reserved.
#
# Permission is hereby granted, free of charge, to any person
       obtaining a copy of this
# software and associated documentation files (the
       "Software"), to deal in the Software
# without restriction, including without
       limitation the rights to use, copy, modify,
# merge, publish, distribute,
       sublicense, and/or sell copies of the Software, and to
# permit persons to
       whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "
      AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT
       NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR
       PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT

      # HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
       ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
       WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#


      import boto3
import time
import re
import uuid

def script_handler(events,
       context):
    
    ACCOUNT_ID = context["global:ACCOUNT_ID"]
    region
       = context["global:REGION"]
    ExecutionId = context["automation:EXECUTION_ID"
      ]
    # @Parameters
    ResourceId = events["ResourceId"]
    QueryLogType
       = events["QueryLogType"]
    LogDestinationArn = events["LogDestinationArn"
      ]

    # @ Input Validation
    
    if QueryLogType == 'Public':
    
          if LogDestinationArn == '':
            LogDestinationArn='arn:aws:logs:us-east-1:'+ACCOUNT_ID+':log-group:AWSSupport-ConfigureDNSQueryLogging-'+ExecutionId

              route53 = boto3.client('route53')
        try:
            response
       = route53.create_query_logging_config(
                HostedZoneId=ResourceId,

                      CloudWatchLogsLogGroupArn=LogDestinationArn
            )

                  if response["QueryLoggingConfig"]["HostedZoneId"] == ResourceId:

                      return response
            else:
                rollback(None,
       LogDestinationArn, 'us-east-1', ExecutionId)
                raise Exception('Error
       creating the Route53 association' + str(response))
        except Exception
       as e:
            raise Exception("Something went wrong on the DNS query
       log creation, please check: "+"
"+str(e))
    elif QueryLogType == 'Resolver/Private':

              if LogDestinationArn == '':
            LogDestinationArn='arn:aws:logs:'+region+':'+ACCOUNT_ID+':log-group:AWSSupport-ConfigureDNSQueryLogging-'+ExecutionId

              response = None
        try:
            route53resolver = boto3.client('route53resolver')

                  response = route53resolver.create_resolver_query_log_config(

                      Name='ConfigureDNSQueryLogging-'+ExecutionId,
           
           DestinationArn=LogDestinationArn,
                CreatorRequestId=str(uuid.uuid4()),

                      Tags=[
                    {
                        'Key':'Author',

                              'Value':'Created by the SSM AWSSupport-ConfigureDNSQueryLogging
       automation'
                    }
                ]
            )
   
               config_id = response["ResolverQueryLogConfig"]["Id"]
       
           if response["ResolverQueryLogConfig"]["DestinationArn"] in LogDestinationArn
       and response["ResolverQueryLogConfig"]["Id"] != None:
              
        response = route53resolver.associate_resolver_query_log_config(
       
                   ResolverQueryLogConfigId=config_id,
                    ResourceId=ResourceId

                      )
                if response["ResolverQueryLogConfigAssociation"
      ]["ResourceId"] == ResourceId:
                    return response;
   
                   else:
                    rollback(config_id, LogDestinationArn,
       region, ExecutionId)
                    raise Exception('Error creating
       the Resolver association' + str(response))
            else:
          
            rollback(None, LogDestinationArn, region, ExecutionId)
            
          raise Exception('Error creating the Resolver log configuration.' +  str(response))

              except Exception as e:
            rollback(config_id, LogDestinationArn,
       region, ExecutionId)
            raise Exception('Something went wrong on
       the Resolver DNS query log creation, please check: 
'+str(e))

def rollback(config_id,
       LogDestinationArn, region, ExecutionId):

    route53resolver = boto3.client('route53resolver')

          logs = boto3.client('logs', region_name=region)
    
    if config_id
       != None:
        response = route53resolver.delete_resolver_query_log_config(

                  ResolverQueryLogConfigId=config_id
        )
        if response["
      ResolverQueryLogConfig"]["Id"] != config_id:
            raise Exception('[Rollback]
       Error deleting the Resolver configuration Id: '+ config_id +'
'+ str(response))

          if 'AWSSupport-ConfigureDNSQueryLogging' in LogDestinationArn:
      
        try:
            response = logs.delete_log_group(
                logGroupName='AWSSupport-ConfigureDNSQueryLogging-'+ExecutionId

                  )
            time.sleep(3)
        except Exception as e:

                  raise Exception('[Rollback] Something went wrong on the Log group
       deletion, please check: 
'+str(e))
    
    return
"
    InputPayload:
      ResourceId: "{{ResourceId}}"
      QueryLogType: "{{QueryLogType}}"
      LogDestinationArn: "{{LogDestinationArn}}"
  outputs:
  - Name: "message"
    Selector: "$.Payload"
    Type: "StringMap"
  isEnd: true
