description: |
  ### Document name - AWSConfigRemediation-EnableRDSInstanceBackup

  ## What does this document do?
  This document enables backups on an Amazon RDS DB instance using the [ModifyDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_ModifyDBInstance.html) API.
  Note: This is not applicable for Amazon Aurora.

  ## Input Parameters
  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  * DbiResourceId: (Required) Resource ID of the Amazon RDS database instance for which backups need to be enabled.
  * ApplyImmediately: (Optional) A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance. By default, this parameter is disabled.
    * Default: false
  * BackupRetentionPeriod: (Required) A positive integer value that indicates the number of days to retain automated backups.
  * PreferredBackupWindow: (Optional) A daily time range value of at least 30 minutes, in Universal Time Coordinated (UTC).
    * Default: ""

  ## Output Parameters
  * EnableBackupsOnRDSInstanceAndVerify.Output

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::d{12}:role/[w+=,.@/-]+$
  DbiResourceId:
    type: String
    description: (Required) Resource ID of the Amazon RDS database instance for which backups need to be enabled.
    allowedPattern: ^db-[A-Z0-9]+$
  ApplyImmediately:
    type: Boolean
    description: (Optional) A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance. By default, this parameter is disabled.
    default: false
  BackupRetentionPeriod:
    type: Integer
    description: (Required) A positive integer value that indicates the number of days to retain automated backups.
    allowedPattern: ^([1-9]|[1-2][0-9]|[3][0-5])$
  PreferredBackupWindow:
    type: String
    description: (Optional) A daily time range value of at least 30 minutes, in Universal Time Coordinated (UTC).
    allowedPattern: ^(?![sS])|^((?:[01]d|2[0123]):(?:[012345]d)-(?:[01]d|2[0123]):(?:[012345]d))$
    default: ""

outputs:
  - EnableBackupsOnRDSInstanceAndVerify.Output
mainSteps:
- name: EnableBackupsOnRDSInstanceAndVerify
  action: aws:executeScript
  description: |
    ## EnableBackupsOnRDSInstanceAndVerify
    Accepts the Resource ID as input, modifies it to enable backups and verifies that backups are enabled or in `PendingModifiedValues` pending to be enabled.
    ## Outputs
    * Output: A success message or failure exception.
  isEnd: true
  timeoutSeconds: 600
  inputs:
    Runtime: python3.7
    Handler: handler
    InputPayload:
      DbiResourceId: "{{ DbiResourceId }}"
      ApplyImmediately: "{{ ApplyImmediately }}"
      BackupRetentionPeriod: "{{ BackupRetentionPeriod }}"
      PreferredBackupWindow: "{{ PreferredBackupWindow }}"
    Script: |-
        import boto3
        import botocore


        def get_rds_instance_identifier(rds_client, dbi_resource_id):
            paginator = rds_client.get_paginator("describe_db_instances")
            page_iterator = paginator.paginate(
                Filters=[{"Name": "dbi-resource-id", "Values": [dbi_resource_id]}],
            )

            for page in page_iterator:
                for instance in page["DBInstances"]:
                    return instance["DBInstanceIdentifier"], instance["DBInstanceStatus"]
            return None, None


        def enable_backups(
            rds_client, db_instance_identifier, apply_immediately, backup_retention_period, preferred_backup_window
        ):
            try:
                response = None
                if preferred_backup_window == "":
                    response = rds_client.modify_db_instance(
                        DBInstanceIdentifier=db_instance_identifier,
                        ApplyImmediately=apply_immediately,
                        BackupRetentionPeriod=backup_retention_period,
                    )
                else:
                    response = rds_client.modify_db_instance(
                        DBInstanceIdentifier=db_instance_identifier,
                        ApplyImmediately=apply_immediately,
                        BackupRetentionPeriod=backup_retention_period,
                        PreferredBackupWindow=preferred_backup_window,
                    )
                if response["DBInstance"].get("InstanceCreateTime") is not None:
                    response["DBInstance"]["InstanceCreateTime"] = str(response["DBInstance"]["InstanceCreateTime"])
                if response["DBInstance"].get("LatestRestorableTime") is not None:
                    response["DBInstance"]["LatestRestorableTime"] = str(response["DBInstance"]["LatestRestorableTime"])
                return response
            except botocore.exceptions.ClientError as error:
                if "member of a cluster" in error.response["Error"]["Message"]:
                    error_message = f"DB INSTANCE {db_instance_identifier} MODIFICATION FAILED. DB INSTANCE IS A MEMBER OF A CLUSTER, BACKUP RETENTION MANAGED ON THE DB CLUSTER."
                    raise Exception(error_message)
                elif "backup window and maintenance window must not overlap" in error.response["Error"]["Message"]:
                    error_message = f"DB INSTANCE {db_instance_identifier} MODIFICATION FAILED.  BACKUP WINDOW AND MAINTENANCE WINDOW MUST NOT OVERLAP."
                    raise Exception(error_message)
                elif "backup window must be at least 30 minutes" in error.response["Error"]["Message"]:
                    error_message = (
                        f"DB INSTANCE {db_instance_identifier} MODIFICATION FAILED. BACKUP WINDOW MUST BE AT LEAST 30 MINUTES."
                    )
                    raise Exception(error_message)
                else:
                    raise error


        def verify_backups_enabled(rds_client, db_instance_identifier, backup_retention_period, preferred_backup_window):
            paginator = rds_client.get_paginator("describe_db_instances")
            page_iterator = paginator.paginate(DBInstanceIdentifier=db_instance_identifier)

            for page in page_iterator:
                for instance in page["DBInstances"]:
                    results = []
                    if (
                        backup_retention_period == instance["PendingModifiedValues"].get("BackupRetentionPeriod")
                        or backup_retention_period == instance["BackupRetentionPeriod"]
                    ):
                        results.append("True")
                    if preferred_backup_window == "" or (
                        preferred_backup_window == instance["PendingModifiedValues"].get("PreferredBackupWindow")
                        or preferred_backup_window == instance["PreferredBackupWindow"]
                    ):
                        results.append("True")

                    if results == ["True", "True"]:
                        return True
            return False

        def handler(event, context):
            rds_client = boto3.client("rds")
            apply_immediately = event["ApplyImmediately"]
            dbi_resource_id = event["DbiResourceId"]
            backup_retention_period = event["BackupRetentionPeriod"]
            preferred_backup_window = event.get("PreferredBackupWindow")

            db_instance_identifier, db_instance_status = get_rds_instance_identifier(rds_client, dbi_resource_id)
            if db_instance_identifier is None:
                error_message = f"AMAZON RDS DATABASE RESOURCE ID {dbi_resource_id} DOES NOT EXIST."
                raise Exception(error_message)

            response = None
            if db_instance_status == "available":
                response = enable_backups(
                    rds_client, db_instance_identifier, apply_immediately, backup_retention_period, preferred_backup_window
                )
            else:
                error_message = (
                    f"DB RESOURCE ID {dbi_resource_id} MODIFICATION FAILED BECAUSE INSTANCE STATUS IS NOT AVAILABLE."
                )
                raise Exception(error_message)

            backups_enabled = verify_backups_enabled(
                rds_client, db_instance_identifier, backup_retention_period, preferred_backup_window
            )

            if backups_enabled:
                return {
                    "output": "Verification of backups enabled for Amazon RDS DB instance is successful.",
                    "ModifyDBInstanceResponse": response,
                }
            error_message = f"VERIFICATION FAILED. DB RESOURCE ID {dbi_resource_id} BACKUPS NOT ENABLED PER PARAMETERS."
            raise Exception(error_message)
  outputs:
    - Name: Output
      Selector: $.Payload.output
      Type: String
    - Name: ModifyDBInstanceResponse
      Selector: $.Payload.ModifyDBInstanceResponse
