  ### Document name - AWSConfigRemediation-EnableELBDeletionProtection

  ## What does this document do?
  This document enables deletion protection for the specified AWS Elastic Load Balancer using the [ModifyLoadBalancerAttributes](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_ModifyLoadBalancerAttributes.html) API.
  
  ## Input Parameters
  * LoadBalancerArn: (Required) The Amazon Resource Name (ARN) of the load balancer.
  * AutomationAsssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

  ## Output Parameters
  * EnableAndVerifyDeletionProtection.Output - The standard HTTP response from ModifyLoadBalancerAttributes API.

schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  LoadBalancerArn:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the load balancer.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:elasticloadbalancing:[a-z]{2}-[a-z]+-[0-9]{1}:[0-9]{12}:loadbalancer/(net|app|gwy)/((?!internal-)(?!-)[0-9a-zA-Z-]{0,32}(?<!-))/[0-9aA-zZ]{16}$
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::d{12}:role/[w+=,.@-]+$
outputs:
  - EnableAndVerifyDeletionProtection.Output
mainSteps:
- name: EnableAndVerifyDeletionProtection
  description: |
    ## EnableAndVerifyDeletionProtection
    Verifies load balancer state and enables deletion protection
  action: aws:executeScript
  onFailure: Abort
  isCritical: true
  timeoutSeconds: 600
  maxAttempts: 1
  inputs:
    InputPayload:
      LoadBalancerArn: "{{ LoadBalancerArn }}"
    Script: |
      import boto3
      from botocore.exceptions import ClientError

      elb_client = boto3.client("elbv2")

      def is_deletion_protection_enabled(elb_arn):
        elb_attributes = elb_client.describe_load_balancer_attributes(LoadBalancerArn=elb_arn)["Attributes"]
        attribute_value = list(filter(lambda x:x["Key"]=="deletion_protection.enabled",elb_attributes))[0]["Value"]
        if attribute_value:
          return True
        return False

      def script_handler(event, context):
        elb_arn = event.get("LoadBalancerArn")
        elb_details = elb_client.describe_load_balancers(LoadBalancerArns=[elb_arn])["LoadBalancers"][0]
        elb_name = elb_details["LoadBalancerName"]
        if elb_details["State"]["Code"] != "active":
           raise Exception(f"SPECIFIED LOAD BALANCER {elb_name} IS NOT IN ACTIVE STATE") 

        response = elb_client.modify_load_balancer_attributes(LoadBalancerArn=elb_arn,Attributes=[{"Key": "deletion_protection.enabled","Value": "true"}])
        retry_count = 0
        while retry_count < 5:
          retry_count = retry_count + 1
          if is_deletion_protection_enabled(elb_arn):
            return {
                "Message": "Deletion protection enabled successfully.",
                "HTTPResponse": response
              }
        raise Exception(f"VERIFICATION FAILED. DELETION PROTECTION IS NOT ENABLED ON ELB {elb_name}.")
    Handler: script_handler
    Runtime: python3.7
  outputs:
    - Name: Output
      Selector: $.Payload
