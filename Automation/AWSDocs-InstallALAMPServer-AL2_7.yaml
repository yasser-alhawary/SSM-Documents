===

This Automation
   document helps you launch an Elastic Compute Cloud (EC2) instance using an Amazon
   Linux 2 AMI and install an Apache web server with PHP and MySQL support (sometimes
   called a LAMP web server or LAMP stack). You can use this server to host a static
   website or deploy a dynamic PHP application that reads and writes information
   to a database. This Automation document automates the procedure described in [Tutorial:
   Install a LAMP Web Server on Amazon Linux 2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-lamp-amazon-linux-2.html)
   in the *Amazon Elastic Compute Cloud User Guide for Linux Instances*.

Pre-requisites

  ---

To run the following Automation document, you must have permissions to run
   Automation workflows and create the resources below. The Automation workflow runs
   in the context of the current Amazon Identity and Access Management (IAM) user.

  
Resources Created
---

This Automation document launches a CloudFormation stack
   to create the following resources.

* A Virtual Private Cloud (VPC) with a route
   table, public subnet via an Internet Gateway (IGW), network ACL, and Security
   Group
* A Security Group allowing access to HTTP/80
* An IAM Instance Profile
   Role so the EC2 instance can register with Amazon Systems Manager
* An EC2 instance
   launched using the latest Amazon Linux AMI

Outputs
---

Once the Automation
   has completed, you will be able to navigate to the phpMyAdmin dashboard by navigating
   to the public DNS address (or the public IP address) of the launched instance
   followed by a forward slash and the name of the installation directory. For example:

  
>http://my.public.dns.amazonaws.com/phpMyAdmin

Next Steps
---

Once you
   have completed this Automation document, we recommend running the follow-up Automation
   document [```AWS-HostingAWordPressBlog-AL2```](https://console.aws.amazon.com/systems-manager/documents/AWS-HostingAWordPressBlog-AL2/description)
   which automates the procedure describe in [Tutorial: Hosting a WordPress Blog
   with Amazon Linux](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hosting-wordpress.html).

  
Cleanup
---

To remove resources created by this Automation document, navigate
   to the [CloudFormation console](https://console.aws.amazon.com/cloudformation/home)
   and delete the stack created. 

**Important:**

If you delete the stack created,
   then you must run this document again before using the Automation document ```AWS-HostingAWordPressBlog-AL2```.

  
*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-InstallALAMPServer-AL2).*"
mainSteps:
- action: aws:createStack
  description: '**Create the Amazon Linux Instance**


    The first step of this Automation document creates a CloudFormation stack which
    then creates the required resources for this tutorial. This includes a VPC, route
    table, internet gateway, network ACLs, subnet, security group, IAM Instance profile
    role, and an EC2 instance. This step can take approximately 5-7 minutes to complete.'
  inputs:
    Capabilities:
    - CAPABILITY_NAMED_IAM
    StackName: LAMPStack-AL2
    TemplateBody: "AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation
       template for Tutorial - Install a LAMP Web Server on Amazon Linux 2
Parameters:

        LatestAmazonLinuxAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'

          Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

      Mappings:
  PartitionMap:
    aws:
      ec2serviceprincipal: ec2.amazonaws.com

          aws-cn:
      ec2serviceprincipal: ec2.amazonaws.com.cn
Resources:

        ManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:

              Version: '2012-10-17'
        Statement:
          - Effect: Allow

                  Principal:
              Service:
                - ssm.amazonaws.com

                      - !FindInMap [ PartitionMap, !Ref AWS::Partition, ec2serviceprincipal]

                  Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Join
       [ '' , [ 'arn:', !Ref AWS::Partition, ':iam::aws:policy/AmazonSSMManagedInstanceCore'
       ] ]
      Path: '/'
      Policies:
        - PolicyName: putParameter

                PolicyDocument:
            Version: '2012-10-17'
            Statement:

                    # Allows access to Parameter Store parameters specific to the
       tutorial
              - Effect: Allow
                Action:
       
                 - ssm:PutParameter
                Resource: !Join [ '', [ 'arn:',
       !Ref AWS::Partition, ':ssm:*:*:parameter/Tutorials/Passwords/AL2/*' ] ]

        ManagedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:

            Path: '/'
      Roles:
        - !Ref ManagedInstanceRole
      InstanceProfileName:
       ManagedInstanceProfileLAMPAL2
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:

            CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames:
       true
      InstanceTenancy: default
      Tags:
        - Key: Name
 
               Value: Automation-LAMPStack-AL2
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

          Properties:
      Tags:
        - Key: Name
          Value: Automation-LAMPStack-AL2

        VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:

            VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublic:

          Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
       [0, !GetAZs '']
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch:
       true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
       Automation-LAMPStack-AL2
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'

          Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name

                Value: Automation-LAMPStack-AL2
  RouteTableAssociationPublic:

          Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
       !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTablePublicInternetRoute:

          Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:

            RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'

            GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'

          Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name

                Value: Automation-LAMPStack-AL2
  SubnetNetworkAclAssociationPublic:

          Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
       !Ref SubnetPublic
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:

          Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
       !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction:
       allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:

          Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
       !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction:
       allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  InstanceSecurityGroup:

          Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
       'Security Group created for AWS-InstallLAMPWebServer'
      GroupName: Automation-LAMPStack-AL2-HTTP

            SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:
       80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:

              - IpProtocol: -1
          FromPort: 0
          ToPort: 65535

                CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
       Automation-LAMPStack-AL2
      VpcId: !Ref VPC
  LinuxEc2Instance:
   
       Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small

            ImageId: !Ref LatestAmazonLinuxAmiId
      NetworkInterfaces:
    
          - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
      
          GroupSet:
            - Ref: 'InstanceSecurityGroup'
          SubnetId:

                  Ref: 'SubnetPublic'
      IamInstanceProfile: !Ref ManagedInstanceProfile

            Tags:
        - Key: Name
          Value: Automation-LAMPStack-AL2

      Outputs:
  TemplateID:
    Description: 'Template id.'
    Value: 'vpc'

        SubnetPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetPublic

          Export:
      Name: !Sub '${AWS::StackName}-SubnetPublic'
"
    TimeoutInMinutes: 5
  maxAttempts: 1
  name: createLAMPStackResources
  onFailure: step:deleteStackOnError
- action: aws:runCommand
  description: '**Output the public DNS address for the launched EC2 instance**


    This step outputs the public DNS address for the EC2 instance launched. You can
    use this public DNS address to test your instance in subsequent steps. Select
    the radio button next to the Step execution ID to display the public DNS address
    of the EC2 instance.'
  inputs:
    Comment: Outputting public DNS address of EC2 instance
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - curl -fsq http://169.254.169.254/latest/meta-data/public-hostname
      executionTimeout: '3600'
      workingDirectory: ''
    Targets:
    - Key: tag:Name
      Values:
      - Automation-LAMPStack-AL2
  name: outputPublicDNS
  onFailure: step:deleteStackOnError
- action: aws:runCommand
  description: '**Prepare the LAMP Server**


    This step starts with installing the latest security updates and bug fixes. After
    updates have been installed, the Apache web server (```httd24```), MySQL (```mysql56-server```),
    and PHP software packages (```php70``` and ```php70-mysqlnd```) are installed
    on the instance. The Apache web server service is then configured to start automatically.


    Once this step is complete, you can test your web server by entering the public
    DNS address (or the public IP address of your instance) in a web browser. You
    should see the Apache test page.'
  inputs:
    Comment: Installing LAMP Server
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - sudo yum update -y
      - sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
      - sudo yum install -y httpd mariadb-server
      - sudo systemctl start httpd
      - sudo systemctl enable httpd
      - sudo systemctl is-enabled httpd
      - curl -fsq http://169.254.169.254/latest/meta-data/public-hostname
      executionTimeout: '3600'
      workingDirectory: ''
    Targets:
    - Key: tag:Name
      Values:
      - Automation-LAMPStack-AL2
  name: installLAMPServer
  onFailure: step:deleteStackOnError
- action: aws:runCommand
  description: '**Setting File Permissions**


    This step adds your user (```ec2-user```) to the ```apache``` group. After this,
    the group ownership of ```/var/www``` and its contents is changed to the ```apache```
    group. The Automation then adds group write permissions and sets the group ID
    on future subdirectories for the directory ```/var/www``` and its subdirectories.'
  inputs:
    Comment: Setting file permissions
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - sudo usermod -a -G apache ec2-user
      - groups ec2-user
      - sudo chown -R ec2-user:apache /var/www
      - sudo chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {}
        ;
      - find /var/www -type f -exec sudo chmod 0664 {} ;
      executionTimeout: '3600'
    Targets:
    - Key: tag:Name
      Values:
      - Automation-LAMPStack-AL2
  name: setFilePermissions
  onFailure: step:deleteStackOnError
- action: aws:runCommand
  description: '**Testing the LAMP server using the PHP Endpoint**


    This step creates a PHP file, ```phpinfo.php```, in the Apache document root.
    Following this, you can navigate to the PHP information page by entering the public
    DNS address (or the public IP address of your instance) in a web browser. You
    should see the PHP information page.'
  inputs:
    Comment: Testing LAMP server with PHP endpoint
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
      executionTimeout: '3600'
    Targets:
    - Key: tag:Name
      Values:
      - Automation-LAMPStack-AL2
  name: testLAMPServer
  onFailure: step:deleteStackOnError
- action: aws:runCommand
  description: '**Removing the PHP Information page**


    This step removes the ```phpinfo.php``` file created in the previous step. Although
    this can be useful information, it should not be broadcast to the internet for
    security reasons.'
  inputs:
    Comment: Removing PHP file from previous step
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - rm /var/www/html/phpinfo.php
      executionTimeout: '3600'
    Targets:
    - Key: tag:Name
      Values:
      - Automation-LAMPStack-AL2
  name: removePHP
  onFailure: step:deleteStackOnError
- action: aws:runCommand
  description: '**Securing the MySQL Database**


    This step automates the process of setting a root password and removing the insecure
    features from the MySQL installation. First, the MySQL database is started. Next,
    a random password is generated for the root user and set within MySQL; this password
    is stored within Amazon Systems Manager Parameter Store. Additionally, the following
    configuration changes are made to MySQL database installation.


    * Removing anonymous user accounts

    * Disabling remote root login

    * Removing the test database


    Lastly, the MySQL database is configured to start at every boot.'
  inputs:
    Comment: Securing MySQL DB
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - sudo systemctl start mariadb
      - root=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1)
      - mysql --user=root <<_EOF_
      - UPDATE mysql.user SET Password=PASSWORD('$root') WHERE User='root';
      - DELETE FROM mysql.user WHERE User='';
      - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1',
        '::1');
      - DROP DATABASE IF EXISTS test;
      - DELETE FROM mysql.db WHERE Db='test' OR Db='test_%';
      - FLUSH PRIVILEGES;
      - _EOF_
      - az=$(wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone)
      - aws ssm put-parameter --name "/Tutorials/Passwords/AL2/MySQL/root" --type
        "SecureString" --value $root --description "MySQL root DB Password" --region
        "${az::-1}" --overwrite
      - sudo systemctl enable mariadb
      executionTimeout: '3600'
      workingDirectory: ''
    Targets:
    - Key: tag:Name
      Values:
      - Automation-LAMPStack-AL2
  name: secureDatabase
  onFailure: step:deleteStackOnError
- action: aws:runCommand
  description: '**Install phpMyAdmin**


    This step installs phpMyAdmin on your instance, which is a web-based database
    management tool that you can use to view and edit the MySQL databases. After this
    step completes, you can access phpMyAdmin by entering the public DNS address (or
    the public IP address of your instance) followed by a forward slash and the name
    ```phpMyAdmin``` in a web browser. For example:


    >http://my.public.dns.amazonaws.com/phpMyAdmin


    You should see the phpMyAdmin login page. To login, enter ```root``` as the user
    name and the value of the Parameter Store parameter [```/Tutorials/Passwords/AL2/MySQL/root```](https://console.aws.amazon.com/systems-manager/parameters/%252FTutorials%252FPasswords%252FMySQL%252Froot/description).



    **Important**



    We do not recommend using phpMyAdmin to access a LAMP server unless you have enabled
    SSL/TLS in Apache; otherwise, your database administrator password and other data
    are transmitted insecurely across the internet. For security recommendations from
    the developers, see [Securing your phpMyAdmin installation](https://docs.phpmyadmin.net/en/latest/setup.html#securing-your-phpmyadmin-installation).'
  inputs:
    Comment: Installing phpMyAdmin
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - sudo yum install php-mbstring -y
      - sudo systemctl restart httpd
      - sudo systemctl restart php-fpm
      - cd /var/www/html
      - wget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz
      - mkdir phpMyAdmin && tar -xvzf phpMyAdmin-latest-all-languages.tar.gz -C phpMyAdmin
        --strip-components 1
      - rm phpMyAdmin-latest-all-languages.tar.gz
      - sudo systemctl start mariadb
      executionTimeout: '3600'
    Targets:
    - Key: tag:Name
      Values:
      - Automation-LAMPStack-AL2
  isEnd: true
  name: installphpMyAdmin
  onFailure: step:deleteStackOnError
- action: aws:deleteStack
  description: '**Delete the CloudFormation stack**


    This step deletes the launched CloudFormation stack and the associated resources.
    This step will only be available in the event that a previous step failed.'
  inputs:
    StackName: '{{ createLAMPStackResources.StackId }}'
  isEnd: true
  maxAttempts: 1
  name: deleteStackOnError
outputs:
- createLAMPStackResources.StackId
- outputPublicDNS.Output
schemaVersion: '0.3'
