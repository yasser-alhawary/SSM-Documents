# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-TriggerHttpWsApiGwThrottlingTest_2020-09-21

            ## Intent
            Test HTTP or WebSockets API Gateway behavior when hitting throttling threshold

            ## Type
            TEST

            ## Risk
            High

            ## Requirements
              * HTTP or WebSockets API Gateway
              * Alarm for metric [4xx](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-metrics.html) or [ClientError](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html) setup for the specified API Gateway
              * There is constant traffic on API Gateway during test

            ## Permissions required for AutomationAssumeRole
              * apigateway:GET
              * apigateway:PATCH
              * servicequotas:GetServiceQuota
              * cloudwatch:DescribeAlarms
              * ssm:GetAutomationExecution
              * ssm:StartAutomationExecution
              * ssm:GetParameters
              * iam:PassRole

            ##### Permissions required to log output to CloudWatch
              * logs:PutLogEvents
              * logs:DescribeLogGroups
              * logs:DescribeLogStreams

            ## Supports Rollback
            Yes, restore original throttling settings.

            ## Cancellation behavior
            Restore original throttling settings

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) HttpWsApiGwId
              * type: String
              * description: The ID of the HTTP or WS API Gateway

            ### (Required) HttpWsStageName
              * type: String
              * description: The stage name of the HTTP or WS API Gateway

            ### (Required) 4xxAlarmName
              * type: String
              * description: Alarm for metric [4xx](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-metrics.html) or [ClientError](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html) setup for the specified API Gateway

            ### (Optional) IsRollback
              * type: String
              * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
              * default: false

            ### (Optional) PreviousExecutionId
              * type: String
              * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up

            ## Details
            The document injects failure by setting both throttling rate and trottling burst of the specified HTTP or WS API Gateway to 0. Alarm for metric [4xx](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-metrics.html) or [ClientError](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html) should be trigger by traffic on the gateway. In case of issues users should manually restore original throttling settings from backup.

            ## Steps executed in normal flow
              * CheckIsRollback
              * AssertAlarmToBeGreenBeforeTest
              * BackupThrottlingConfiguration
              * ChangeThrottlingConfiguration
              * AssertAlarmToBeRed
              * RollbackCurrentExecution
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * CheckIsRollback
              * GetInputsFromPreviousExecution
              * PrepareRollbackOfPreviousExecution
              * AssertHttpWsApiGwId
              * RollbackPreviousExecution

            ## Outputs
            None
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  HttpWsApiGwId:
    type: String
    description: (Required) The ID of the HTTP or WS API Gateway
  HttpWsStageName:
    type: String
    description: (Required) The stage name of the HTTP or WS API Gateway
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  4xxAlarmName:
    type: String
    description: (Required) Alarm for metric `4xx` or `ClientError` setup for the specified API Gateway
  IsRollback:
    type: String
    description: >-
      (Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: CheckIsRollback
    description: Check if document should be executed in rollback mode
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default: AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: HttpWsApiGwId
        Selector: $.Payload.HttpWsApiGwId[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_inputs_from_ssm_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events:
                raise KeyError('Requires ExecutionId')
        
            if not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            response_parameters = response['AutomationExecution']['Parameters']
            # TODO DIG-853
            for parameter in response_parameters:
                output[parameter] = response_parameters[parameter]
        
            return output
        
        


  - name: PrepareRollbackOfPreviousExecution
    description: Get original throttling settings for rollback
    action: aws:executeScript
    outputs:
      - Name: HttpWsThrottlingRateOriginalValue
        Selector: $.Payload.HttpWsThrottlingRateOriginalValue[0]
        Type: String
      - Name: HttpWsThrottlingBurstOriginalValue
        Selector: $.Payload.HttpWsThrottlingBurstOriginalValue[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
        StepName: 'BackupThrottlingConfiguration'
        ResponseField: 'HttpWsThrottlingRateOriginalValue,HttpWsThrottlingBurstOriginalValue'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def get_output_from_ssm_step_execution(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:
                raise KeyError('Requires ExecutionId, StepName and ResponseField in events')
        
            ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            for step in ssm_response['AutomationExecution']['StepExecutions']:
                if step['StepName'] == events['StepName']:
                    response_fields = events['ResponseField'].split(',')
                    output = {}
                    for response_field in response_fields:
                        if response_field in step['Outputs']:
                            output[response_field] = step['Outputs'][response_field]
                        else:
                            """
                            By default SSM ignores empty values when encodes API outputs to JSON. It may result in
                            a situation when an empty value is a valid value but step output completely misses it.
                            Usually happens with SQS queue policies, default policy is returned by API as an empty value
                            and executeApi step output ignores it. As a result, further steps in rollback execution will fail.
                            Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string
                            represents a default sqs policy
                            """
                            output[response_field] = ['']
                    return output
        
            # Could not find step name
            raise Exception('Can not find step name % in ssm execution response', events['StepName'])
        
        


  - name: AssertHttpWsApiGwId
    description: Validate that rollback is executed with the same input
    action: aws:branch
    inputs:
      Choices:
        - NextStep: RollbackPreviousExecution
          Variable: "{{ GetInputsFromPreviousExecution.HttpWsApiGwId }}"
          StringEquals: '{{ HttpWsApiGwId }}'
    isEnd: true

  - name: RollbackPreviousExecution
    description: Restore original throttling settings for HTTP or WS API Gateway
    maxAttempts: 5
    action: aws:executeScript
    outputs:
      - Name: HttpWsThrottlingRateNewValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: HttpWsThrottlingBurstNewValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: set_throttling_config
      InputPayload:
        HttpWsApiGwId: '{{ HttpWsApiGwId }}'
        HttpWsStageName: '{{ HttpWsStageName }}'
        HttpWsThrottlingRate: '{{ PrepareRollbackOfPreviousExecution.HttpWsThrottlingRateOriginalValue }}'
        HttpWsThrottlingBurst: '{{ PrepareRollbackOfPreviousExecution.HttpWsThrottlingBurstOriginalValue }}'
      Script: |-
        import logging
        
        import boto3
        from botocore.config import Config
        
        log = logging.getLogger()
        log.setLevel(logging.DEBUG)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if not response['ResponseMetadata']['HTTPStatusCode'] == 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def get_service_quota(config: object, service_code: str, quota_code: str) -> dict:
            client = boto3.client('service-quotas', config=config)
            response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)
            assert_https_status_code_200(response, f'Failed to perform get_service_quota with '
                                                   f'ServiceCode: {service_code} and QuotaCode: {quota_code}')
            return response
        
        

        def get_stage(gateway_id: str, stage_name: str) -> dict:
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigatewayv2', config=config)
            response = client.get_stage(ApiId=gateway_id, StageName=stage_name)
            assert_https_status_code_200(response, f'Failed to perform get_stage with '
                                                   f'ApiId: {gateway_id} and StageName: {stage_name}')
            return response
        
        

        def set_throttling_config(events: dict, context: dict) -> dict:
            if 'HttpWsApiGwId' not in events:
                raise KeyError('Requires HttpWsApiGwId in events')
        
            if 'HttpWsThrottlingRate' not in events:
                raise KeyError('Requires HttpWsThrottlingRate in events')
        
            if 'HttpWsThrottlingBurst' not in events:
                raise KeyError('Requires HttpWsThrottlingBurst in events')
        
            if 'HttpWsStageName' not in events:
                raise KeyError('Requires HttpWsStageName in events')
        
            new_rate_limit: float = float(events['HttpWsThrottlingRate'])
            new_burst_limit: int = int(events['HttpWsThrottlingBurst'])
            gateway_id: str = events.get('HttpWsApiGwId')
            stage_name: str = events.get('HttpWsStageName')
            route_key: str = events.get('HttpWsRouteKey', '*')
        
            output: dict = {}
            quota_rate_limit_code: str = 'L-8A5B8E43'
            quota_burst_limit_code: str = 'L-CDF5615A'
        
            boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            apigw2_client = boto3.client('apigatewayv2', config=boto3_config)
            quota_rate_limit: float = get_service_quota(boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']
            quota_burst_limit: float = get_service_quota(boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']
        
            if new_rate_limit > quota_rate_limit:
                raise ValueError(f'Given value of HttpWsThrottlingRate: {new_rate_limit}, can not be more than '
                                 f'service quota Throttle rate: {quota_rate_limit}')
        
            if new_burst_limit > quota_burst_limit:
                raise ValueError(f'Given value of HttpWsThrottlingBurst: {new_burst_limit}, can not be more than '
                                 f'service quota Throttle burst rate: {quota_burst_limit}')
        
            stage = get_stage(gateway_id, stage_name)
        
            if route_key != '*':
                stage_route_settings = stage['RouteSettings']
                if route_key not in stage_route_settings:
                    stage_route_settings[route_key] = {}
                stage_route_settings[route_key]['ThrottlingRateLimit'] = new_rate_limit
                stage_route_settings[route_key]['ThrottlingBurstLimit'] = new_burst_limit
        
                response = apigw2_client.update_stage(
                    ApiId=gateway_id, StageName=stage_name, RouteSettings=stage_route_settings
                )
                output['RateLimit'] = response['RouteSettings'][route_key]['ThrottlingRateLimit']
                output['BurstLimit'] = response['RouteSettings'][route_key]['ThrottlingBurstLimit']
        
            else:
                default_route_settings = {
                    'ThrottlingRateLimit': new_rate_limit,
                    'ThrottlingBurstLimit': new_burst_limit
                }
                response = apigw2_client.update_stage(
                    ApiId=gateway_id, StageName=stage_name, DefaultRouteSettings=default_route_settings
                )
                output['RateLimit'] = response['DefaultRouteSettings']['ThrottlingRateLimit']
                output['BurstLimit'] = response['DefaultRouteSettings']['ThrottlingBurstLimit']
        
            output['RateLimit'] = int(output['RateLimit'])
            return output

    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time.
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{4xxAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]

  - name: BackupThrottlingConfiguration
    description: Backup original throttling settings for rollback
    action: aws:executeAwsApi
    outputs:
      - Name: HttpWsThrottlingRateOriginalValue
        Selector: '$.DefaultRouteSettings.ThrottlingRateLimit'
        Type: Integer
      - Name: HttpWsThrottlingBurstOriginalValue
        Selector: '$.DefaultRouteSettings.ThrottlingBurstLimit'
        Type: Integer
    inputs:
      Service: apigatewayv2
      Api: GetStage
      ApiId: "{{ HttpWsApiGwId }}"
      StageName: "{{ HttpWsStageName }}"

  - name: ChangeThrottlingConfiguration
    description: Inject failure by changing throttling settings for HTTP or WS API Gateway to 0
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    action: aws:executeScript
    outputs:
      - Name: HttpWsThrottlingRateNewValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: HttpWsThrottlingBurstNewValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: set_throttling_config
      InputPayload:
        HttpWsApiGwId: '{{ HttpWsApiGwId }}'
        HttpWsStageName: '{{ HttpWsStageName }}'
        HttpWsThrottlingRate: 0
        HttpWsThrottlingBurst: 0.0
      Script: |-
        import logging
        
        import boto3
        from botocore.config import Config
        
        log = logging.getLogger()
        log.setLevel(logging.DEBUG)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if not response['ResponseMetadata']['HTTPStatusCode'] == 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def get_service_quota(config: object, service_code: str, quota_code: str) -> dict:
            client = boto3.client('service-quotas', config=config)
            response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)
            assert_https_status_code_200(response, f'Failed to perform get_service_quota with '
                                                   f'ServiceCode: {service_code} and QuotaCode: {quota_code}')
            return response
        
        

        def get_stage(gateway_id: str, stage_name: str) -> dict:
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigatewayv2', config=config)
            response = client.get_stage(ApiId=gateway_id, StageName=stage_name)
            assert_https_status_code_200(response, f'Failed to perform get_stage with '
                                                   f'ApiId: {gateway_id} and StageName: {stage_name}')
            return response
        
        

        def set_throttling_config(events: dict, context: dict) -> dict:
            if 'HttpWsApiGwId' not in events:
                raise KeyError('Requires HttpWsApiGwId in events')
        
            if 'HttpWsThrottlingRate' not in events:
                raise KeyError('Requires HttpWsThrottlingRate in events')
        
            if 'HttpWsThrottlingBurst' not in events:
                raise KeyError('Requires HttpWsThrottlingBurst in events')
        
            if 'HttpWsStageName' not in events:
                raise KeyError('Requires HttpWsStageName in events')
        
            new_rate_limit: float = float(events['HttpWsThrottlingRate'])
            new_burst_limit: int = int(events['HttpWsThrottlingBurst'])
            gateway_id: str = events.get('HttpWsApiGwId')
            stage_name: str = events.get('HttpWsStageName')
            route_key: str = events.get('HttpWsRouteKey', '*')
        
            output: dict = {}
            quota_rate_limit_code: str = 'L-8A5B8E43'
            quota_burst_limit_code: str = 'L-CDF5615A'
        
            boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            apigw2_client = boto3.client('apigatewayv2', config=boto3_config)
            quota_rate_limit: float = get_service_quota(boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']
            quota_burst_limit: float = get_service_quota(boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']
        
            if new_rate_limit > quota_rate_limit:
                raise ValueError(f'Given value of HttpWsThrottlingRate: {new_rate_limit}, can not be more than '
                                 f'service quota Throttle rate: {quota_rate_limit}')
        
            if new_burst_limit > quota_burst_limit:
                raise ValueError(f'Given value of HttpWsThrottlingBurst: {new_burst_limit}, can not be more than '
                                 f'service quota Throttle burst rate: {quota_burst_limit}')
        
            stage = get_stage(gateway_id, stage_name)
        
            if route_key != '*':
                stage_route_settings = stage['RouteSettings']
                if route_key not in stage_route_settings:
                    stage_route_settings[route_key] = {}
                stage_route_settings[route_key]['ThrottlingRateLimit'] = new_rate_limit
                stage_route_settings[route_key]['ThrottlingBurstLimit'] = new_burst_limit
        
                response = apigw2_client.update_stage(
                    ApiId=gateway_id, StageName=stage_name, RouteSettings=stage_route_settings
                )
                output['RateLimit'] = response['RouteSettings'][route_key]['ThrottlingRateLimit']
                output['BurstLimit'] = response['RouteSettings'][route_key]['ThrottlingBurstLimit']
        
            else:
                default_route_settings = {
                    'ThrottlingRateLimit': new_rate_limit,
                    'ThrottlingBurstLimit': new_burst_limit
                }
                response = apigw2_client.update_stage(
                    ApiId=gateway_id, StageName=stage_name, DefaultRouteSettings=default_route_settings
                )
                output['RateLimit'] = response['DefaultRouteSettings']['ThrottlingRateLimit']
                output['BurstLimit'] = response['DefaultRouteSettings']['ThrottlingBurstLimit']
        
            output['RateLimit'] = int(output['RateLimit'])
            return output


  - name: AssertAlarmToBeRed
    description: Wait for expected alarm to be red after failure is injected
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    # Timeout value here should be less than default timeout of 1200s, to ensure TimedOut status
    timeoutSeconds: 900
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{4xxAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]

  - name: RollbackCurrentExecution
    description: Restore original throttling settings for HTTP or WS API Gateway
    maxAttempts: 5
    onCancel: step:TriggerRollback
    action: aws:executeScript
    outputs:
      - Name: HttpWsThrottlingRateNewValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: HttpWsThrottlingBurstNewValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: set_throttling_config
      InputPayload:
        HttpWsApiGwId: '{{ HttpWsApiGwId }}'
        HttpWsStageName: '{{ HttpWsStageName }}'
        HttpWsThrottlingRate: '{{ BackupThrottlingConfiguration.HttpWsThrottlingRateOriginalValue }}'
        HttpWsThrottlingBurst: '{{ BackupThrottlingConfiguration.HttpWsThrottlingBurstOriginalValue }}'
      Script: |-
        import logging
        
        import boto3
        from botocore.config import Config
        
        log = logging.getLogger()
        log.setLevel(logging.DEBUG)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if not response['ResponseMetadata']['HTTPStatusCode'] == 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def get_service_quota(config: object, service_code: str, quota_code: str) -> dict:
            client = boto3.client('service-quotas', config=config)
            response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)
            assert_https_status_code_200(response, f'Failed to perform get_service_quota with '
                                                   f'ServiceCode: {service_code} and QuotaCode: {quota_code}')
            return response
        
        

        def get_stage(gateway_id: str, stage_name: str) -> dict:
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigatewayv2', config=config)
            response = client.get_stage(ApiId=gateway_id, StageName=stage_name)
            assert_https_status_code_200(response, f'Failed to perform get_stage with '
                                                   f'ApiId: {gateway_id} and StageName: {stage_name}')
            return response
        
        

        def set_throttling_config(events: dict, context: dict) -> dict:
            if 'HttpWsApiGwId' not in events:
                raise KeyError('Requires HttpWsApiGwId in events')
        
            if 'HttpWsThrottlingRate' not in events:
                raise KeyError('Requires HttpWsThrottlingRate in events')
        
            if 'HttpWsThrottlingBurst' not in events:
                raise KeyError('Requires HttpWsThrottlingBurst in events')
        
            if 'HttpWsStageName' not in events:
                raise KeyError('Requires HttpWsStageName in events')
        
            new_rate_limit: float = float(events['HttpWsThrottlingRate'])
            new_burst_limit: int = int(events['HttpWsThrottlingBurst'])
            gateway_id: str = events.get('HttpWsApiGwId')
            stage_name: str = events.get('HttpWsStageName')
            route_key: str = events.get('HttpWsRouteKey', '*')
        
            output: dict = {}
            quota_rate_limit_code: str = 'L-8A5B8E43'
            quota_burst_limit_code: str = 'L-CDF5615A'
        
            boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            apigw2_client = boto3.client('apigatewayv2', config=boto3_config)
            quota_rate_limit: float = get_service_quota(boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']
            quota_burst_limit: float = get_service_quota(boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']
        
            if new_rate_limit > quota_rate_limit:
                raise ValueError(f'Given value of HttpWsThrottlingRate: {new_rate_limit}, can not be more than '
                                 f'service quota Throttle rate: {quota_rate_limit}')
        
            if new_burst_limit > quota_burst_limit:
                raise ValueError(f'Given value of HttpWsThrottlingBurst: {new_burst_limit}, can not be more than '
                                 f'service quota Throttle burst rate: {quota_burst_limit}')
        
            stage = get_stage(gateway_id, stage_name)
        
            if route_key != '*':
                stage_route_settings = stage['RouteSettings']
                if route_key not in stage_route_settings:
                    stage_route_settings[route_key] = {}
                stage_route_settings[route_key]['ThrottlingRateLimit'] = new_rate_limit
                stage_route_settings[route_key]['ThrottlingBurstLimit'] = new_burst_limit
        
                response = apigw2_client.update_stage(
                    ApiId=gateway_id, StageName=stage_name, RouteSettings=stage_route_settings
                )
                output['RateLimit'] = response['RouteSettings'][route_key]['ThrottlingRateLimit']
                output['BurstLimit'] = response['RouteSettings'][route_key]['ThrottlingBurstLimit']
        
            else:
                default_route_settings = {
                    'ThrottlingRateLimit': new_rate_limit,
                    'ThrottlingBurstLimit': new_burst_limit
                }
                response = apigw2_client.update_stage(
                    ApiId=gateway_id, StageName=stage_name, DefaultRouteSettings=default_route_settings
                )
                output['RateLimit'] = response['DefaultRouteSettings']['ThrottlingRateLimit']
                output['BurstLimit'] = response['DefaultRouteSettings']['ThrottlingBurstLimit']
        
            output['RateLimit'] = int(output['RateLimit'])
            return output


  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{4xxAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true

  - name: TriggerRollback
    description: This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def start_rollback_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
        
            # Get parameters for current execution and add IsRollback and PreviousExecutionId
            response_parameters = response['AutomationExecution']['Parameters']
            response_parameters['IsRollback'] = ['true']
            response_parameters['PreviousExecutionId'] = [events['ExecutionId']]
        
            rollback_execution_response = ssm.start_automation_execution(
                DocumentName=response['AutomationExecution']['DocumentName'],
                DocumentVersion=response['AutomationExecution']['DocumentVersion'],
                Parameters=response_parameters
            )
            output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']
            return output
        
        

    isEnd: true
