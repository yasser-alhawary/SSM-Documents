# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-ForceLambdaThrottlingTest_2020-10-26

            ## Intent
            Test Lambda behavior when hitting ReservedConcurrentExecutions value

            ## Type
            TEST

            ## Risk
            Medium

            ## Requirements
              * Lambda Function
              * Alarm for metric [Throttles](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics.html) setup for the Lambda function

            ## Permissions required for AutomationAssumeRole
              * ssm:StartAutomationExecution
              * ssm:GetAutomationExecution
              * ssm:GetParameters
              * lambda:PutFunctionConcurrency
              * lambda:GetFunctionConcurrency
              * lambda:DeleteFunctionConcurrency
              * cloudwatch:DescribeAlarms
              * iam:PassRole

            ## Supports Rollback
            Yes.

            ## Cancellation behavior
            Fail or rollback with description of what is rolled back

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) LambdaARN
              * type: String
              * description: The Lambda function ARN

            ### (Required) ThrottlesAlarmName
              * type: String
              * description: Alarm for metric `Throttles` setup for the Lambda function

            ### (Optional) IsRollback
              * type: String
              * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
              * default: false

            ### (Optional) PreviousExecutionId
              * type: String
              * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up

            ## Details
            The document injects failure by setting reserved concurrent executions to 0. In case of issues users should
            manually revert reserved concurrent execution to the original value.

            ## Steps executed in normal flow
              * CheckIsRollback
              * AssertAlarmToBeGreenBeforeTest
              * BackupReservedConcurrentExecutions
              * EnableFunctionThrottling
              * AssertAlarmToBeRed
              * RollbackCurrentExecution
              * RemoveConcurrentExecutions/RollbackConcurrentExecutionsValue
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * CheckIsRollback
              * PrepareRollbackOfPreviousExecution
              * GetInputsFromPreviousExecution
              * AssertLambdaARN
              * RollbackPreviousExecution
              * RollbackConcurrentExecutionsValueOnRollback/RemoveConcurrentExecutionsOnRollback

            ## Outputs
            None
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  LambdaARN:
    type: String
    description: (Required) LambdaARN
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  ThrottlesAlarmName:
    type: String
    description: (Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test.
  IsRollback:
    type: String
    description: >-
      (Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: CheckIsRollback
    description: Check if document should be executed in rollback mode
    action: aws:branch
    inputs:
      Choices:
        - NextStep: PrepareRollbackOfPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default: AssertAlarmToBeGreenBeforeTest

  - name: PrepareRollbackOfPreviousExecution
    description: Get reserved concurrent executions value that will be used to revert Lambda function to its original state
    action: aws:executeScript
    outputs:
      - Name: ReservedConcurrentExecutions
        Selector: $.Payload.ReservedConcurrentExecutions
        Type: Integer
      - Name: IsConcurrentExecutionsConfigured
        Selector: $.Payload.IsConcurrentExecutionsConfigured
        Type: Boolean
    inputs:
      Runtime: python3.8
      Handler: get_typed_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'BackupReservedConcurrentExecutions'
        ResponseField: 'ReservedConcurrentExecutions,IsConcurrentExecutionsConfigured'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_typed_output_from_ssm_step_execution(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:
                raise KeyError('Requires ExecutionId, StepName and ResponseField in events')
        
            ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            for step in ssm_response['AutomationExecution']['StepExecutions']:
                if step['StepName'] == events['StepName']:
                    response_fields = events['ResponseField'].split(',')
                    output = {}
                    for response_field in response_fields:
                        if response_field in step['Outputs']:
                            # In order to return output values with specific types (int, str etc) we have to
                            # use 'OutputPayload' and convert it to json object, otherwise all values are returned as string.
                            output_payload = json.loads(step['Outputs']['OutputPayload'][0])
                            output[response_field] = output_payload['Payload'][response_field]
                        else:
                            # If value for given parameter was not found None is set.
                            output[response_field] = None
                    return output
        
            # Could not find step name
            raise Exception('Can not find step name % in ssm execution response', events['StepName'])
        
        


  - name: GetInputsFromPreviousExecution
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: LambdaARN
        Selector: $.Payload.LambdaARN[0]
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def get_inputs_from_ssm_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events:
                raise KeyError('Requires ExecutionId')
        
            if not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            response_parameters = response['AutomationExecution']['Parameters']
            # TODO DIG-853
            for parameter in response_parameters:
                output[parameter] = response_parameters[parameter]
        
            return output
        
        


  - name: AssertLambdaARN
    description: Validate that rollback is executed with the same input
    action: aws:branch
    inputs:
      Choices:
        - NextStep: RollbackPreviousExecution
          Variable: "{{ GetInputsFromPreviousExecution.LambdaARN }}"
          StringEquals: '{{ LambdaARN }}'
    isEnd: true

  - name: RollbackPreviousExecution
    description: Select if reserved concurrent executions has to be removed or restored on rollback
    action: aws:branch
    inputs:
      Choices:
        - NextStep: RemoveConcurrentExecutionsOnRollback
          Variable: '{{PrepareRollbackOfPreviousExecution.IsConcurrentExecutionsConfigured}}'
          BooleanEquals: false
        - NextStep: RollbackConcurrentExecutionsValueOnRollback
          Variable: '{{PrepareRollbackOfPreviousExecution.IsConcurrentExecutionsConfigured}}'
          BooleanEquals: true

  - name: RollbackConcurrentExecutionsValueOnRollback
    description: Restore original reserved concurrent executions value on rollback
    action: aws:executeAwsApi
    inputs:
      Service: lambda
      Api: PutFunctionConcurrency
      FunctionName: "{{LambdaARN}}"
      ReservedConcurrentExecutions: "{{PrepareRollbackOfPreviousExecution.ReservedConcurrentExecutions}}"
    isEnd: true

  - name: RemoveConcurrentExecutionsOnRollback
    description: Remove reserved concurrent executions on rollback
    maxAttempts: 5
    onCancel: step:TriggerRollback
    action: aws:executeAwsApi
    inputs:
      Service: lambda
      Api: DeleteFunctionConcurrency
      FunctionName: "{{LambdaARN}}"
    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time.
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    onFailure: Abort
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ThrottlesAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]

  - name: BackupReservedConcurrentExecutions
    description: Get reserved concurrent executions value for rollback
    action: aws:executeScript
    outputs:
      - Name: IsConcurrentExecutionsConfigured
        Selector: $.Payload.IsConcurrentExecutionsConfigured
        Type: Boolean
      - Name: ReservedConcurrentExecutions
        Selector: $.Payload.ReservedConcurrentExecutions
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: backup_reserved_concurrent_executions
      InputPayload:
        LambdaARN: "{{LambdaARN}}"
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def backup_reserved_concurrent_executions(events: dict, context):
            lambda_arn = events.get('LambdaARN')
            if not lambda_arn:
                raise KeyError('Requires LambdaARN in events')
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            lambda_client = boto3.client('lambda', config=config)
            response = lambda_client.get_function_concurrency(FunctionName=lambda_arn)
            is_concurrent_executions_configured = True if response.get('ReservedConcurrentExecutions') else False
            reserved_concurrent_executions = response.get('ReservedConcurrentExecutions')
            if not reserved_concurrent_executions:
                # Value must be presented for SSM automation execution in payload therefore in case if
                # 'ReservedConcurrentExecutions' is not configured we set it to -1
                reserved_concurrent_executions = -1
            return {'IsConcurrentExecutionsConfigured': is_concurrent_executions_configured,
                    'ReservedConcurrentExecutions': reserved_concurrent_executions}
        
        


  - name: EnableFunctionThrottling
    description: Set reserved concurrent executions to 0 to inject failure
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    action: aws:executeAwsApi
    inputs:
      Service: lambda
      Api: PutFunctionConcurrency
      FunctionName: "{{LambdaARN}}"
      ReservedConcurrentExecutions: 0

  - name: AssertAlarmToBeRed
    description: Wait for expected alarm to be red after failure is injected
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ThrottlesAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]

  - name: RollbackCurrentExecution
    description: Select if reserved concurrent executions has to be removed or restored
    action: aws:branch
    inputs:
      Choices:
        - NextStep: RemoveConcurrentExecutions
          Variable: '{{BackupReservedConcurrentExecutions.IsConcurrentExecutionsConfigured}}'
          BooleanEquals: false
        - NextStep: RollbackConcurrentExecutionsValue
          Variable: '{{BackupReservedConcurrentExecutions.IsConcurrentExecutionsConfigured}}'
          BooleanEquals: true

  - name: RemoveConcurrentExecutions
    description: Remove reserved concurrent executions
    maxAttempts: 5
    onCancel: step:TriggerRollback
    action: aws:executeAwsApi
    inputs:
      Service: lambda
      Api: DeleteFunctionConcurrency
      FunctionName: "{{LambdaARN}}"
    nextStep: AssertAlarmToBeGreen

  - name: RollbackConcurrentExecutionsValue
    description: Restore original reserved concurrent executions value
    maxAttempts: 5
    onCancel: step:TriggerRollback
    action: aws:executeAwsApi
    inputs:
      Service: lambda
      Api: PutFunctionConcurrency
      FunctionName: "{{LambdaARN}}"
      ReservedConcurrentExecutions: "{{BackupReservedConcurrentExecutions.ReservedConcurrentExecutions}}"
    nextStep: AssertAlarmToBeGreen

  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ThrottlesAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true

  - name: TriggerRollback
    description: This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def start_rollback_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
        
            # Get parameters for current execution and add IsRollback and PreviousExecutionId
            response_parameters = response['AutomationExecution']['Parameters']
            response_parameters['IsRollback'] = ['true']
            response_parameters['PreviousExecutionId'] = [events['ExecutionId']]
        
            rollback_execution_response = ssm.start_automation_execution(
                DocumentName=response['AutomationExecution']['DocumentName'],
                DocumentVersion=response['AutomationExecution']['DocumentVersion'],
                Parameters=response_parameters
            )
            output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']
            return output
        
        

    isEnd: true
