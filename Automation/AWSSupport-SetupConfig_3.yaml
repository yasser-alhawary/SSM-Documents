description: "*This document will assist you to setup AWS Config by creating the service
   linked role, recorder, s3 bucket , required bucket policy, delivery channel and
   optionally aggregator authorizations in source accounts/regions where you run
   the workflow. The new resources will be created only if there are no existing
   resources, if there are any existing resources they will be leveraged during the
   setup.*  

---
This document has six parameters:
- (Required) BucketName,
   if not provided the default 'aws-config-delivery-channel' will be considered.

  - (Required) IncludeGlobalResourcesRegion to avoid duplication, specify one Region
   for global resources.
- (Required) AutomationAssumeRole for the IAM role required
   for executing AWS APIs in the document.
- (Required) Partition default value
   is 'aws'.
- (Optional) AggregatorAccountId is the aggregator account id for setting
   authorization in source accounts for this aggreagtor account.Default is none.

  - (Optional) AggregatorAccountRegion is the aggregator region for setting authoriztion
   in source accounts for this region

**This document if used for multi-account
   setup, requires AutomationExecutionRole called 'AWS-SystemsManager-AutomationExecutionRole'.
   Please refer the below document for details on running ssm documents multiaccount,
   multi-region:
 - https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html.
   Also please ensure to add the appropriate permissions mentioned in workflow public
   documentation for the AutomationAssumeRole to be able to execute Config and S3
   APIs."
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  S3BucketName:
    type: "String"
    description: "(Required) S3 Bucket name for the AWS Config delivery channel. The
       name provided will be appended with '-[AWS Account ID]'."
    allowedPattern: "^[a-zA-Z0-9.-_]{1,255}$"
    default: "aws-config-delivery-channel"
  IncludeGlobalResourcesRegion:
    type: "String"
    description: "(Required) To avoid duplication, specify one Region for global resources."
    default: "us-east-1"
  AutomationAssumeRole:
    type: "String"
    description: "(Required) The IAM role that allows Automation to perform the actions
       on your behalf. This IAM role needs a trust relationship to ssm.amazonaws.com
       (see README)"
    allowedPattern: "^$|^arn:aws:iam::[0-9]*:role/[/w+=,.@-]+$"
  Partition:
    type: "String"
    description: "(Required) AWS Partition. For GovCloud, use 'aws-us-gov'"
    default: "aws"
  AggregatorAccountId:
    type: "String"
    description: "(Optional) If you choose to setup Config Aggregation, the AWS Account
       ID to which Config data will be aggregated. This is used to authorize the
       source accounts."
    default: ""
    allowedPattern: "^($|d{12})$"
  AggregatorAccountRegion:
    type: "String"
    description: "(Optional) If you choose to setup Config Aggregation, the AWS Account
       Region to which Config data will be aggregated. This is used to authorize
       the source accounts."
    default: ""
    allowedPattern: "^($|w{2}-.+-w{1})$"
mainSteps:
- name: "CreateServiceLinkedRole"
  action: "aws:executeScript"
  nextStep: "CreateRecorder"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "import json
import boto3
from botocore.exceptions import ClientError

      
def script_handler(event, context):
    iam_client = boto3.client("iam"
      )
    # if it does not already exist, create the service-linked role for config

          try:
        iam_client.create_service_linked_role(AWSServiceName="config.amazonaws.com"
      )
    except ClientError as ex:
        if ex.response["Error"]["Code"
      ] == "InvalidInputException":
            print ("Service role name AWSServiceRoleForConfig
       already exists. Using the existing Service linked role.")
        if ex.response["
      Error"]["Code"] == "AccessDenied":
            raise Exception ("(Access
       Denied) The SSM Role does not have enough permission. Please check the role
       permission policy for CreateServiceLinkedRole API. Also check for any permission
       boundary or SCPs attached to the account")
    return
"
- name: "CreateRecorder"
  action: "aws:executeScript"
  nextStep: "CreateBucket"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    InputPayload:
      Partition: "{{Partition}}"
      AccountId: "{{global:ACCOUNT_ID}}"
      Region: "{{global:REGION}}"
      IncludeGlobalResourcesRegion: "{{IncludeGlobalResourcesRegion}}"
    Script: "import json
import boto3
from botocore.exceptions import ClientError

      
def script_handler(event, context):
    # get input parameters
    region
       = event["Region"]
    partition = event["Partition"]
    account_id
       = event["AccountId"]
    global_resource_region = event["IncludeGlobalResourcesRegion"
      ]
    config_client = boto3.client("config")
    roleARN = f"arn:{partition}:iam::{account_id}:role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig"
      

    # if it does not already exist, create the configuration recorder

          configuration_recorder_name = "default"
    try:
        response =
       config_client.describe_configuration_recorders()
        if response["ConfigurationRecorders"
      ]: 
            configuration_recorder_name = response["ConfigurationRecorders"
      ][0]["name"]
            roleARN = response["ConfigurationRecorders"][0]["
      roleARN"]
            print("Configuration Recorder already exists with name
       " + configuration_recorder_name + ". Hence proceeding with existing recorder."
      )
        
        if global_resource_region == region :
            print
       ("Configuration Recorder created with name " + configuration_recorder_name)

                  config_client.put_configuration_recorder(
                   
       ConfigurationRecorder={
                        "name": configuration_recorder_name,

                              "roleARN": roleARN,
                        "recordingGroup"
      : {
                            "allSupported": True,
                 
                 "includeGlobalResourceTypes": True
                        }

                          }
                )         
        config_client.put_configuration_recorder(

                      ConfigurationRecorder={
                    "name": configuration_recorder_name,

                          "roleARN": roleARN,
                    "recordingGroup"
      : {
                        "allSupported": True,
                     
         "includeGlobalResourceTypes": False
                    }
         
             }
            )
    except ClientError as ex:
        if ex.response["
      Error"]["Code"] == "MaxNumberOfConfigurationRecordersExceededException"
      :
        # Currently, you can specify only one configuration recorder per
       region in your account.
            print ("Configuration Recorder already
       exists with name " + configuration_recorder_name + ". Hence proceeding with
       existing recorder.")
        if ex.response["Error"]["Code"] == "AccessDeniedException"
      :
            raise Exception ("(Access Denied) The SSM Role does not have
       enough permission. Please check the role permission policy for PutConfigurationRecorder
       API and DescribeConfigurationRecorders API. Also check for any permission
       boundary or SCPs attached to the account")
    return {'recordername': configuration_recorder_name}
"
  outputs:
  - Selector: "$.Payload.recordername"
    Name: "recordername"
    Type: "String"
- name: "CreateBucket"
  action: "aws:executeScript"
  nextStep: "CreateDeliveryChannel"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    InputPayload:
      Partition: "{{Partition}}"
      AccountId: "{{global:ACCOUNT_ID}}"
      Region: "{{global:REGION}}"
      S3BucketName: "{{S3BucketName}}"
    Script: "import json
import boto3
from botocore.exceptions import ClientError

      
def script_handler(event, context):
    # get input parameters
    partition
       = event["Partition"]
    account_id = event["AccountId"]
    region
       = event["Region"]
    s3_bucket_name = event["S3BucketName"]
    s3_client
       = boto3.client("s3")
    flagcreate = False
    s3_resource = boto3.resource('s3')

          
    try:
        if s3_resource.Bucket(s3_bucket_name) in s3_resource.buckets.all():

                  print ("S3 Bucket {} already exists. Using the existing bucket
       for delivery Channel".format(s3_bucket_name))
            flagcreate = False

              else:
            s3_bucket_name = s3_bucket_name + "-" + account_id

                  bucket_policy = {
                "Version": "2012-10-17"
      ,
                "Statement": [
                    {
               
               "Sid": "AWSConfigBucketPermissionsCheck",
                  
            "Effect": "Allow",
                        "Principal": {
  
                                "Service": [
                                "
      config.amazonaws.com"
                            ]
                    
          },
                        "Action": "s3:GetBucketAcl",
        
                      "Resource": f"arn:{partition}:s3:::{s3_bucket_name}"

                          },
                    {
                        "Sid"
      : "AWSConfigBucketExistenceCheck",
                        "Effect": "
      Allow",
                        "Principal": {
                       
           "Service": [
                                "config.amazonaws.com"
      
                            ]
                        },
              
                "Action": "s3:ListBucket",
                        "Resource"
      : f"arn:{partition}:s3:::{s3_bucket_name}"
                    },
     
                     {
                        "Sid": " AWSConfigBucketDelivery"
      ,
                        "Effect": "Allow",
                        "
      Principal": {
                            "Service": [
               
                       "config.amazonaws.com"
                            ]

                              },
                        "Action": "s3:PutObject"
      ,
                        "Resource": f"arn:{partition}:s3:::{s3_bucket_name}/*"
      ,
                        "Condition": {
                            "
      StringEquals": {
                                "s3:x-amz-acl": "bucket-owner-full-control"
      
                            }
                        }
               
           }
                ]
            }
            # specify the region
       if not in us-east-1
            # details: https://github.com/boto/boto3/issues/125

                  if region == "us-east-1":
                s3_client.create_bucket(

                          Bucket = s3_bucket_name 
                )
         
         else:
                s3_client.create_bucket(
                    Bucket
       = s3_bucket_name,
                    CreateBucketConfiguration = {
   
                           "LocationConstraint": region
                    }

                      )
                
            s3_client.put_bucket_policy(

                      Bucket = s3_bucket_name,
                Policy = json.dumps(bucket_policy)

                  )
            flagcreate = True
            print ("S3 Bucket
       {} created. Using this bucket for delivery Channel".format(s3_bucket_name))

      
    except ClientError as ex:
        if ex.response["Error"]["Code"
      ] == "IllegalLocationConstraintException" or ex.response["Error"]["Code"
      ] == "BucketAlreadyExists" or ex.response["Error"]["Code"] == "BucketAlreadyOwnedByYou"
      :
            print ("S3 Bucket {} already exists. Using the existing bucket
       for delivery Channel".format(s3_bucket_name))
            flagcreate = False

                  
        if ex.response["Error"]["Code"] == "AccessDenied"
      :
            raise Exception ("(Access Denied) The SSM Role does not have
       enough permission. Please check the role permission policy for ListAllMyBuckets,
       CreateBucket and PutBucketPolicy API. Also check for any permission boundary
       or SCPs attached to the account" )
  
    return {'flagcreate': flagcreate}
"
  outputs:
  - Selector: "$.Payload.flagcreate"
    Name: "flagcreate"
    Type: "Boolean"
- name: "CreateDeliveryChannel"
  action: "aws:executeScript"
  nextStep: "StartRecorder"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    InputPayload:
      AccountId: "{{global:ACCOUNT_ID}}"
      S3BucketName: "{{S3BucketName}}"
      flagcreate: "{{CreateBucket.flagcreate}}"
    Script: "import json
import boto3
from botocore.exceptions import ClientError

      
def script_handler(event, context):
    # get input parameters
    account_id
       = event["AccountId"]
    Flag = event["flagcreate"]
    s3_bucket_name
       = event["S3BucketName"] + "-" + account_id
    config_client = boto3.client("
      config")

    # if it does not already exist, create the delivery channel

          try:
        delivery_channel = config_client.describe_delivery_channels()['DeliveryChannels']

              if not delivery_channel:
            config_client.put_delivery_channel(

                      DeliveryChannel={
                    "name": "default"
      ,
                    "s3BucketName": s3_bucket_name,
                 
         "configSnapshotDeliveryProperties": {
                        "deliveryFrequency"
      : "One_Hour"
                    }
                }
            )
  
                print ("Delivery Channel created with name 'default'")
      
        else:
            print("Delivery Channel already exists. Will be using
       the existing setup.")
    except ClientError as ex:
        if Flag:

                  s3_client = boto3.client("s3")
            s3_client.delete_bucket(Bucket=s3_bucket_name)

              # Currently, you can specify only one delivery channel per region in
       your account.
        if ex.response["Error"]["Code"] == "InsufficientDeliveryPolicyException"
      :
            raise Exception (ex.response["Error"]['Message'])
       
       if ex.response["Error"]["Code"] == "MaxNumberOfDeliveryChannelsExceededException"
      :
            print ("Delivery Channel already exists. Will be using the existing
       setup.")
        if ex.response["Error"]["Code"] == "AccessDeniedException"
      :
            raise Exception ("(Access Denied) The SSM Role does not have
       enough permission. Please check the role permission policy for PutDeliveryChannel
       API and DescribeDeliveryChannel API. Also check for any permission boundary
       or SCPs attached to the account")
    delivery_channel = config_client.describe_delivery_channels()

          return {"DeliveryChannel_S3Bucket":delivery_channel['DeliveryChannels'][0]['s3BucketName']}
"
- name: "StartRecorder"
  action: "aws:executeAwsApi"
  onFailure: "Abort"
  nextStep: "PutAggregationAuthorization"
  inputs:
    Service: "config"
    Api: "StartConfigurationRecorder"
    ConfigurationRecorderName: "{{CreateRecorder.recordername}}"
- name: "PutAggregationAuthorization"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    InputPayload:
      AggregatorAccountId: "{{AggregatorAccountId}}"
      AggregatorAccountRegion: "{{AggregatorAccountRegion}}"
    Script: "import json
import boto3
from botocore.exceptions import ClientError

      
def script_handler(event, context):
    # get input parameters
    aggregator_account_id
       = event["AggregatorAccountId"]
    aggregator_account_region = event["
      AggregatorAccountRegion"]
    config_client = boto3.client("config")


          # allow master account to aggregate config data
    if aggregator_account_id
       and aggregator_account_region:
        try:
            config_client.put_aggregation_authorization(

                      AuthorizedAccountId=aggregator_account_id,
              
        AuthorizedAwsRegion=aggregator_account_region
            )
        except
       ClientError as ex:
            if ex.response["Error"]["Code"] == "
      AccessDeniedException":
                raise Exception ("(Access Denied)
       The SSM Role does not have enough permission. Please check the role permission
       policy for PutAggregationAuthorization API. Also check for any permission
       boundary or SCPs attached to the account" )
        return {'aggregatorauthorization':
       'Authorization creation is successful'}
    return {'aggregatorauthorization':
       'You did not opt in for creation of authorization'}
"
  outputs:
  - Selector: "$.Payload.aggregatorauthorization"
    Name: "AggregatorAuthorization"
    Type: "String"
