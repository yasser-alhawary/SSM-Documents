  ### Document name - AWSConfigRemediation-DeleteUnusedSecurityGroup

  ## What does this document do?
  This document deletes a non-default security group that is not utilized by an elastic network interface. A non-default security group is defined as any security group whose name is not `default`. If the security group ID passed to this automation document belongs to a default security group, this document does not perform any changes to the AWS account.

  ## Input Parameters
  * GroupId: (Required) The unique ID of the security group to be deleted.
  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

  ## Output Parameters
  * DeleteSecurityGroup.SecurityGroupApiResponse - The standard HTTP response from the DeleteSecurityGroup API.

schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  GroupId:
    type: String
    description: (Required) The unique ID of the security group to be deleted.
    allowedPattern: "sg-[a-z0-9]+$"
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::d{12}:role/[w+=,.@-]+$
outputs:
  - DeleteSecurityGroup.SecurityGroupApiResponse
mainSteps:
  - name: DescribeSecurityGroups
    action: aws:executeAwsApi
    description: |
      ## DescribeSecurityGroups
      Describes Security Groups using security group ID.
      ## Outputs
      * GroupName: The name of the security group.
    inputs:
      Service: ec2
      Api: DescribeSecurityGroups
      Filters:
        - Name: "group-id"
          Values:
            - "{{ GroupId }}"
    outputs:
      - Name: GroupName
        Selector: $.SecurityGroups[0].GroupName
        Type: String

  - name: CheckNonDefaultSecurityGroup
    action: aws:branch
    description: |
      ## CheckNonDefaultSecurityGroup
      Verifies that the security group name does not match `default`. If the group name does not match `default`, go to the next step: DeleteSecurityGroup.
    inputs:
      Choices:
      - NextStep: DeleteSecurityGroup
        Not:
          Variable: "{{ DescribeSecurityGroups.GroupName }}"
          StringEquals: "default"
    isEnd: true

  - name: DeleteSecurityGroup
    action: "aws:executeAwsApi"
    description: |
      ## DeleteSecurityGroup
      Deletes the security group based on the input security group ID.
      ## Outputs
      * SecurityGroupApiResponse: The standard HTTP response from the DeleteSecurityGroup API.
    outputs:
      - Name: SecurityGroupApiResponse
        Selector: $
        Type: StringMap
    inputs:
      Service: ec2
      Api: DeleteSecurityGroup
      GroupId: "{{ GroupId }}"

  - name: VerifySecurityGroupDeleted
    action: "aws:executeScript"
    description: |
      ## VerifySecurityGroupDeleted
      Verifies that the security group has been deleted.
      ## Outputs
      * Output: Success message or failure exception.
    isEnd: true
    timeoutSeconds: 600
    inputs:
       Runtime: python3.6
       Handler: handler
       InputPayload:
         GroupId: "{{GroupId}}"
       Script: |-
         import boto3
         from botocore.exceptions import ClientError

         def handler(event, context):
             ec2_client = boto3.client("ec2")
             group_id = event["GroupId"]

             try:
               desc_group = ec2_client.describe_security_groups(GroupIds=[group_id])
               info = "ERROR IN VERIFICATION, SECURITY GROUP {} NOT DELETED ".format(group_id)
               raise Exception(info)
             except ClientError as ex:
               if ex.response['Error']['Code'] == 'InvalidGroup.NotFound':
                  return {
                    "output": "Security group deleted successfully."
                  }
               raise Exception(ex)
    outputs:
       - Name: Output
         Selector: $.Payload.output
         Type: String
