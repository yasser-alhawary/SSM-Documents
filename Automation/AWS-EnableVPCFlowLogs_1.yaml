# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |
  ### Document Name - AWS-EnableVPCFlowLogs

  ## What does this document do?
  This document creates a flow log for a VPC to capture information about its IP traffic. The logs can be published to CloudWatch or S3.
  When publishing to CloudWatch logs, the flow log records are published to a log group and each network interface has a unique log stream in the log group.
  When publishing to Amazon S3, the flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.

  ## Notes
  This document will execute successfully even if enabling flow logs fails for one or more VPCs. Please check the execution output for complete information on successes and failures.

  ## Input Parameters
  * VPCIds: (Required) A comma separated list of the VPC IDs.
  * LogDestinationType: (Optional) The destination type to which the flow log data should be published.
    * Allowed Values: cloud-watch-logs | s3
    * Default: cloud-watch-logs
  * LogDestinationArn: (Required) The destination to which the flow log data should be published. Flow log data
    can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for LogDestinationType.
  * DeliverLogsPermissionArn: (Optional) The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.
    If you specified LogDestinationType as `s3`, do not specify DeliverLogsPermissionArn.
  * TrafficType: (Optional) The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
    * Allowed Values: ALL | ACCEPT | REJECT
    * Default: ALL
  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.

  ## Output Parameters
  * EnableVPCFlowLogs.SuccessfulVPCs: A list of VPC IDs for which flow logs were successfully enabled.
  * EnableVPCFlowLogs.FailedVPCs: A mapList of VPC IDs for which flow logs could not be enabled and the reason for the failure.

schemaVersion: '0.3'
assumeRole: '{{AutomationAssumeRole}}'
outputs:
  - EnableVPCFlowLogs.SuccessfulVPCs
  - EnableVPCFlowLogs.FailedVPCs
parameters:
  VPCIds:
    type: StringList
    description: (Required) A comma separated list of the VPC IDs.
    allowedPattern: '^(vpc-.*S.*)'
  LogDestinationType:
    type: String
    allowedValues:
      - cloud-watch-logs
      - s3
    description: (Optional) The destination type to which the flow log data should be published.
    default: cloud-watch-logs
  LogDestinationArn:
    type: String
    description: (Required) The destination to which the flow log data should be published.
    allowedPattern: '^(arn:aws(-cn|-us-gov)?:.*S.*)'
  DeliverLogsPermissionArn:
    type: String
    description: (Optional) The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.
    default: ''
    allowedPattern: '^(arn:aws(-cn|-us-gov)?:.*S.*)|^$'
  TrafficType:
    type: String
    description: (Optional) The type of traffic to log.
    allowedValues:
      - ACCEPT
      - REJECT
      - ALL
    default: ALL
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
    allowedPattern: '^arn:aws(-cn|-us-gov)?:iam::d{12}:role/[w+=,.@_/-]+|^$'
mainSteps:
  - name: EnableVPCFlowLogs
    action: 'aws:executeScript'
    onFailure: Abort
    isCritical: true
    isEnd: true
    timeoutSeconds: 600
    description: |
      ## EnableVPCFlowLogs
      Enables flow logs for the target VPCs.
      ## Inputs
      * VPCIds: A comma separated list of the VPC IDs.
      * LogDestinationType: The destination type to which the flow log data should be published.
      * LogDestinationArn: The destination to which the flow log data should be published.
      * DeliverLogsPermissionArn: The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.
      * TrafficType: The type of traffic to log.
      ## Output parameters
      * SuccessfulVPCs: A list of VPC IDs for which flow logs were successfully enabled.
      * FailedVPCs: A mapList of VPC IDs for which flow logs could not be enabled and the reason for the failure.
    inputs:
      Runtime: python3.7
      Handler: enable_VPC_FlowLogs
      InputPayload:
        VPCIds: '{{VPCIds}}'
        LogDestinationType: '{{LogDestinationType}}'
        LogDestinationArn: '{{LogDestinationArn}}'
        DeliverLogsPermissionArn: '{{DeliverLogsPermissionArn}}'
        TrafficType: '{{TrafficType}}'
      Script: |
        import json
        import boto3

        def enable_VPC_FlowLogs(event, context):
          client = boto3.client('ec2')

          FailedVPCs = []
          SuccessesVPCs = []

          VPCIds = event['VPCIds']
          LogDestinationType  = event['LogDestinationType']
          LogDestinationArn  = event['LogDestinationArn']
          TrafficType = event['TrafficType']

          if 'DeliverLogsPermissionArn' in event.keys():
              DeliverLogsPermissionArn  = event['DeliverLogsPermissionArn']

          for vpcid in VPCIds:
              try:
                  if LogDestinationType.lower() == "cloud-watch-logs".lower():
                      response = client.create_flow_logs(
                          LogDestinationType = 'cloud-watch-logs',
                          ResourceIds = [vpcid],
                          ResourceType = 'VPC',
                          TrafficType = TrafficType,
                          LogDestination = LogDestinationArn,
                          DeliverLogsPermissionArn = DeliverLogsPermissionArn
                      )

                  elif LogDestinationType.lower() == "s3".lower():
                      response = client.create_flow_logs(
                          LogDestinationType = 's3',
                          ResourceIds = [vpcid],
                          ResourceType = 'VPC',
                          TrafficType = TrafficType,
                          LogDestination = LogDestinationArn,
                      )

                  if not response['FlowLogIds']:
                      errorMsg = response['Unsuccessful'][0]['Error']['Message']
                      FailedVPCs.append({"VPCId": vpcid , "error": errorMsg})
                  else:
                      SuccessesVPCs.append(vpcid)
              except Exception as e :
                  FailedVPCs.append({"VPCId": vpcid , "error":  str(e)})

          return {
              'FailedVPCs': FailedVPCs,
              'SuccessfulVPCs': SuccessesVPCs
          }
    outputs:
      - Name: SuccessfulVPCs
        Selector: $.Payload.SuccessfulVPCs
        Type: StringList
      - Name: FailedVPCs
        Selector: $.Payload.FailedVPCs
        Type: MapList
