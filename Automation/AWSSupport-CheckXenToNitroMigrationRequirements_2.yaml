schemaVersion: "0.3"
description: "# AWSSupport-CheckXenToNitroMigrationRequirements

This automation
   document checks for the pre-requisites to migrate a Xen based EC2 Linux instance
   to [EC2 Nitro platform](https://aws.amazon.com/about-aws/whats-new/2019/12/amazon-ec2-nitro-system-based-instances-now-support-36-faster-amazon-ebs-optimized-instance-performance/)
   by performing the following checks:

- Checks if the root volume is an EBS device

  - Checks if the [Enhanced networking (ENA) attribute](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enable-enhanced-networking-ena-AL)
   is enabled.
- Verifies if the ENA module is installed on your EC2 instance.

  - Verifies if the NVMe module is installed on your EC2 instance. If yes, then the
   script verifies that the module is loaded in the initramfs image.
- Analyzes
   /etc/fstab and looks for block devices being mounted using device names.
- Determines
   if Operating System(OS) uses predictable network interface names by default.

  
This document is supported on the following OS versions:

- Red Hat derivatives:
   Red Hat Linux, Red Hat Enterprise Linux, CentOS
- Amazon Linux, Amazon Linux
   2
- Debian derivatives: Debian, Ubuntu
- SUSE12SP5, SUSE15SP2


### **Parameters**

  1.  **InstanceId**:

Type: String

Description: **(Required)** Xen based EC2
   Instance you want to migrate to Nitro platform. (e.g. i-05fa91429c6cdcb49).


  2. **AutomationAssumeRole**:

Type: String

Description: **(Optional)** The
   ARN of the role that allows Automation to perform the actions on your behalf.
   If no role is specified, this document will use the permissions of the user that
   executes this document.
"
assumeRole: "{{AutomationAssumeRole}}"
parameters:
  AutomationAssumeRole:
    default: ""
    type: "String"
    description: "(Optional)The ARN of the role that allows Automation to perform
       the actions on your behalf. If no role is specified,this document will use
       the permissions of the user that executes this document. For more information,
       visit - https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-setup.html"
    allowedPattern: "^$|^arn:aws:iam::[0-9]*:role/[/w+=,.@-]+$"
  InstanceId:
    type: "String"
    description: "(Required) Provide the Xen based EC2 InstanceId you want to migrate
       to Nitro platform"
    allowedPattern: "^[m]{0,1}i-[a-z0-9]{8,17}$"
mainSteps:
- name: "getInstanceProperties"
  action: "aws:executeAwsApi"
  description: "Fetches the details of the EC2 instance"
  onFailure: "Abort"
  isCritical: "true"
  maxAttempts: 3
  nextStep: "getInstanceHypervisorType"
  inputs:
    Service: "ec2"
    Api: "DescribeInstances"
    InstanceIds:
    - "{{InstanceId}}"
  outputs:
  - Name: "PlatformType"
    Selector: "$.Reservations[0].Instances[0].Platform"
    Type: "String"
  - Name: "RootVolumeType"
    Selector: "$.Reservations[0].Instances[0].RootDeviceType"
    Type: "String"
  - Name: "ENASupport"
    Selector: "$.Reservations[0].Instances[0].EnaSupport"
    Type: "Boolean"
  - Name: "InstanceType"
    Selector: "$.Reservations[0].Instances[0].InstanceType"
    Type: "String"
- name: "getInstanceHypervisorType"
  action: "aws:executeAwsApi"
  description: "Fetches the Hypervisor information for the current EC2 Instance Type"
  onFailure: "Abort"
  isCritical: "true"
  maxAttempts: 3
  nextStep: "checkIfInstanceHypervisorIsNitroAlready"
  inputs:
    Service: "ec2"
    Api: "DescribeInstanceTypes"
    InstanceTypes:
    - "{{getInstanceProperties.InstanceType}}"
  outputs:
  - Name: "Hypervisor"
    Selector: "$.InstanceTypes[0].Hypervisor"
    Type: "String"
- name: "checkIfInstanceHypervisorIsNitroAlready"
  action: "aws:branch"
  description: "Checks if the current EC2 instance is already running on Nitro platform"
  isEnd: true
  onFailure: "Abort"
  isCritical: true
  inputs:
    Choices:
    - NextStep: "checkIfPlatformIsLinux"
      Variable: "{{getInstanceHypervisorType.Hypervisor}}"
      StringEquals: "xen"
- name: "checkIfPlatformIsLinux"
  action: "aws:branch"
  description: "Checks if the current EC2 instance is based on Linux Operating System"
  isEnd: true
  onFailure: "Abort"
  isCritical: true
  inputs:
    Choices:
    - NextStep: "verifySSMConnectivity"
      Not:
        Variable: "{{getInstanceProperties.PlatformType}}"
        StringEquals: "windows"
- name: "verifySSMConnectivity"
  action: "aws:assertAwsResourceProperty"
  description: "Verifies if the EC2 instance is connected & online with AWS Systems
     Manager"
  onFailure: "Abort"
  maxAttempts: 3
  inputs:
    Service: "ssm"
    Api: "DescribeInstanceInformation"
    InstanceInformationFilterList:
    - key: "InstanceIds"
      valueSet:
      - "{{ InstanceId }}"
    PropertySelector: "$.InstanceInformationList[0].PingStatus"
    DesiredValues:
    - "Online"
  isCritical: true
  nextStep: "checkIfRootVolumeIsEBS"
- name: "checkIfRootVolumeIsEBS"
  action: "aws:branch"
  description: "Checks if EC2 instance's root volume type is EBS"
  isCritical: false
  onFailure: "Continue"
  inputs:
    Choices:
    - NextStep: "checkENAAttribute"
      Variable: "{{getInstanceProperties.RootVolumeType}}"
      StringEquals: "ebs"
- name: "checkENAAttribute"
  action: "aws:branch"
  description: "Checks if the Enhanced Networking Adapter(ENA) attribute is enabled
     on the EC2 instance"
  isCritical: false
  onFailure: "Continue"
  inputs:
    Choices:
    - NextStep: "checkENADrivers"
      Variable: "{{getInstanceProperties.ENASupport}}"
      BooleanEquals: true
- name: "checkENADrivers"
  action: "aws:runCommand"
  description: "Validates the availability of Enhanced Networking Adapter(ENA) drivers
     on the Operating System(OS)"
  timeoutSeconds: 600
  maxAttempts: 3
  isCritical: true
  onFailure: "Continue"
  inputs:
    InstanceIds:
    - "{{InstanceId}}"
    DocumentName: "AWS-RunShellScript"
    Parameters:
      commands: "#!/bin/bash

modinfo ena > /dev/null 2>&1
if [ $? -ne 0 ]
  
          then
    # ENA Module is not installed.
    echo -e "[FAILED] ENA Module
         is not available on your EC2 instance. 
t- Please install ENA module
         before changing your EC2 instance type to M5/C5. Look at the following link
         for further guidance:"
    echo -e "t> https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enhanced-networking-ena-linux"
        
elif grep 'Ubuntu' /etc/os-release 1>/dev/null 2>/dev/null; then
    LINUX_DISTRO_VERSION_ID=$(cat
         /etc/os-release | grep VERSION_ID | awk -F'=' '{print $2}' | tr -d '"')

            UBUNTU_MAJOR_VERSION=$(echo $LINUX_DISTRO_VERSION_ID | awk -F'.' '{print
         $1}')
    if  [ $UBUNTU_MAJOR_VERSION -gt 16 ]; then
        ena_version=$(modinfo
         ena|grep -Eo '^vermagic:.*' | awk '{print $2}')
        echo -e "[PASSED]
         ENA Module with version $ena_version is installed and available on your
         EC2 instance"
    else
        ena_version=$(modinfo ena|grep -Eo '^version:.*'
         | awk '{print $2}')
        echo -e "[PASSED] ENA Module with version
         $ena_version is installed and available on your EC2 instance"
    fi

        else
    ena_version=`modinfo ena|grep -Eo '^version:.*' | awk '{print $2}'`

            echo -e "[PASSED] ENA Module with version $ena_version is installed
         and available on your EC2 instance"

fi
"
  nextStep: "checkNVMEDrivers"
- name: "checkNVMEDrivers"
  action: "aws:runCommand"
  description: "Validates the availability of NVMe drivers on the Operating System(OS)"
  isCritical: true
  onFailure: "Continue"
  timeoutSeconds: 600
  maxAttempts: 3
  inputs:
    DocumentName: "AWS-RunShellScript"
    InstanceIds:
    - "{{ InstanceId }}"
    Parameters:
      commands: "#!/bin/bash


check_NVMe_omitted () {
##Checking if module is
         omitted out in initramfs
    if [ -s /tmp/initrd/initrd.img ]; then
 
               lsinitrd /tmp/initrd/initrd.img | grep -e "--omit-drivers" -e "
        -o" | grep nvme > /dev/null 2>&1
   else
        lsinitrd /boot/initramfs-$(uname
         -r).img| grep -e "--omit-drivers" -e "-o" | grep nvme > /dev/null 2>&1

            fi
    if [ $? -eq 0 ]; then 
        echo -e "[ERROR] NVME module
         is ommited in initramfs image using parameter --omit-drivers or -o"
 
           else
        echo -e "[INFO] NVME module is not ommited in initramfs
         image using parameter --omit-drivers or -o"
    fi
}

check_NVMe_in_initrd
         () {
    
    if [ -f /etc/redhat-release ] ; then
        # Distribution
         is Red hat
        if ! rpm -ql dracut | grep skipcpio  > /dev/null 2>&1
         ; then
            mkdir /tmp/initrd/
            cd /tmp/initrd

 
                   if file /boot/initramfs-$(uname -r).img | grep -i xz > /dev/null
         2>&1; then
                xz -dc < /boot/initramfs-$(uname -r).img | cpio
         -icdt > out 2>error
            elif file /boot/initramfs-$(uname -r).img|
         grep gzip > /dev/null 2>&1 ; then
                zcat < /boot/initramfs-$(uname
         -r).img | cpio -icdt > out 2>error
            else
                cpio
          -icd < /boot/initramfs-$(uname -r).img > out 2>error
            fi

                    
            if grep blocks out; then
                skip=`cat
         out | grep blocks | awk '{print $1}'`
            else 
             
           skip=`cat error | grep blocks | awk '{print $1}'`
            fi


                    dd if=/boot/initramfs-$(uname -r).img of=initrd.img bs=512 skip=${skip}
         > /dev/null 2>&1
        fi

        #Checking if NVME module is ommited
         in initramfs file        
        check_NVMe_omitted

        if [ -s
         /tmp/initrd/initrd.img ]; then
            lsinitrd /tmp/initrd/initrd.img
         | grep -i nvme| grep nvmem > /dev/null 2>&1
        else
            lsinitrd
         /boot/initramfs-$(uname -r).img|grep nvme| grep -v nvmem > /dev/null 2>&1

                fi


        if [ $? -ne 0 ]; then
        # NVMe module is not
         loaded in initrd/initramfs
            echo -e "[FAILED] NVMe Module is
         not loaded in the initramfs image"
        else
            Kernel_version=`uname
         -r`
            echo -e "[PASSED] NVME Module is loaded in initramfs/initrd
         for Kernel version $Kernel_version"
        fi
        rm -rf /tmp/initrd

        
    elif grep 'Amazon Linux' /etc/os-release 1>/dev/null 2>/dev/null; then

                # Distribution is Amazon Linux
        if ! rpm -ql dracut | grep
         skipcpio  > /dev/null 2>&1; then
            mkdir /tmp/initrd/
     
               cd /tmp/initrd
            cpio  -icd < /boot/initramfs-$(uname -r).img
         > out 2>error
            if grep blocks out; then
                skip=`cat
         out | grep blocks | awk '{print $1}'`
            else 
             
           skip=`cat error | grep blocks | awk '{print $1}'`
            fi
  
                  dd if=/boot/initramfs-$(uname -r).img of=initrd.img bs=512 skip=${skip}
         > /dev/null 2>&1
        fi

            #Checking if NVME module is
         ommited in initramfs file        
            check_NVMe_omitted

  
              if [ -f /tmp/initrd/initrd.img ]; then
            lsinitrd /tmp/initrd/initrd.img
         | grep -i nvme| grep -v nvmem > /dev/null 2>&1
        else
         
           lsinitrd /boot/initramfs-$(uname -r).img|grep nvme| grep -v nvmem > /dev/null
         2>&1
        fi        

        if [ $? -ne 0 ]; then
        echo
         -e "[FAILED] NVMe Module is not loaded in the initramfs image"
     
           else
            Kernel_version=`uname -r`
            echo -e "[PASSED]
         NVME Module is loaded in initramfs/initrd for Kernel version $Kernel_version"
                 
        fi
        rm -rf /tmp/initrd

    elif grep 'SUSE
         Linux' /etc/os-release 1>/dev/null 2>/dev/null; then
        # Distribution
         is SuSe Linux
        if ! rpm -ql dracut | grep skipcpio  > /dev/null
         2>&1; then
            mkdir /tmp/initrd/
            cd /tmp/initrd

        
            if file /boot/initrd-$(uname -r) | grep -i xz; then
      
                  xz -dc < /boot/initrd | cpio -icdt > out 2>error
            else

                        cpio  -icd < /boot/initrd > out 2>error
            fi

        
            if grep blocks out; then
                skip=`cat out | grep
         blocks | awk '{print $1}'`
            else 
                skip=`cat
         error | grep blocks | awk '{print $1}'`
            fi
            dd
         if=/boot/initrd of=initrd.img bs=512 skip=${skip} > /dev/null 2>&1
   
             fi

            #Checking if NVME module is ommited in initramfs file
                
            check_NVMe_omitted

        if [ -s /tmp/initrd/initrd.img
         ]; then
            lsinitrd /tmp/initrd/initrd.img | grep -i nvme| grep
         -v nvmem > /dev/null 2>&1
        else
            lsinitrd /boot/initrd|grep
         nvme| grep -v nvmem > /dev/null 2>&1
        fi        
        if [ $?
         -ne 0 ]; then
        echo -e "[FAILED] NVMe Module is not loaded in the
         initramfs image"
        else
            Kernel_version=`uname -r`

                    echo -e "[PASSED] NVME Module is loaded in initramfs/initrd
         for Kernel version $Kernel_version"     
        fi
        rm -rf /tmp/initrd

        
    elif [ -f /etc/debian_version ] ; then
        # Distribution is debian
         based(Debian/Ubuntu)
        ( lsinitramfs /boot/initrd.img-$(uname -r)|grep
         nvme| grep -v nvmem > /dev/null 2>&1 ) || (cat /lib/modules/`(uname -r)`/modules.builtin
         | grep nvme | grep -v nvmem > /dev/null 2>&1)
        if [ $? -ne 0 ];
         then
        # NVMe module is not loaded in initrd/initramfs
        
            echo -e "[FAILED] NVMe Module is not loaded in the initramfs image"
        
        else
            Kernel_version=`uname -r`
            echo -e
         "[PASSED] NVME Module is loaded in initramfs/initrd for Kernel version
         $Kernel_version"       
        fi

    else
        echo -e "[ERROR]
         Unsupported OS for this document."
        exit 1
    fi
}


(grep
         'nvme' /boot/System.map-$(uname -r) | grep -v nvmem) > /dev/null 2>&1

        if [ $? -ne 0 ]
    then
    # NVMe modules is not built into the kernel

            (modinfo nvme) > /dev/null 2>&1
    if [ $? -ne 0 ]
        then

                # NVMe Module is not installed.
        echo -e "[FAILED] NVMe
         Module is not available on your EC2 instance. 
t- Please install NVMe
         module before changing your EC2 instance type to Nitro. Follow the instructions
         in the documentation to install NVME module:"
        echo -e "t> https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html"
        
    else
        Kernel_version=`uname -r`
        echo -e "[PASSED]
         NVMe module is installed on your EC2 instance for Kernel version $Kernel_version"
        
        echo -e "[INFO] Checking if NVME module is loaded in initramfs/initrd"
        
        check_NVMe_in_initrd                # Calling function to check
         if NVMe module is loaded in initramfs.
    fi
else
    # NVMe modules
         is built into the kernel
    echo -e "[PASSED] NVMe Module is installed
         and loaded in kernel on your EC2 instance"
fi
"
  nextStep: "checkFSTABEntries"
- name: "checkFSTABEntries"
  action: "aws:runCommand"
  description: "Checks if the /etc/fstab contains entries with device names"
  timeoutSeconds: 600
  maxAttempts: 3
  onFailure: "Continue"
  isCritical: true
  nextStep: "checkPredictableNames"
  inputs:
    InstanceIds:
    - "{{InstanceId}}"
    DocumentName: "AWS-RunShellScript"
    Parameters:
      commands: "#!/bin/bash
time_stamp=$(date +%F-%H:%M:%S)
cp -p /etc/fstab /etc/fstab.backup.$time_stamp

        cp -p /etc/fstab /etc/fstab.modified.$time_stamp

cat /etc/fstab | grep
         '^/dev' | grep -E 'sd[a-z]|xvd[a-z]|nvme([0-9]|1[0-9]|2[0-7])n1p?' | awk
         -F '/' '{print $3}'>/tmp/device_names

while read LINE; do 
    UUID=`ls
         -l /dev/disk/by-uuid | grep "$LINE" | sed -n "s/^.* ([^ ]*) -> .*$/
        1/p"`;
    if [ ! -z "$UUID" ]
    then 
        sed -i "s|^/dev/${LINE}|UUID=${UUID}|"
         /etc/fstab.modified.$time_stamp
    fi
done </tmp/device_names

if [
         -s /tmp/device_names ]; then
    echo -e "[FAILED] Your FSTAB file contains
         device names. Mount the partitions using UUIDs before changing the EC2 instance
         type to Nitro instances.
"
    echo -e "[INFO] Printing correct FSTAB
         file below:"
    cat /etc/fstab.modified.$time_stamp
    rm -rf /etc/fstab.modified.$time_stamp

            rm -rf /etc/fstab.backup.$time_stamp
    rm -rf /tmp/device_names

        else 
    rm -rf /etc/fstab.backup.$time_stamp
    rm -rf /etc/fstab.modified.$time_stamp
         
    echo -e "[PASSED] FSTAB file looks fine and does not contain any
         entry with device names and are with UUID"
fi

"
- name: "checkPredictableNames"
  action: "aws:runCommand"
  description: "Determines if Operating System(OS) uses predictable network interface
     names by default"
  timeoutSeconds: 600
  maxAttempts: 3
  isCritical: true
  onFailure: "Continue"
  nextStep: "generateReport"
  inputs:
    InstanceIds:
    - "{{InstanceId}}"
    DocumentName: "AWS-RunShellScript"
    Parameters:
      commands: "#!/bin/bash

check_predictable_interface_name() {
    if [ -f
         /etc/default/grub ]; then
t   grep -i -q "net.ifnames=0" /etc/default/grub

        t    if [ $? -eq 0 ]; then
t       echo -e "[PASSED] The option net.ifnames=0
         is present in /etc/default/grub file. No changes needed. 
"
t    else

        t       techo -e "[FAILED] The option net.ifnames=0 is not present on the
         /etc/default/grub file. It is recommended to add this kernel parameter to
         disable predictable interface naming. 
"

t    fi
    fi
}



            if [ -f /etc/os-release ]; then
        find_distro=$( < /etc/os-release
         sed -n 's|^ID="([a-z]{4}).*|1|p')
        version_id=$( < /etc/os-release
         sed -n 's|^VERSION_ID="([0-99]{2}).*|1|p')
        sp=$( < /etc/os-release
         grep VERSION= | tr -d '"'| tail -c 4)     # Check if instance is using
         amazon AMI.
    fi

    if [ -f /etc/redhat-release ] ; then
      
          # Distribution is Red hat
        version=$(rpm -qa | grep -i '^systemd-[0-9]
        +|^udev-[0-9]+' | cut -d- -f2)
        if [[ "${version}" -gt "197"
         ]]; then
        tcheck_predictable_interface_name
        else
   
             techo "[PASSED] Predictable interface naming isn't supported."

                fi

    elif [[ "${find_distro}" == "amzn" ]]; then
     
           # Distribution is Amazon Linux
        version=$(rpm -qa | grep -i '^systemd-[0-9]
        +|^udev-[0-9]+' | cut -d- -f2)
        if [[ "${version}" -gt "197"
         ]]; then
        tcheck_predictable_interface_name
        else
   
             techo "[PASSED] Predictable interface naming isn't supported."  
              t
        fi

    elif [[ "${find_distro}" == "sles" ]] ; then

                # Distribution is SuSe Linux
        version=$(rpm -qa | grep -i
         '^systemd-[0-9]+|^udev-[0-9]+' | cut -d- -f2 | head -1)
        if
         [[ "${version}" -gt "197" ]]; then
        tcheck_predictable_interface_name

                else
        techo "[PASSED] Predictable interface naming isn't
         supported."        t
        fi       

    elif [ -f /etc/debian_version
         ] ; then
        # Distribution is debian based(Debian/Ubuntu)
 ttversion=$(apt
         list --installed 2> /dev/null | grep '^systemd|^udev' | cut -d, -f2 |
         cut -d ' ' -f2 | cut -d- -f1 | head -1)
 ttif [[ "${version}" -gt "
        197" ]]; then
        tcheck_predictable_interface_name
        else

                techo "[PASSED] Predictable interface naming isn't supported."
                t
        fi

    else
        echo -e "[ERROR] Unsupported
         OS for this document."
        exit 1
    fi
    
    if [ -f /etc/udev/rules.d/70-persistent-net.rules
         ]; then
        echo "[WARNING] EC2 instance contains /etc/udev/rules.d/70-persistent-net.rules
         file, which must be deleted before creating the AMI. The file contains the
         MAC address for the Ethernet adapter of the original EC2 instance. If another
         EC2 instance boots with this file, the operating system will be unable to
         find the device and eth0 might fail, causing boot issues."
    fi


"
- name: "generateReport"
  action: "aws:executeScript"
  description: "Consolidates the results of all steps and generates a report on the
     passed and failed checks."
  maxAttempts: 3
  onFailure: "Abort"
  isEnd: "true"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    InputPayload:
      rootVolumeCheck: "{{getInstanceProperties.RootVolumeType}}"
      checkENAattribute: "{{getInstanceProperties.ENASupport}}"
      checkENADriversOutput: "{{checkENADrivers.Output}}"
      checkNVMEDriversOutput: "{{checkNVMEDrivers.Output}}"
      checkFSTABEntriesOutput: "{{checkFSTABEntries.Output}}"
      checkFSTABEntriesStatus: "{{checkFSTABEntries.Status}}"
      checkPredictableNamesOutput: "{{checkPredictableNames.Output}}"
    Script: "def script_handler(events, context):
   import json

   #Capturing
       other steps output.

   Heading = "Total Number of Tests: 6

"
 
        rootVolumeCheckOutput = events['rootVolumeCheck']
   checkENAattributeOutput
       = events['checkENAattribute']
   checkENADriversOutput = events['checkENADriversOutput']

         checkNVMEDriversOutput = events['checkNVMEDriversOutput']
   checkFSTABEntriesOutput
       = events['checkFSTABEntriesOutput']
   checkFSTABEntriesStatus = events['checkFSTABEntriesStatus']

         checkPredictableNamesOutput = events['checkPredictableNamesOutput']
  
       Footer = ("

 For more information about these checks, refer to AWS Premium
       Support Knowledge Center Article
"
   "https://aws.amazon.com/premiumsupport/knowledge-center/boot-error-linux-nitro-instance/"
      )

   stepsHeaders = ["
 1. Checking if the root volume is EBS: 
",

                    "
 
 2. Determining if ENA Attribute is enabled:
",

                    "
 
 3. Checking ENA drivers status on the instance:
"
      ,
              "
 
 4. Checking NVME drivers status on the instance:
      n",
              "
 
 5. Checking FSTAB for entries with devices names:
      n",
              "
 
 6. Determine if OS uses predictable network interface
       names by default:
"
   ]
   # Checking Root Volume results
   if rootVolumeCheckOutput
       == "ebs":
          checkrootvolume_result= "[PASSED] Root Volume attached
       with the instance is an EBS device."
   else:
          checkrootvolume_result=
       "[FAILED] Root Volume attached with the instance is not an EBS device."

      
   # Checking FSTAB results
   if checkFSTABEntriesStatus == "Failed":

                fstab_warning = "

 Step checkFSTABEntries failed during execution.
       Make sure to delete the /etc/fstab backup files created by script. To list
       all the FSTAB files, run the command 'ls -lhtr /etc/fstab.*' manually on the
       EC2 instance. 
"
   else:
          fstab_warning= ""
   # Checking
       Root Volume results
   if checkENAattributeOutput == "true":
        
        checkENA_output= "[PASSED] Enhanced networking (ENA) attribute  is ENABLED
       on the EC2 Instance"
          Result = Heading + stepsHeaders[0] + checkrootvolume_result
       + stepsHeaders[1] + checkENA_output + stepsHeaders[2] + checkENADriversOutput
       + stepsHeaders[3] + checkNVMEDriversOutput + stepsHeaders[4] + checkFSTABEntriesOutput
       + fstab_warning + stepsHeaders[5] + checkPredictableNamesOutput + Footer

      
   else:
          checkENA_output= ("[FAILED] Enhanced networking (ENA)
       attribute is NOT ENABLED on the EC2 Instance. Use the ModifyInstanceAttribute[1]
       API call or modify-instance-attribute[2] AWS CLI command to enable the enhanced
       networking enaSupport attribute.
 For more details, refer to the Enhanced
       networking (ENA) documentation[3].
"
          "
       [1] https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-attribute.html"
      
          "
       [2] https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-attribute.html|"
      
          "
       [3] https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena.html#enable-enhanced-networking-ena-AL"
      )

          Result = Heading + stepsHeaders[0] + checkrootvolume_result +
       stepsHeaders[1] + checkENA_output + stepsHeaders[2] + checkENADriversOutput
       + stepsHeaders[3] + checkNVMEDriversOutput + stepsHeaders[4] + checkFSTABEntriesOutput
       + fstab_warning + stepsHeaders[5] + checkPredictableNamesOutput + Footer

      
   return {'output': Result}








"
  outputs:
  - Name: "output"
    Selector: "$.Payload.output"
    Type: "String"
outputs:
- "generateReport.output"
