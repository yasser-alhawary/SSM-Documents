schemaVersion: "0.3"
assumeRole: "{{AutomationAssumeRole}}"
description: "Creates an association for specified instances"
parameters:
  InstanceIds:
    type: "String"
    description: "(Required) EC2 Instance(s) to associate"
    default: "*"
  AssociationName:
    default: ""
    type: "String"
    description: "(Optional) The string applied to the emergent Association value's
       AssociationName property."
  AssociatedDocName:
    default: "AWS-GatherSoftwareInventory"
    type: "String"
    description: "(Optional) The name of the Document with which the process associates
       the EC-2 instances"
  Schedule:
    default: "cron(0 */30 * * * ? *)"
    type: "String"
    description: "(Optional) serialized cron expression applied to resultant Association"
  AssocWaitTime:
    default: "PT5M"
    type: "String"
    description: "(Optional) 8601 Duration of the pause following the beginning of
       the association process."
  AutomationAssumeRole:
    default: ""
    type: "String"
    description: "(Optional) The ARN of the role that allows Automation to perform
       the actions on your behalf."
  LambdaAssumeRole:
    default: ""
    type: "String"
    description: "(Optional) The ARN of the role that allows Lambda created by Automation
       to perform the actions on your behalf. If not specified a transient role will
       be created to execute the Lambda function."
  Applications:
    type: "String"
    description: "(Optional) Collect data for installed applications."
    default: "Enabled"
  AwsComponents:
    type: "String"
    description: "(Optional) Collect data for AWS Components like amazon-ssm-agent."
    default: "Enabled"
  Files:
    type: "String"
    description: "(Optional) (Requires SSMAgent version 2.2.64.0 and above) Linux
       example: [{"Path":"/usr/bin", "Pattern":["aws*", "*ssm*"],"Recursive"
      :false},{"Path":"/var/log", "Pattern":["amazon*.*"], "Recursive":true,
       "DirScanLimit":1000}] Windows example: [{"Path":"%PROGRAMFILES%", "
      Pattern":["*.exe"],"Recursive":true}]"
    default: ""
  NetworkConfig:
    type: "String"
    description: "(Optional) Collect data for Network configurations."
    default: "Enabled"
  WindowsUpdates:
    type: "String"
    description: "(Optional, Windows OS only) Collect data for all Windows Updates."
    default: "Enabled"
  InstanceDetailedInformation:
    type: "String"
    description: "(Optional) Collect additional information about the instance, including
       the CPU model, speed, and the number of cores, to name a few."
    default: "Enabled"
  Services:
    type: "String"
    description: "(Optional, Windows OS only, requires SSMAgent version 2.2.64.0 and
       above) Collect data for service configurations."
    default: "Enabled"
  WindowsRegistry:
    type: "String"
    description: "(Optional) (Windows OS only, requires SSMAgent version 2.2.64.0
       and above) Example: [ {"Path":"HKEY_CURRENT_CONFIGSystem","Recursive"
      :true},{"Path":"HKEY_LOCAL_MACHINESOFTWAREAmazonMachineImage", "
      ValueNames":["AMIName"]}]"
    default: ""
  WindowsRoles:
    type: "String"
    description: "(Optional, Windows OS only, requires SSMAgent version 2.2.64.0 and
       above) Collect data for Microsoft Windows role configurations."
    default: "Enabled"
  CustomInventory:
    type: "String"
    description: "(Optional) Collect data for custom inventory."
    default: "Enabled"
  OutputS3BucketName:
    type: "String"
    description: "(Optional) Destination BucketName of the S3Location into which logs
       will be written"
    default: ""
  OutputS3KeyPrefix:
    type: "String"
    description: "(Optional) Destination KeyPrefix of the S3 Location into which logs
       will be written"
    default: ""
  OutputS3Region:
    type: "String"
    description: "(Optional) Destination Region of the S3 Location into which logs
       will be written"
    default: ""
mainSteps:
- name: "createDocumentStack"
  action: "aws:createStack"
  inputs:
    Capabilities:
    - "CAPABILITY_IAM"
    StackName: "SetupInventoryStack{{automation:EXECUTION_ID}}"
    Parameters:
    - ParameterKey: "LambdaRoleArn"
      ParameterValue: "{{LambdaAssumeRole}}"
    - ParameterKey: "SetupLambdaName"
      ParameterValue: "SetupInventoryLambda-{{automation:EXECUTION_ID}}"
    - ParameterKey: "VerifyLambdaName"
      ParameterValue: "VerifyInventoryLambda-{{automation:EXECUTION_ID}}"
    TemplateBody: "AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  LambdaAssumeRoleNotSpecified:

          Fn::Or:
    - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - ''

          - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - undefined
Description:
       Automation Stack for SetupInventory
Parameters:
  LambdaRoleArn: {Default:
       '', Description: 'The ARN of the role that allows Lambda
      created by
       Automation to perform the action on your behalf

      ', Type: String}

        SetupLambdaName: {Description: 'The primary setup Lambda function name


            ', Type: String}
  VerifyLambdaName: {Description: 'The end-state verification
       Lambda function name

      ', Type: String}
Resources:
  LambdaRole:

          Condition: LambdaAssumeRoleNotSpecified
    Properties:
      AssumeRolePolicyDocument:

              Statement:
        - Action: ['sts:AssumeRole']
          Effect:
       Allow
          Principal:
            Service: [lambda.amazonaws.com]

              Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:

                Statement:
            Action: ['ssm:CreateAssociation', 'ssm:DescribeAssociation',
       'iam:GetRole']
            Effect: Allow
            Resource: '*'
   
             Version: '2012-10-17'
        PolicyName: SetupInventoryLambdaPolicy

          Type: AWS::IAM::Role
  SetupInventoryLambda:
    Properties:
      Code:
       {ZipFile: "#
# Copyright 2018 Amazon.com, Inc. or its affiliates. All
      
           Rights Reserved.
#
# Permission is hereby granted, free of
       charge, to
           any person obtaining a copy of this
# software
       and associated documentation
           files (the "Software"),
       to deal in the Software
# without restriction,
           including
       without limitation the rights to use, copy, modify,
# merge,
       
          publish, distribute, sublicense, and/or sell copies of the Software,
       and
           to
# permit persons to whom the Software is furnished
       to do so.
#

          # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
       WARRANTY OF ANY KIND, EXPRESS
           OR IMPLIED,
# INCLUDING BUT
       NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           FITNESS
       FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  
               THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
       OR
           OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT,
       TORT OR OTHERWISE,
           ARISING FROM, OUT OF OR IN CONNECTION WITH
       THE
# SOFTWARE OR THE USE
           OR OTHER DEALINGS IN THE SOFTWARE.
      n#
import boto3


def handler(event,
           context):

      tssm_client = boto3.client('ssm')
tinstance_ids = event["
       
         InstanceIds"].strip().split(',')

ttargets_cfg = [{'Key': 'InstanceIds',
      
           'Values': instance_ids}]

tis_association_named = False
      ntis_destination_specified
           = False

tif "AssociationName
      " in event:
ttif len(event["AssociationName"
          ]) >
       0:
tttis_association_named = True

tif len(event["OutputS3BucketName
      "
          ]) > 0 and len(event["OutputS3Region"]) > 0:
tts3_location
       = {
tt
          t'OutputS3Region': event['OutputS3Region'],
      nttt'OutputS3BucketName':
           event['OutputS3BucketName'],
      nttt'OutputS3KeyPrefix': event['OutputS3KeyPrefix']

          
      tt}
ttis_destination_specified = True

tgather_inventory_params
      
           = {
tt"applications": [event["Applications"
      ]],
tt"awsComponents"
          : [event["AwsComponents"
      ]],
tt"files": [event["Files"]],
tt"
        
        networkConfig": [event["NetworkConfig"]],
tt"windowsUpdates
      ": [event["
          WindowsUpdates"]],
tt"instanceDetailedInformation
      ": [event["InstanceDetailedInformation"
          ]],
tt"
      services": [event["Services"]],
tt"windowsRegistry":

                 [event["WindowsRegistry"]],
tt"windowsRoles"
      : [event["WindowsRoles"
          ]],
tt"customInventory
      ": [event["CustomInventory"]]
t}

tassociation_config
 
                = {
tt"Name": event["AssociatedDocName"],

      tt"Targets": targets_cfg,

          tt"ScheduleExpression
      ": event["Schedule"],
tt"Parameters": gather_inventory_params
      n
          t}

tif is_destination_specified:
ttassociation_config[
      "OutputLocation"
          ] = { "S3Location": s3_location }
      n
tif is_association_named:
tt
          association_config["
      AssociationName"] = event["AssociationName"]


          
      tcreation_response = ssm_client.create_association(**association_config)

      
          
treturn {
tt"AssociationId": creation_response[
      "AssociationDescription"
          ]["AssociationId"]
t}
      n"}
      FunctionName: {Ref: SetupLambdaName}
      Handler: index.handler

            MemorySize: 128
      Role:
        Fn::If:
        - LambdaAssumeRoleNotSpecified

              - Fn::GetAtt: [LambdaRole, Arn]
        - {Ref: LambdaRoleArn}
 
           Runtime: python3.7
      Timeout: 60
    Type: AWS::Lambda::Function

        VerifyInventoryLambda:
    Properties:
      Code: {ZipFile: "#
# Copyright
       2018 Amazon.com, Inc. or its affiliates. All
           Rights Reserved.
      n#
# Permission is hereby granted, free of charge, to
           any
       person obtaining a copy of this
# software and associated documentation
      
           files (the "Software"), to deal in the Software
# without
       restriction,
           including without limitation the rights to use,
       copy, modify,
# merge,
           publish, distribute, sublicense,
       and/or sell copies of the Software, and
           to
# permit persons
       to whom the Software is furnished to do so.
#

          # THE SOFTWARE
       IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
     
            OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      
           FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
       NO EVENT SHALL
           THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE
       FOR ANY CLAIM, DAMAGES OR
           OTHER LIABILITY, WHETHER IN AN ACTION
      n# OF CONTRACT, TORT OR OTHERWISE,
           ARISING FROM, OUT OF OR IN
       CONNECTION WITH THE
# SOFTWARE OR THE USE
           OR OTHER DEALINGS
       IN THE SOFTWARE.
#
import boto3


def handler(event,
       
          context):
tssm_client = boto3.client('ssm')
tpending_assoc_id
       = event["
          Setup"]["AssociationId"]

tdesc =
       ssm_client.describe_association(

          ttAssociationId=pending_assoc_id
      nt)["AssociationDescription"]

t
          overview_status
       = desc["Overview"]["Status"]
tif overview_status ==
  
               "Success":
ttreturn "Success"
tif overview_status
       == "Pending"
          :
ttraise ValueError("Association
       failed to manifest within allocated
           time limit; status still
       Pending")
tif overview_status == "Failure"
          :

      ttraise ValueError("Association failed outright; status explicitly

                 reports FAILURE")

t# Passive, presumed failure in the
       absence of
           evidence of success
traise ValueError("
      Association failed to manifest
           within allocated time limit;
       status was")
"}
      FunctionName: {Ref: VerifyLambdaName}
     
       Handler: index.handler
      MemorySize: 128
      Role:
        Fn::If:

              - LambdaAssumeRoleNotSpecified
        - Fn::GetAtt: [LambdaRole,
       Arn]
        - {Ref: LambdaRoleArn}
      Runtime: python3.7
      Timeout:
       60
    Type: AWS::Lambda::Function
"
- name: "setupInventory"
  action: "aws:invokeLambdaFunction"
  inputs:
    FunctionName: "SetupInventoryLambda-{{automation:EXECUTION_ID}}"
    Payload: "{"InstanceIds": "{{InstanceIds}}", "AssociationName": "{{AssociationName}}"
      , "Schedule": "{{Schedule}}", "AssociatedDocName": "{{AssociatedDocName}}"
      , "Applications": "{{Applications}}", "AwsComponents": "{{AwsComponents}}"
      , "Files": "{{Files}}", "NetworkConfig": "{{NetworkConfig}}", "WindowsUpdates"
      : "{{WindowsUpdates}}", "InstanceDetailedInformation": "{{InstanceDetailedInformation}}"
      , "Services": "{{Services}}", "WindowsRegistry": "{{WindowsRegistry}}"
      , "WindowsRoles": "{{WindowsRoles}}", "CustomInventory": "{{CustomInventory}}"
      , "OutputS3BucketName": "{{OutputS3BucketName}}", "OutputS3KeyPrefix"
      : "{{OutputS3KeyPrefix}}", "OutputS3Region": "{{OutputS3Region}}"}"
- name: "SleepToCompleteAssociation"
  action: "aws:sleep"
  inputs:
    Duration: "{{AssocWaitTime}}"
- name: "verifyInventory"
  action: "aws:invokeLambdaFunction"
  inputs:
    FunctionName: "VerifyInventoryLambda-{{automation:EXECUTION_ID}}"
    Payload: "{"Setup": {{setupInventory.Payload}}}"
- name: "deleteCloudFormationTemplate"
  action: "aws:deleteStack"
  inputs:
    StackName: "SetupInventoryStack{{automation:EXECUTION_ID}}"
