description: "Detach EBS Volume"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  VolumeId:
    type: "String"
    description: "(Required) The ID of the EBS volume. The volume and instance must
       be within the same Availability Zone"
  LambdaAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role assumed by lambda"
    default: ""
  AutomationAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role that allows Automation to perform
       the actions on your behalf. "
    default: ""
mainSteps:
- name: "createDocumentStack"
  action: "aws:createStack"
  inputs:
    Capabilities:
    - "CAPABILITY_IAM"
    StackName: "DetachEBSVolumeStack{{automation:EXECUTION_ID}}"
    Parameters:
    - ParameterKey: "LambdaRoleArn"
      ParameterValue: "{{LambdaAssumeRole}}"
    - ParameterKey: "LambdaName"
      ParameterValue: "DetachVolumeLambda-{{automation:EXECUTION_ID}}"
    TemplateBody: "AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  LambdaAssumeRoleNotSpecified:

          Fn::Or:
    - Fn::Equals:
      - Ref: LambdaRoleArn
      - ''
  
        - Fn::Equals:
      - Ref: LambdaRoleArn
      - undefined
Description:
       Automation Stack for Detach EBS Volumes
Parameters:
  LambdaName:
    Description:
       The lambda function name
    Type: String
  LambdaRoleArn:
    Default:
       ''
    Description: The ARN of the role that allows Lambda created by Automation
       to perform
      the action on your behalf
    Type: String
Resources:

        DetachVolumeLambda:
    Properties:
      Code:
        ZipFile: "#
      n# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights
       
          Reserved.
#
# Permission is hereby granted, free of charge, to any
       person
           obtaining a copy of this
# software and associated
       documentation files
           (the "Software"), to deal in the
       Software
# without restriction, including
           without limitation
       the rights to use, copy, modify,
# merge, publish,
           distribute,
       sublicense, and/or sell copies of the Software, and to
#
          
       permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE
      
           IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
       OR IMPLIED,

          # INCLUDING BUT NOT LIMITED TO THE WARRANTIES
       OF MERCHANTABILITY, FITNESS
           FOR A
# PARTICULAR PURPOSE AND
       NONINFRINGEMENT. IN NO EVENT SHALL THE
           AUTHORS OR COPYRIGHT
      n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           LIABILITY,
       WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING
     
            FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER
      
           DEALINGS IN THE SOFTWARE.
#
import boto3
import time
      nimport logging

          
logger = logging.getLogger()
logger.setLevel(logging.INFO)
      n

def handler(event,
           context):
tec2 = boto3.resource('ec2')
      n
tvolume_id = event["VolumeId"
          ]
tvolume = ec2.Volume(volume_id)
      ntvolume.detach_from_instance()


          tretry_count = 0

      tattachment_state = 'detaching'

twhile retry_count
           <
       35:

ttretry_count += 1
ttvolume.reload()

ttif len(volume.attachments)
      
           == 0:
tttattachment_state = 'detached'
tttbreak
      nttattachment_state
           = volume.attachments[0]['State']

      ttif attachment_state == 'detached'
           or attachment_state ==
       'busy':
tttbreak

tttime.sleep(1)
tt
          logger.info(
      "Current Attachment State:" + attachment_state + ", tries:"
  
               + str(retry_count))

tlogger.info("Last Attachment State:
      " + attachment_state
           + ", tries:" + str(retry_count))
      n
tif attachment_state == 'busy':

          ttlogger.warn('Volume
       still mounted. Will detach once volume is unmounted
           from instance.')
      nttraise Exception('Volume still mounted. Will detach
           once
       volume is unmounted from instance.')

tif attachment_state !=
  
               'detached':
ttraise Exception('Failed to detach volume.  Current
       state
           is:' + attachment_state)
"
      FunctionName:

              Ref: LambdaName
      Handler: index.handler
      MemorySize: 128

            Role:
        Fn::If:
        - LambdaAssumeRoleNotSpecified
    
          - Fn::GetAtt:
          - LambdaRole
          - Arn
        - Ref:
       LambdaRoleArn
      Runtime: python3.7
      Timeout: 60
    Type: AWS::Lambda::Function

        LambdaRole:
    Condition: LambdaAssumeRoleNotSpecified
    Properties:

            AssumeRolePolicyDocument:
        Statement:
        - Action:
  
              - sts:AssumeRole
          Effect: Allow
          Principal:
 
                 Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'

            Path: /
      Policies:
      - PolicyDocument:
          Statement:

                  Action:
            - ec2:DescribeVolumes
            - ec2:DetachVolume

                  Effect: Allow
            Resource: '*'
          Version: '2012-10-17'

              PolicyName: DetachVolumeLambdaPolicy
    Type: AWS::IAM::Role
"
- name: "detachVolume"
  action: "aws:invokeLambdaFunction"
  inputs:
    FunctionName: "DetachVolumeLambda-{{automation:EXECUTION_ID}}"
    Payload: "{"VolumeId": "{{VolumeId}}"}"
    LogType: "Tail"
- name: "deleteCloudFormationTemplate"
  action: "aws:deleteStack"
  inputs:
    StackName: "DetachEBSVolumeStack{{automation:EXECUTION_ID}}"
outputs:
- "detachVolume.LogResult"
