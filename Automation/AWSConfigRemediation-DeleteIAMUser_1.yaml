description: |
  ### Document name - AWSConfigRemediation-DeleteIAMUser

  ## What does this document do?
  This runbook deletes the AWS Identity and Access Management (IAM) user you specify using the [DeleteUser](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteUser.html) API. This automation deletes or detaches the following resources associated with the IAM user.

  - Access keys
  - Attached managed policies
  - Git credentials
  - IAM group memberships
  - IAM user password
  - Inline policies
  - Multi-factor authentication (MFA) devices
  - Signing certificates
  - SSH public keys

  ## Input Parameters
  * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
  * IAMUserId: (Required) The ID of the IAM user you want to delete.

  ## Output Parameters
  * DeleteIAMUserAndVerify.Output: Output of the step indicating successful deletion of the AWS IAM User.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::d{12}:role/[w+=,.@-]+
  IAMUserId:
    type: String
    description: (Required) The ID of the IAM user you want to delete.
    allowedPattern: ^AIDA[A-Z0-9]+$
outputs:
  - DeleteIAMUserAndVerify.Output
mainSteps:
  - name: GetUsername
    action: aws:executeScript
    description: |
      ## GetUsername
      Gathers the user name of the IAM user you specify in the `IAMUserId` parameter.
      ## Outputs
      * UserName: The name of the user.
    isEnd: false
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        IAMUserId: "{{ IAMUserId }}"
      Script: |-
        from time import sleep

        import boto3

        THROTTLE_PERIOD = 0.05


        def get_username(iam_client, iam_user_id):
            paginator = iam_client.get_paginator("list_users")
            page_iterator = paginator.paginate()
            for page in page_iterator:
                for user in page["Users"]:
                    if user["UserId"] == iam_user_id:
                        return user["UserName"]
                sleep(THROTTLE_PERIOD)


        def handler(event, context):
            iam_client = boto3.client("iam")
            iam_user_id = event["IAMUserId"]

            iam_username = get_username(iam_client, iam_user_id)

            if iam_username is not None:
                return {"UserName": iam_username}
            else:
                error_message = f"AWS IAM USER ID, {iam_user_id} DOES NOT EXIST."
                raise Exception(error_message)
    outputs:
      - Name: UserName
        Selector: $.Payload.UserName
        Type: String
  - name: GetKeysCertificatesMfaAndCredentials
    action: aws:executeScript
    description: |
      ## GetKeysCertificatesMfaAndCredentials
      Gathers access keys, certificates, credentials, MFA devices, and SSH keys associated with the IAM user.
      ## Outputs
      * Output: The access keys, ssh keys, certificates, mfa device and credentials for the AWS IAM user.
    isEnd: false
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        UserName: "{{ GetUsername.UserName }}"
      Script: |-
        from time import sleep

        import boto3

        THROTTLE_PERIOD = 0.05


        def get_access_keys(iam_client, iam_username):
            paginator = iam_client.get_paginator("list_access_keys")
            page_iterator = paginator.paginate(UserName=iam_username)
            access_keys = []
            for page in page_iterator:
                for access_key in page["AccessKeyMetadata"]:
                    access_keys.append(access_key["AccessKeyId"])
                sleep(THROTTLE_PERIOD)
            return access_keys


        def get_ssh_public_keys(iam_client, iam_username):
            paginator = iam_client.get_paginator("list_ssh_public_keys")
            page_iterator = paginator.paginate(UserName=iam_username)
            ssh_keys = []
            for page in page_iterator:
                for ssh_key in page["SSHPublicKeys"]:
                    ssh_keys.append(ssh_key["SSHPublicKeyId"])
                sleep(THROTTLE_PERIOD)
            return ssh_keys


        def get_signing_certificates(iam_client, iam_username):
            paginator = iam_client.get_paginator("list_signing_certificates")
            page_iterator = paginator.paginate(UserName=iam_username)
            signing_certificates = []
            for page in page_iterator:
                for access_key in page["Certificates"]:
                    signing_certificates.append(access_key["CertificateId"])
                    sleep(THROTTLE_PERIOD)
            return signing_certificates


        def get_mfa_devices(iam_client, iam_username):
            paginator = iam_client.get_paginator("list_mfa_devices")
            page_iterator = paginator.paginate(UserName=iam_username)
            mfa_devices = []
            for page in page_iterator:
                for mfa_device in page["MFADevices"]:
                    mfa_devices.append(mfa_device["SerialNumber"])
                sleep(THROTTLE_PERIOD)
            return mfa_devices


        def get_service_specific_credentials(iam_client, iam_username):
            response = iam_client.list_service_specific_credentials(UserName=iam_username)
            service_specific_credential_ids = []
            for service in response["ServiceSpecificCredentials"]:
                service_specific_credential_ids.append(service["ServiceSpecificCredentialId"])
            return service_specific_credential_ids


        def handler(event, context):
            iam_client = boto3.client("iam")
            iam_username = event["UserName"]

            access_keys = get_access_keys(iam_client, iam_username)
            ssh_public_keys = get_ssh_public_keys(iam_client, iam_username)
            signing_certificates = get_signing_certificates(iam_client, iam_username)
            mfa_devices = get_mfa_devices(iam_client, iam_username)
            service_specific_credentials = get_service_specific_credentials(iam_client, iam_username)

            return {
                "access_keys": access_keys,
                "ssh_public_keys": ssh_public_keys,
                "signing_certificates": signing_certificates,
                "mfa_devices": mfa_devices,
                "service_specific_credentials": service_specific_credentials,
            }
    outputs:
      - Name: AccessKeys
        Selector: $.Payload.access_keys
        Type: StringList
      - Name: SSHPublicKeys
        Selector: $.Payload.ssh_public_keys
        Type: StringList
      - Name: SigningCertificates
        Selector: $.Payload.signing_certificates
        Type: StringList
      - Name: MFADevices
        Selector: $.Payload.mfa_devices
        Type: StringList
      - Name: ServiceSpecificCredentials
        Selector: $.Payload.service_specific_credentials
        Type: StringList
  - name: GetGroupsAndPolicies
    action: aws:executeScript
    description: |
      ## GetGroupsAndPolicies
      Gathers group memberships and policies for the IAM user.
      ## Outputs
      * Output: The group memberships and policies for the AWS IAM user.
    isEnd: false
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        UserName: "{{ GetUsername.UserName }}"
      Script: |-
        from time import sleep

        import boto3

        THROTTLE_PERIOD = 0.05


        def get_user_groups(iam_client, iam_username):
            paginator = iam_client.get_paginator("list_groups_for_user")
            page_iterator = paginator.paginate(UserName=iam_username)
            groups = []
            for page in page_iterator:
                for group in page["Groups"]:
                    groups.append(group["GroupName"])
                sleep(THROTTLE_PERIOD)
            return groups


        def get_user_policies(iam_client, iam_username):
            paginator = iam_client.get_paginator("list_user_policies")
            page_iterator = paginator.paginate(UserName=iam_username)
            policies = []
            for page in page_iterator:
                policies.extend(page["PolicyNames"])
                sleep(THROTTLE_PERIOD)
            return policies


        def get_attached_user_policies(iam_client, iam_username):
            paginator = iam_client.get_paginator("list_attached_user_policies")
            page_iterator = paginator.paginate(UserName=iam_username)
            policies = []
            for page in page_iterator:
                for policy in page["AttachedPolicies"]:
                    policies.append(policy["PolicyArn"])
                sleep(THROTTLE_PERIOD)
            return policies


        def handler(event, context):
            iam_client = boto3.client("iam")
            iam_username = event["UserName"]

            groups = get_user_groups(iam_client, iam_username)
            user_policies = get_user_policies(iam_client, iam_username)
            attached_user_policies = get_attached_user_policies(iam_client, iam_username)

            return {"groups": groups, "user_policies": user_policies, "attached_user_policies": attached_user_policies}
    outputs:
      - Name: Groups
        Selector: $.Payload.groups
        Type: StringList
      - Name: UserPolicies
        Selector: $.Payload.user_policies
        Type: StringList
      - Name: AttachedUserPolicies
        Selector: $.Payload.attached_user_policies
        Type: StringList
  - name: DeleteKeysCertificatesMfaAndCredentials
    action: aws:executeScript
    description: |
      ## DeleteKeysCertificatesMfaAndCredentials
      Deletes access keys, certificates, credentials, MFA devices, and SSH keys associated with the IAM user.
      ## Outputs
      * Output: The output of this step indicating successful deletion of the access keys, ssh keys, certificates, MFA device and credentials for the AWS IAM user.
    isEnd: false
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        UserName: "{{ GetUsername.UserName }}"
        AccessKeys: "{{ GetKeysCertificatesMfaAndCredentials.AccessKeys }}"
        SSHPublicKeys: "{{ GetKeysCertificatesMfaAndCredentials.SSHPublicKeys }}"
        SigningCertificates: "{{ GetKeysCertificatesMfaAndCredentials.SigningCertificates }}"
        MFADevices: "{{ GetKeysCertificatesMfaAndCredentials.MFADevices }}"
        ServiceSpecificCredentials: "{{ GetKeysCertificatesMfaAndCredentials.ServiceSpecificCredentials }}"
      Script: |-
        import boto3


        def delete_login_profile(iam_client, iam_username):
            try:
                response = iam_client.delete_login_profile(UserName=iam_username)
                return response
            except iam_client.exceptions.NoSuchEntityException:
                return None


        def delete_access_keys(iam_client, iam_username, access_keys):
            responses = []
            for access_key in access_keys:
                response = iam_client.delete_access_key(UserName=iam_username, AccessKeyId=access_key)
                responses.append(response)
            return responses


        def delete_ssh_public_keys(iam_client, iam_username, ssh_public_keys):
            responses = []
            for ssh_key in ssh_public_keys:
                response = iam_client.delete_ssh_public_key(UserName=iam_username, SSHPublicKeyId=ssh_key)
                responses.append(response)
            return responses


        def delete_signing_certificate(iam_client, iam_username, signing_certificates):
            responses = []
            for certificate in signing_certificates:
                response = iam_client.delete_signing_certificate(UserName=iam_username, CertificateId=certificate)
                responses.append(response)
            return responses


        def deactivate_mfa_devices(iam_client, iam_username, mfa_devices):
            responses = []
            for mfa_device in mfa_devices:
                response = iam_client.deactivate_mfa_device(UserName=iam_username, SerialNumber=mfa_device)
                responses.append(response)
            return responses


        def delete_mfa_devices(iam_client, mfa_devices):
            responses = []
            for mfa_device in mfa_devices:
                response = iam_client.delete_virtual_mfa_device(SerialNumber=mfa_device)
                responses.append(response)
            return responses


        def delete_service_specific_credential(iam_client, iam_username, service_specific_credentials):
            responses = []
            for service_credential in service_specific_credentials:
                response = iam_client.delete_service_specific_credential(
                    UserName=iam_username, ServiceSpecificCredentialId=service_credential
                )
                responses.append(response)
            return responses


        def handler(event, context):
            iam_client = boto3.client("iam")
            iam_username = event["UserName"]
            access_keys = event["AccessKeys"]
            ssh_public_keys = event["SSHPublicKeys"]
            signing_certificates = event["SigningCertificates"]
            mfa_devices = event["MFADevices"]
            service_specific_credentials = event["ServiceSpecificCredentials"]

            delete_login_profile(iam_client, iam_username)
            delete_access_keys(iam_client, iam_username, access_keys)
            delete_ssh_public_keys(iam_client, iam_username, ssh_public_keys)
            delete_signing_certificate(iam_client, iam_username, signing_certificates)
            deactivate_mfa_devices(iam_client, iam_username, mfa_devices)
            delete_mfa_devices(iam_client, mfa_devices)
            delete_service_specific_credential(iam_client, iam_username, service_specific_credentials)

            return "Processed deleting login profile, deleting access keys, deleting ssh public keys, deleting signing certificates, deactivating & deleting MFA devices, and deleting service specific credentials."
    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: String
  - name: DeleteGroupsAndPolicies
    action: aws:executeScript
    description: |
      ## DeleteGroupsAndPolicies
      Deletes group memberships and policies for the IAM user.
      ## Outputs
      * Output: The output of this step indicating successful deletion of the group memberships and policies for the AWS IAM User.
    isEnd: false
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        UserName: "{{ GetUsername.UserName }}"
        Groups: "{{ GetGroupsAndPolicies.Groups }}"
        UserPolicies: "{{ GetGroupsAndPolicies.UserPolicies }}"
        AttachedUserPolicies: "{{ GetGroupsAndPolicies.AttachedUserPolicies }}"
      Script: |-
        import boto3


        def remove_user_from_group(iam_client, iam_username, groups):
            responses = []
            for group in groups:
                response = iam_client.remove_user_from_group(UserName=iam_username, GroupName=group)
                responses.append(response)
            return responses


        def delete_user_policies(iam_client, iam_username, user_policies):
            responses = []
            for policy in user_policies:
                response = iam_client.delete_user_policy(UserName=iam_username, PolicyName=policy)
                responses.append(response)
            return responses


        def detach_attached_user_policies(iam_client, iam_username, attached_user_policies):
            responses = []
            for policy in attached_user_policies:
                response = iam_client.detach_user_policy(UserName=iam_username, PolicyArn=policy)
                responses.append(response)
            return responses


        def handler(event, context):
            iam_client = boto3.client("iam")
            iam_username = event["UserName"]
            groups = event["Groups"]
            user_policies = event["UserPolicies"]
            attached_user_policies = event["AttachedUserPolicies"]

            remove_user_from_group(iam_client, iam_username, groups)
            delete_user_policies(iam_client, iam_username, user_policies)
            detach_attached_user_policies(iam_client, iam_username, attached_user_policies)

            return "Processed removal of user from groups, deleting user policies, and detaching user attached policies."
    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: String
  - name: DeleteIAMUserAndVerify
    action: aws:executeScript
    description: |
      ## DeleteIAMUserAndVerify
      Deletes the IAM user and verifies the user has been deleted.
      ## Outputs
      * Output: A success message or failure exception.
    isEnd: true
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        UserName: "{{ GetUsername.UserName }}"
      Script: |-
        import boto3


        def delete_iam_user(iam_client, iam_username):
            response = iam_client.delete_user(UserName=iam_username)
            return response

        def verify_iam_user_status(iam_client, iam_username):
            try:
                iam_client.get_user(UserName=iam_username)
                error_message = f"VERIFICATION FAILED. AWS IAM USER {iam_username} DELETION UNSUCCESSFUL."
                raise Exception(error_message)
            except iam_client.exceptions.NoSuchEntityException:
                return {"output": "Verification of AWS IAM user deletion is successful."}


        def handler(event, context):
            iam_client = boto3.client("iam")
            iam_username = event["UserName"]
            response = delete_iam_user(iam_client, iam_username)
            results = verify_iam_user_status(iam_client, iam_username)
            results["DeleteUserResponse"] = response
            return results

    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: String
      - Name: DeleteUserResponse
        Selector: $.Payload.DeleteUserResponse
        Type: StringMap
