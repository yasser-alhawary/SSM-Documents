description: |
  ### Document name - AWSConfigRemediation-EnableLoggingForALBAndCLB

  ## What does this document do?
  The runbook enables logging for the specified AWS Application Load Balancer using the 
  [ModifyLoadBalancerAttributes](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_ModifyLoadBalancerAttributes.html) API 
  or a Classic Load Balancer (CLB) using the [ModifyLoadBalancerAttributes](https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_ModifyLoadBalancerAttributes.html) API.

  ## Input Parameters
  * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
  * LoadBalancerId: (Required) The Classic Load Balancer name or the Application Load Balancer ARN.
  * S3BucketName: (Required) The Amazon S3 bucket name.
  * S3BucketPrefix: (Optional) The logical hierarchy you created for your Amazon Simple Storage Service (Amazon S3) bucket, for example my-bucket-prefix/prod. If the prefix is not provided, the log is placed at the root level of the bucket.

  ## Output Parameters
  * EnableAndVerifyLoggingForELB.Output: The standard HTTP response from the ModifyLoadBalancerAttributes API call.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::d{12}:role/[w+=,.@/-]+$
  LoadBalancerId:
    type: String
    description: (Required) The Classic Load Balancer name or the Application Load Balancer ARN.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:elasticloadbalancing:.*:d{12}:loadbalancer/[w+=,.@/-]+$|^[a-zA-Z0-9]([a-zA-Z0-9-]{0,30}[a-zA-Z0-9])?$
  S3BucketName:
    type: String
    description: (Required) The Amazon S3 bucket name.
    allowedPattern: (?=^.{3,63}$)(?!.*[.-]{2})(?!.*[--]{2})(?!^(?:(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(.(?!$)|$)){4}$)(^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9]).)*([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$)
  S3BucketPrefix:
    type: String
    description: (Optional) The logical hierarchy you created for your Amazon Simple Storage Service (Amazon S3) bucket, for example my-bucket-prefix/prod. If the prefix is not provided, the log is placed at the root level of the bucket.
    allowedPattern: "^$|(.*){1,1024}"
    default: ""

outputs:
  - EnableAndVerifyLoggingForELB.Output
mainSteps:
  - name: EnableAndVerifyLoggingForELB
    action: "aws:executeScript"
    description: |
      ## EnableAndVerifyLoggingForELB
      Enables and verifies the logging for the Classic Load Balancer or the Application Load Balancer. 
      ## Outputs
      * Output: The standard HTTP response from the ModifyLoadBalancerAttributes API call.
    isEnd: true
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        ResourceId: "{{ LoadBalancerId }}"
        S3BucketName: "{{ S3BucketName }}"
        S3BucketPrefix: "{{ S3BucketPrefix }}"
      Script: |-
        import boto3
        import json
        import re

        def is_elb_logging_enabled(resource_type, elb_client, resource_id, s3_bucket_name, s3_bucket_prefix):
          if resource_type == 'AWS::ElasticLoadBalancing::LoadBalancer':
            return is_classic_elb_logging_enabled(elb_client, resource_id, s3_bucket_name, s3_bucket_prefix)
          elif resource_type == 'AWS::ElasticLoadBalancingV2::LoadBalancer':
            return is_application_elb_logging_enabled(elb_client, resource_id, s3_bucket_name, s3_bucket_prefix)

        def is_classic_elb_logging_enabled(elb_client, resource_id, s3_bucket_name, s3_bucket_prefix):
          load_balancer_attributes = elb_client.describe_load_balancer_attributes(LoadBalancerName=resource_id)
          if (load_balancer_attributes['LoadBalancerAttributes']['AccessLog']['Enabled'] and
             s3_bucket_name == load_balancer_attributes['LoadBalancerAttributes']['AccessLog']['S3BucketName'] and
             s3_bucket_prefix == load_balancer_attributes['LoadBalancerAttributes']['AccessLog']['S3BucketPrefix']):
            return True
          return False

        def is_application_elb_logging_enabled(elb_client, resource_id, s3_bucket_name, s3_bucket_prefix):
          load_balancer_attributes = elb_client.describe_load_balancer_attributes(LoadBalancerArn=resource_id)
          for attribute in load_balancer_attributes['Attributes']:
            if (
                (attribute['Key'] ==  'access_logs.s3.enabled' and attribute['Value'] != 'true') or 
                (attribute['Key'] == 'access_logs.s3.bucket' and attribute['Value'] != s3_bucket_name) or
                (attribute['Key'] == 'access_logs.s3.prefix' and attribute['Value'] != s3_bucket_prefix)
              ):
              return False
          return True

        def update_application_elb_logging(elb_client, resource_id, s3_bucket_name, s3_bucket_prefix):
          response = elb_client.modify_load_balancer_attributes(
              LoadBalancerArn=resource_id,
              Attributes=[
                  {"Key": "access_logs.s3.enabled", "Value": "true"},
                  {"Key": "access_logs.s3.bucket", "Value": s3_bucket_name},
                  {"Key": "access_logs.s3.prefix", "Value": s3_bucket_prefix}
              ]
          )
          return response

        def update_classic_elb_logging(elb_client, resource_id, s3_bucket_name, s3_bucket_prefix):
          load_balancer_attributes = elb_client.describe_load_balancer_attributes(
              LoadBalancerName=resource_id
          )
          #Update logging details
          load_balancer_attributes['LoadBalancerAttributes']['AccessLog']['Enabled'] = True
          load_balancer_attributes['LoadBalancerAttributes']['AccessLog']['S3BucketName'] = s3_bucket_name
          load_balancer_attributes['LoadBalancerAttributes']['AccessLog']['S3BucketPrefix'] = s3_bucket_prefix
          response = elb_client.modify_load_balancer_attributes(
              LoadBalancerName=resource_id,
              LoadBalancerAttributes = load_balancer_attributes['LoadBalancerAttributes']
            )
          return response

        def handler(event, context):
          resource_id = event["ResourceId"]
          elb_client = boto3.client("elb")
          s3_bucket_name = event["S3BucketName"]
          s3_bucket_prefix = event["S3BucketPrefix"]
          ALB_REGEX = "^arn:(aws[a-zA-Z-]*)?:elasticloadbalancing:.*:d{12}:loadbalancer/[w+=,.@/-]+$"

          if re.match(ALB_REGEX, resource_id):
            resource_type = "AWS::ElasticLoadBalancingV2::LoadBalancer"
          else:
            resource_type = "AWS::ElasticLoadBalancing::LoadBalancer"
          
          update_response = {}
          if resource_type == 'AWS::ElasticLoadBalancingV2::LoadBalancer':
            elb_client = boto3.client("elbv2")
            update_response = update_application_elb_logging(elb_client, resource_id, s3_bucket_name, s3_bucket_prefix)
          elif resource_type == 'AWS::ElasticLoadBalancing::LoadBalancer':
            update_response = update_classic_elb_logging(elb_client, resource_id, s3_bucket_name, s3_bucket_prefix)
          else:
            raise Exception(
              "THE RESOURCE TYPE {} IS NOT SUPPORTED FOR THIS REMEDIATION DOCUMENT AWSConfigRemediation-EnableLoggingForELB.".format(resource_type)
            )

          if is_elb_logging_enabled(resource_type, elb_client, resource_id, s3_bucket_name, s3_bucket_prefix):
              return {
                  "output": {
                      "Message": "Verification of enable logging on Elastic Load Balancer {} is successful.".format(resource_id),
                      "HTTPResponse": update_response["ResponseMetadata"]
                  }
              }
          raise Exception(
              "VERIFICATION FAILED. ENABLE LOGGING ON ELASTIC LOAD BALANCER {} IS UNSUCCESSFUL.".format(resource_id)
          )
    outputs:
      - Name: Output
        Selector: $.Payload.output
