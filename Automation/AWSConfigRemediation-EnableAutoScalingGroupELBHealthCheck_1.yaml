description: |
  ### Document name - AWSConfigRemediation-EnableAutoScalingGroupELBHealthCheck

  ## What does this document do?
  This runbook enables health checks for the Amazon EC2 Auto Scaling (Auto Scaling) group you specify using the [UpdateAutoScalingGroup](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_UpdateAutoScalingGroup.html) API.

  ## Input Parameters
  * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
  * AutoScalingGroupARN: (Required) The Amazon Resource Name (ARN) of the auto scaling group that you want to enable health checks on.
  * HealthCheckGracePeriod: (Optional) The amount of time, in seconds, that Auto Scaling waits before checking the health status of an Amazon Elastic Compute Cloud (Amazon EC2) instance that has come into service.

  ## Output Parameters
  * EnableAutoScalingGroupELBHealthCheckAndVerify.Response: Response from the UpdateAutoScalingGroup API.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::d{12}:role/[w+=,.@/-]+$
  AutoScalingGroupARN:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the auto scaling group that you want to enable health checks on.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:autoscaling:[a-z0-9-]+:d{12}:autoScalingGroup:[a-z0-9-]+:autoScalingGroupName/(?!.*[:])(.{1,255})$
  HealthCheckGracePeriod:
    type: Integer
    description: (Optional) The amount of time, in seconds, that Auto Scaling waits before checking the health status of an Amazon Elastic Compute Cloud (Amazon EC2) instance that has come into service.
    allowedPattern: ^[0-9]d*$
    default: 300

outputs:
  -  EnableAutoScalingGroupELBHealthCheckAndVerify.Response
mainSteps:
  -
    name: EnableAutoScalingGroupELBHealthCheckAndVerify
    action: aws:executeScript
    timeoutSeconds: 600
    isEnd: true
    description: |
      ## EnableAutoScalingGroupELBHealthCheckAndVerify
      Enables health checks on the Auto Scaling group you specify in the AutoScalingGroupARN parameter.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        AutoScalingGroupARN:  "{{ AutoScalingGroupARN }}"
        HealthCheckGracePeriod: "{{ HealthCheckGracePeriod }}"
      Script: |-
        import boto3
        import re

        def get_group_name_from_arn(autoscaling_group_arn):
            group_arn_regex = "^arn:(aws[a-zA-Z-]*)?:autoscaling:[a-z0-9-]+:d{12}:autoScalingGroup:[a-z0-9-]+:autoScalingGroupName/(?!.*[:])(.{1,255})$"
            group_match = re.match(group_arn_regex, autoscaling_group_arn)
            if group_match:
              return group_match.groups()[1]
            else:
              raise Exception("AUTOSCALING GROUP ARN IS NOT IN VALID FORMAT.")

        def update_autoscaling_group_elb_health_check(client, autoscaling_group_name, health_check_period):
            update_response = client.update_auto_scaling_group(AutoScalingGroupName=autoscaling_group_name,
                                                              HealthCheckType="ELB",
                                                              HealthCheckGracePeriod=health_check_period)
            return update_response

        def handler(event, context):
            group_arn = event["AutoScalingGroupARN"]
            group_name = get_group_name_from_arn(group_arn)
            grace_period = event["HealthCheckGracePeriod"]

            client = boto3.client('autoscaling')

            update_response = update_autoscaling_group_elb_health_check(client, group_name, grace_period)

            autoscaling_response = client.describe_auto_scaling_groups(AutoScalingGroupNames=[group_name])
            configured_health_check_type = autoscaling_response["AutoScalingGroups"][0]["HealthCheckType"]
            configured_grace_period = autoscaling_response["AutoScalingGroups"][0]["HealthCheckGracePeriod"]
            if configured_grace_period == grace_period and configured_health_check_type == "ELB":
                return {
                    "Message": "Verification of EnableAutoScalingGroupHealthCheck is successful.",
                    "HTTPResponse": update_response["ResponseMetadata"]
                  }
            raise Exception("VERIFICATION FAILED. AMAZON EC2 AUTOSCALING GROUP IS NOT ENABLED WITH GIVEN HEALTH CHECK GRACE PERIOD.")
    outputs:
      - Name: Response
        Selector: $
