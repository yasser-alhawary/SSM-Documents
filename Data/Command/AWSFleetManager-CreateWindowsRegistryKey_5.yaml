schemaVersion: '2.2'
description: 'Creates a Windows Registry key.'
parameters:
  Path:
    type: String
    description: The registry path where the new key should be created. The format for this parameter is "HIVE:Path", for example "HKLM:SOFTWARE".
    allowedPattern: ^((HKEY_LOCAL_MACHINE|HKLM|HKEY_CURRENT_CONFIG|HKCC|HKEY_CURRENT_USER|HKCU|HKEY_USERS|HKU|HKEY_CLASSES_ROOT|HKCR)+:)(()|([a-zA-Z0-9s_@-^!#.:/$%&+={}[]*]))+$
  Name:
    type: String
    description: The name of the registry key to create.
    allowedPattern: ^[^|
r]*$
    maxChars: 255
  PerformAction:
    type: String
    description: (Optional) Set this to 'Yes' to perform the action.
    default: 'No'
    allowedValues:
      - 'No'
      - 'Yes'
mainSteps:
- precondition:
    StringEquals:
      - platformType
      - Windows
  action: aws:runPowerShellScript
  name: InvokeWindowsScript
  inputs:
    runCommand:
      - |
        $ErrorActionPreference = 'Stop'
        
        Function ParseInputParameter {
            param (
                [string]$Name,
                [string]$Value,
                [string]$Regex
            )
        
            $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'
            if ($Value -notmatch $ValidParameterRegex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
            }
            $parameterValue = $Value.Substring(3)
        
            $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()
            $trimmedParameterValue = $trimmedParameterValue.Substring(1)
            $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)
        
            if ($Regex -and $trimmedParameterValue -notmatch $Regex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
            } else {
                $trimmedParameterValue
            }
        }
        
        function ExitWithFailureMessage {
            param (
                [string]$Message,
                [string]$ExceptionMessage,
                [Switch]$PrintJson
            )
            if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
                $errorMessage = $Message
            } else {
                $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
            }
            if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}
            WriteStandardError -Message $errorMessage
            [System.Environment]::Exit(1)
        }
        
        function ExitWithFailureMessageAndExitCode {
            param (
                [string]$Message,
                [string]$ExceptionMessage,
                [int]$ExitCode,
                [Switch]$PrintJson
            )
            if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
                $errorMessage = $Message
            } else {
                $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
            }
            if ($PSBoundParameters.ContainsKey('ExitCode') -eq $true) {
                $exitCode = $ExitCode
            } else {
                $exitCode = 1
            }
            if ($PrintJson) {
                $ErrorObject = @{
                    error = $errorMessage
                    exitCode = $exitCode
                }
                ConvertTo-Json -InputObject $ErrorObject -Compress
            }
            WriteStandardError -Message $errorMessage
            [System.Environment]::Exit($exitCode)
        }
        
        function ExitWithSuccessMessage {
            param (
                [string]$Message
            )
            Write-Host $Message
            [System.Environment]::Exit(0)
        }
        
        function WriteStandardError {
            param (
                [string]$Message
            )
            $Host.UI.WriteErrorLine($Message)
        }

        function TestPerformAction {
            param ( [string]$PerformAction )
            if ($PerformAction -ne 'Yes') {
                ExitWithFailureMessage -Message "No action was taken because the PerformAction parameter is set to $PerformAction. To make the desired change, set this parameter to Yes."
            }
        }

        $Path = Write-Output --%{{{ Path }}}
        $Path = ParseInputParameter -Name 'Path' -Value $Path
        
        $Name = Write-Output --%{{{ Name }}}
        $Name = ParseInputParameter -Name 'Name' -Value $Name
        
        $PerformAction = Write-Output --%{{{ PerformAction }}}
        $PerformAction = ParseInputParameter -Name 'PerformAction' -Value $PerformAction -Regex '(Yes|No)'
        TestPerformAction -PerformAction $PerformAction
        
        function TestRegistryKeyExists {
            param (
                $Query,
                $SubKey,
                $Name
            )
        
            if ($Path -eq '') {
                # Root/browsing the hive case
                $keys = $Query.GetSubKeyNames()
            } else {
                # Browse a path within the hive
                $registryKey = $Query.OpenSubKey($SubKey, $false)
                if ($null -eq $registryKey) {return $false}
                $keys = $registryKey.GetSubKeyNames()
            }
        
            if ($Name -in $keys) {
                return $true
            } else {
                return $false
            }
        }
        
        function CreateKey {
            param (
                $Query,
                $Key,
                $Name
            )
            if (TestRegistryKeyExists -Query $Query -SubKey $Key -Name $Name) {return}
        
            $regKey = $query.OpenSubKey($Key, $true)
            if ($null -eq $regKey) {
                ExitWithFailureMessage -Message 'The specified registry key is invalid.' -PrintJson
            }
        
            try {
                $null = $regKey.CreateSubKey($Name)
            } catch {
                ExitWithFailureMessage -Message 'Failed to create the specified registry key.' -PrintJson
            }
        }
        
        function CreateRecursiveKey {
            param (
                $Query,
                [string[]]$KeysToCreate
            )
            for ($i = 0; $i -lt $KeysToCreate.Count - 1; $i++) {
                if ($i -eq 0) {
                    $parentKey = $KeysToCreate[$i]
                } else {
                    $parentKey = '{0}{1}' -f $parentKey, $KeysToCreate[$i]
                }
                CreateKey -Query $Query -Key $parentKey -Name $KeysToCreate[$i + 1]
            }
        }
        
        $hive = ($Path.Split('')).GetValue(0)
        $registrySubKey = $Path.Replace($hive, [string]::Empty).TrimStart('')
        
        if ([string]::IsNullOrWhiteSpace($registrySubKey)) {
            $exitWithFailureMessage = @{
                Message = 'The creation of a registry key at the registry hive level is not supported.'
                PrintJson = $true
            }
            ExitWithFailureMessage @exitWithFailureMessage
        }
        
        [hashtable]$hivePrefixToName = @{
            'HKLM:'                = [Microsoft.Win32.RegistryHive]::LocalMachine;
            'HKEY_LOCAL_MACHINE:'  = [Microsoft.Win32.RegistryHive]::LocalMachine;
            'HKCU:'                = [Microsoft.Win32.RegistryHive]::CurrentUser;
            'HKEY_CURRENT_USER:'   = [Microsoft.Win32.RegistryHive]::CurrentUser;
            'HKCC:'                = [Microsoft.Win32.RegistryHive]::CurrentConfig;
            'HKEY_CURRENT_CONFIG:' = [Microsoft.Win32.RegistryHive]::CurrentConfig;
            'HKEY_USERS:'          = [Microsoft.Win32.RegistryHive]::Users;
            'HU:'                  = [Microsoft.Win32.RegistryHive]::Users;
            'HKEY_CLASSES_ROOT:'   = [Microsoft.Win32.RegistryHive]::ClassesRoot;
            'HKCR:'                = [Microsoft.Win32.RegistryHive]::ClassesRoot
        }
        $query = [Microsoft.Win32.RegistryKey]::OpenBaseKey($hivePrefixToName[$hive], [Microsoft.Win32.RegistryView]'Default')
        
        if (TestRegistryKeyExists -Query $query -SubKey $registrySubKey -Name $Name) {
            ExitWithFailureMessage -Message 'The specified registry key already exists.' -PrintJson
        }
        
        CreateRecursiveKey -Query $query -KeysToCreate $registrySubKey.Split('')
        CreateKey -Query $query -Key $registrySubKey -Name $Name
        ExitWithSuccessMessage 'The specified registry key has been created.'
