schemaVersion: '2.2'
description: Generates private and public keys for users to access instance through RDP protocol.
parameters:
  Username:
    type: String
    description: The name of the user for whom a password is created or reset.
    allowedPattern: ^[^"'/[]:;|=,+*?<>@r
]+$
    maxChars: 32
  RsaParameters:
    type: String
    description: A Modulus and Exponent that can be used to generate an RSA public key.
    allowedPattern: ^([0-9,a-z.]{6})([A-Za-z0-9-_/+]{4})*([A-Za-z0-9-_/+]{4}|[A-Za-z0-9-_/+]{3}=|[A-Za-z0-9-_/+]{2}==)$
  PerformAction:
    type: String
    description: (Optional) Set this to 'Yes' to perform the action.
    default: 'No'
    allowedValues:
      - 'No'
      - 'Yes'
mainSteps:
- precondition:
    StringEquals:
      - platformType
      - Windows
  action: aws:runPowerShellScript
  name: InvokeWindowsScript
  inputs:
    runCommand:
      - |
        $ErrorActionPreference = 'Stop'
        
        Function ParseInputParameter {
            param (
                [string]$Name,
                [string]$Value,
                [string]$Regex
            )
        
            $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'
            if ($Value -notmatch $ValidParameterRegex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name" -PrintJson
            }
            $parameterValue = $Value.Substring(3)
        
            $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()
            $trimmedParameterValue = $trimmedParameterValue.Substring(1)
            $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)
        
            if ($Regex -and $trimmedParameterValue -notmatch $Regex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name" -PrintJson
            } else {
                $trimmedParameterValue
            }
        }
        
        function ExitWithFailureMessage {
            param (
                [string]$Message,
                [string]$ExceptionMessage,
                [Switch]$PrintJson,
                [int]$ExitCode = 1
            )
            if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
                $errorMessage = $Message
            } else {
                $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
            }
            if ($PrintJson) { ConvertTo-Json -InputObject @{error = $errorMessage } -Compress }
            WriteStandardError -Message $errorMessage
            [System.Environment]::Exit($ExitCode)
        }
        
        function WriteStandardError {
            param (
                [string]$Message
            )
            $Host.UI.WriteErrorLine($Message)
        }

        function TestPerformAction {
            param ( [string]$PerformAction )
            if ($PerformAction -ne 'Yes') {
                ExitWithFailureMessage -Message "No action was taken because the PerformAction parameter is set to $PerformAction. To make the desired change, set this parameter to Yes." -PrintJson
            }
        }

        $Username = Write-Output --%{{{ Username }}}
        $Username = ParseInputParameter -Name 'Username' -Value $Username
        
        $RsaParameters = Write-Output --%{{{ RsaParameters }}}
        $RsaParameters = ParseInputParameter -Name 'RsaParameters' -Value $RsaParameters
        
        $PerformAction = Write-Output --%{{{ PerformAction }}}
        $PerformAction = ParseInputParameter -Name 'PerformAction' -Value $PerformAction -Regex '(Yes|No)'
        TestPerformAction -PerformAction $PerformAction
        
        # Fail if the current system is a domain controller.
        $domainRole = (Get-WmiObject -Class 'Win32_ComputerSystem' -Property 'DomainRole').DomainRole
        if ($domainRole -ge 4) {
            ExitWithFailureMessage -Message 'The SSO functionality is not supported on domain controllers. You can only connect with the username/password method.' -PrintJson
        }
        
        # The RsaParameters parameter is serialized in the format '[Exponent].[Modulus]'. We need to deserialize it into an
        # RSAParameters object.
        $keyParts = $RsaParameters.Split('.')
        $par = New-Object -TypeName 'System.Security.Cryptography.RSAParameters'
        $par.Exponent = $keyParts[0].Split(',') | ForEach-Object { [Byte]$_ }
        $par.Modulus = [Convert]::FromBase64String($keyParts[1])
        
        # Create the encryptor
        $rsa = [System.Security.Cryptography.RSA]::Create($par)
        
        # Generate a 14 character password (the maximum allowed length before a warning prompt appears). Use a mix of upper
        # and lower case characters, special characters, and numbers.
        $random = New-Object -TypeName 'Random'
        
        # The use of a HashSet ensures that all randomly selected characters are unique.
        $pool = New-Object -TypeName 'System.Collections.Generic.HashSet[char]'
        1..4 | ForEach-Object {
            # Upper case letters
            do {
                $added = $pool.Add([char]$random.Next(65, 90))
            } until ($added)
            # Lower case letters
            do {
                $added = $pool.Add([char]$random.Next(97, 122))
            } until ($added)
        }
        $chars = '!@$^&*(),.?<>;:+-_=|'.ToCharArray()
        1..3 | ForEach-Object {
            # Numbers
            do {
                $added = $pool.Add([char]$random.Next(48, 57))
            } until ($added)
            # Special characters
            do {
                $added = $pool.Add($chars[$random.Next(0, $chars.Length - 1)])
            } until ($added)
        }
        
        # Create a string using the pool of characters in a randomized order.
        $passwd = ($pool | Get-Random -Count 14) -join ''
        
        # Convert the password to a byte array
        $passwdBytes = [Text.Encoding]::UTF8.GetBytes($passwd)
        
        # Determine the padding mode. We default to OaepSHA1 since it is best. Older Operating Systems do not support
        # OaepSHA1, so we may need to fall back to Pkcs. To accommodate this, we also cannot reference the OaepSHA1 class
        # directly, as the script would fail to parse (due to the missing class). To work around this, we use
        # Invoke-Expression to initialize it instead. This is wrapped in a try/catch so we can fall back to Pkcs1.
        try {
            $paddingMode = Invoke-Expression -Command '[System.Security.Cryptography.RSAEncryptionPadding]::OaepSHA1'
        } catch {
            $paddingMode = [System.Security.Cryptography.RSAEncryptionPadding]::Pkcs1
        }
        
        # Encrypt the bytes using the RSA public key
        $cipherBytes = $rsa.Encrypt($passwdBytes, $paddingMode)
        $cipherText = [Convert]::ToBase64String($cipherBytes)
        
        # Generate the encrypted password for stdout. We'll enclose the output between two '###' strings to make it easier
        # to extract, since the output may also contain status messages. We will prefix the output with the padding mode
        # that was used, so the caller can tell which padding mode was used. For example:
        # '###{0}:{1}###' -f $paddingMode,$cipherText
        $results = @{
            paddingMode = [string]$paddingMode
            cipherText  = $cipherText
        }
        
        # Try to create the user
        $null = & net user $Username $passwd /ADD
        
        # If the user already exists, the exit code will be '2'. If that's the case we need to reset the password.
        if ($lastexitcode -eq 2) {
            # Reset the user password
            $null = & net user $Username $passwd
            if ($lastexitcode -ne 0) {
                ExitWithFailureMessage -Message "Failed to reset the SSO user's password" -ExitCode $lastexitcode -PrintJson
            }
        
            # Enable the account
            $null = & net user $Username /ACTIVE:YES
            if ($lastexitcode -ne 0) {
                ExitWithFailureMessage -Message "Failed to enable the SSO user" -PrintJson
            }
        } elseif ($lastexitcode -ne 0){
            ExitWithFailureMessage -Message "Failed to create the SSO user" -PrintJson
        }
        
        # Add the user to local Administrators group
        $null = & net localgroup Administrators $Username /ADD
        
        # If the user is already a member of the group, the exit code is '2'.
        if ($lastexitcode -eq 0 -or $lastexitcode -eq 2) {
            ConvertTo-Json -InputObject $results -Compress
        } else {
            ExitWithFailureMessage -Message "Failed to set SSO user as an Administrator" -PrintJson
        }
