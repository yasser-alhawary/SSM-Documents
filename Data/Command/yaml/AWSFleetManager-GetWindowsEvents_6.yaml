---
schemaVersion: '2.2'
description: 'Performs Windows Event Logs listing.'
parameters:
  Action:
    type: String
    description: (Optional) The action to perform
    default: 'ListLogs'
    allowedValues:
      - 'ListLogs'
      - 'ListLogEntries'
  LogName:
    type: String
    description: (Optional) The Windows event log name.
    default: 'Application'
    allowedPattern: ^([^\*\?\\|\r\n]|[a-zA-Z0-9\-\/ ])+$
  StartTime:
    type: String
    description: (Optional) The start time for log events to query. The value is expressed as milliseconds since epoch (January 1st,1970). For example October 1st, 2020 would be '1603892797000'.
    default: '0'
    allowedPattern: ^\d{1,19}$
  EndTime:
    type: String
    description: (Optional) The end time for log events to query. The value is expressed as milliseconds since epoch (January 1st,1970). For example October 1st, 2020 would be '1603892797000'.
    default: '0'
    allowedPattern: ^\d{1,19}$
  IncludeInformationLevel:
    type: String
    description: (Optional) Specifies whether to include informational logs.
    default: 'Yes'
    allowedValues:
      - 'No'
      - 'Yes'
  IncludeWarningLevel:
    type: String
    description: (Optional) Specifies whether to include warning logs.
    default: 'Yes'
    allowedValues:
      - 'No'
      - 'Yes'
  IncludeErrorLevel:
    type: String
    description: (Optional) Specifies whether to include error logs.
    default: 'Yes'
    allowedValues:
      - 'No'
      - 'Yes'
  IncludeCriticalLevel:
    type: String
    description: (Optional) Specifies whether to include critical logs.
    default: 'Yes'
    allowedValues:
      - 'No'
      - 'Yes'
  IncludeVerboseLevel:
    type: String
    description: (Optional) Specifies whether to include verbose logs.
    default: 'Yes'
    allowedValues:
      - 'No'
      - 'Yes'
  EventIds:
    type: String
    description: (Optional) Comma-seperated list of event ids and/or range of event ids separated by a hyphen e.g. 1234,1223,1000-1020,3334.
    default: '-'
    allowedPattern: ^-$|^(\d+((,\d+)|(-\d+))*)?$
    minChars: 1
    maxChars: 255
  ProviderName:
    type: String
    description: (Optional) The Windows event provider name.
    default: '-'
    allowedPattern: ^([^\*\?\\|\r\n]|[a-zA-Z0-9\-\/ ])+$
  NextToken:
    type: String
    description: (Optional) Used for the pagination of data. To return all results, specify a value of *. When used with the ListLogs action, set this value to the last LogName returned from the previous execution. When used with the ListLogEntries action, set this value to the last RecordId returned from the previous execution.
    allowedPattern: ^\*$|^([A-Za-z0-9-_\/+]{4})*([A-Za-z0-9-_\/+]{4}|[A-Za-z0-9-_\/+]{3}=|[A-Za-z0-9-_\/+]{2}==)$
    default: '*'
    maxChars: 255
  AllowTruncatedOutput:
    type: String
    description: (Optional) Specifies whether the standard output can be truncated or not. If set to 'No', the standard output size will be limited to stay with Systems Manager API limits. If set to 'Yes', the standard output will not be limited.
    default: 'Yes'
    allowedValues:
      - 'No'
      - 'Yes'
  CompressOutput:
    type: String
    description: (Optional) Defines whether output is compressed. If set to "No", the output will be a JSON string. If set to "Yes", the output will be a JSON string, that is gzipped and BASE64 encoded.
    default: 'No'
    allowedValues:
      - 'No'
      - 'Yes'
mainSteps:
- precondition:
    StringEquals:
      - platformType
      - Windows
  action: aws:runPowerShellScript
  name: InvokeWindowsScript
  inputs:
    runCommand:
      - |
        $ErrorActionPreference = 'Stop'
        
        Function ParseInputParameter {
            param (
                [string]$Name,
                [string]$Value,
                [string]$Regex
            )
        
            $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'
            if ($Value -notmatch $ValidParameterRegex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
            }
            $parameterValue = $Value.Substring(3)
        
            $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()
            $trimmedParameterValue = $trimmedParameterValue.Substring(1)
            $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)
        
            if ($Regex -and $trimmedParameterValue -notmatch $Regex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
            } else {
                $trimmedParameterValue
            }
        }
        
        function ExitWithFailureMessage {
            param (
                [string]$Message,
                [string]$ExceptionMessage,
                [Switch]$PrintJson
            )
            if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
                $errorMessage = $Message
            } else {
                $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
            }
            if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}
            WriteStandardError -Message $errorMessage
            [System.Environment]::Exit(1)
        }
        
        function ExitWithFailureMessageAndExitCode {
            param (
                [string]$Message,
                [string]$ExceptionMessage,
                [int]$ExitCode,
                [Switch]$PrintJson
            )
            if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
                $errorMessage = $Message
            } else {
                $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
            }
            if ($PSBoundParameters.ContainsKey('ExitCode') -eq $true) {
                $exitCode = $ExitCode
            } else {
                $exitCode = 1
            }
            if ($PrintJson) {
                $ErrorObject = @{
                    error = $errorMessage
                    exitCode = $exitCode
                }
                ConvertTo-Json -InputObject $ErrorObject -Compress
            }
            WriteStandardError -Message $errorMessage
            [System.Environment]::Exit($exitCode)
        }
        
        function ExitWithSuccessMessage {
            param (
                [string]$Message
            )
            Write-Host $Message
            [System.Environment]::Exit(0)
        }
        
        function WriteStandardError {
            param (
                [string]$Message
            )
            $Host.UI.WriteErrorLine($Message)
        }

        $script:ResultProperty = 'results'
        $script:DataProperty = 'data'
        $script:NextTokenProperty = 'nextToken'
        
        function ConvertBase64ToString {
            param (
                [string]$Base64
            )
            $bytes = [System.Convert]::FromBase64String($Base64)
            [System.Text.Encoding]::UTF8.GetString($bytes)
        }
        
        function ConvertStringToBase64 {
            param (
                [string]$String
            )
            $bytes = [System.Text.Encoding]::UTF8.GetBytes($String)
            [System.Convert]::ToBase64String($bytes)
        }
        
        function GetCompressionBoolean {
            param (
                [ValidateSet('No', 'Yes')]
                [string]$CompressOutput
            )
            if ($CompressOutput -eq 'Yes') {
                $true
            } else {
                $false
            }
        }
        
        function GetJson {
            param ($InputObject)
            ConvertTo-Json -InputObject $InputObject -Compress -Depth 5
        }
        
        function GetBase64EncodedGzipString {
            param ($InputString)
        
            $inputBytes = [System.Text.Encoding]::UTF8.GetBytes($InputString)
        
            try {
                $memoryStream = New-Object -TypeName 'System.IO.MemoryStream'
                $compressionMode = [System.IO.Compression.CompressionMode]::Compress
                $gzipStream = New-Object -TypeName 'System.IO.Compression.GzipStream' -ArgumentList @($memoryStream, $compressionMode)
        
                $gzipStream.Write($inputBytes, 0, $inputBytes.Length)
                $gzipStream.Close()
                $memoryStream.Close()
        
                [System.Convert]::ToBase64String($memoryStream.ToArray())
            } finally {
                $gzipStream.Dispose()
                $memoryStream.Dispose()
            }
        }
        
        function GetResultAsString {
            param (
                [PSObject]$Object,
                [bool]$Completed,
                [switch]$ConvertNextTokenToBase64,
                [bool]$EnableCompression,
                [string]$NextToken,
                [string]$PaginationProperty,
                [array]$StringReplacementRegex,
                [bool]$ForceEmptyNextToken
            )
        
            if ($Completed -eq $false -and $Object.Count -ge 1 -and $ForceEmptyNextToken -ne $true -and $PaginationProperty -eq '.') {
                $json = GetJson -InputObject $Object[-1].TimeCreated
                $json = $json -replace $StringReplacementRegex
                $json = $json -replace '[^0-9]', ''
                $NextToken = $json + ',' + $Object[-1].RecordId
            } elseif ($Completed -eq $false -and $Object.Count -ge 1 -and $ForceEmptyNextToken -ne $true -and $PaginationProperty -ne '.') {
                $NextToken = $Object[-1].$PaginationProperty
            }
        
            if ($ConvertNextTokenToBase64) {
                $NextToken = ConvertStringToBase64 -String $NextToken
            }
        
            $data = @{
                $script:ResultProperty    = $Object
                $script:NextTokenProperty = $NextToken
            }
        
            if ($EnableCompression -eq $true) {
                $string = GetJson -InputObject $data
        
                if ($StringReplacementRegex.Count -eq 2) {
                    $string = $string -replace $StringReplacementRegex
                }
        
                $data = GetBase64EncodedGzipString -InputString $string
            }
        
            $output = GetJson -InputObject @{
                $script:DataProperty = $data
            }
            if ($StringReplacementRegex.Count -eq 2) {
                $output -replace $StringReplacementRegex
            } else {
                $output
            }
        }
        
        function GetMaximumOutputBytes {
            param (
                $AllowTruncatedOutput,
                [int]$MaximumOutputSize = 2500
            )
            if ($AllowTruncatedOutput -eq 'Yes') {
                0
            } else {
                $padding = (GetResultAsString -Object @() -Completed $false -EnableCompression $false).length
                $MaximumOutputSize - $padding
            }
        }
        
        function ProcessItems {
            param (
                [scriptblock]$ScriptBlock,
                [switch]$ConvertNextTokenToBase64,
                [int]$ChunksPerLoop = 1,
                [bool]$EnableCompression,
                [int]$MaximumOutputBytes,
                [string]$PaginationProperty,
                [array]$StringReplacementRegex,
                [string]$PropertyToTruncate = '.'
            )
        
            $chunkedOutputArray = New-Object -TypeName 'System.Collections.ArrayList'
        
            $outputResult = [string]::Empty
        
            $outputTooBig = $false
            $counter = 0
        
            $getResultString = @{
                EnableCompression      = $EnableCompression
                PaginationProperty     = $PaginationProperty
                StringReplacementRegex = $StringReplacementRegex
            }
        
            foreach ($item in (& $ScriptBlock)) {
                if ($outputTooBig -eq $true) { break }
        
                $null = $chunkedOutputArray.Add($item)
        
                if ($counter -lt $ChunksPerLoop) {
                    $counter++
                    continue
                }
        
                $counter = 0
        
                $properties = @{
                    Object    = $chunkedOutputArray
                    Completed = $outputTooBig
                }
                if ($ConvertNextTokenToBase64) {
                    $properties.Add('ConvertNextTokenToBase64', $ConvertNextTokenToBase64)
                }
                $tempResult = GetResultAsString @properties @getResultString
        
                if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {
                    $outputResult = $tempResult
                } else {
                    # try to remove last added item and test for size again instead of exiting.
                    if ($chunkedOutputArray.Count -gt 1) {
                        $chunkedOutputArray.RemoveAt($chunkedOutputArray.Count - 1);
        
                        $properties = @{
                            Object    = $chunkedOutputArray
                            Completed = $outputTooBig
                        }
                        if ($ConvertNextTokenToBase64) {
                            $properties.Add('ConvertNextTokenToBase64', $ConvertNextTokenToBase64)
                        }
                        $tempResult = GetResultAsString @properties @getResultString
                        if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {
                            $outputResult = $tempResult
                        }
                    } elseif ($chunkedOutputArray.Count -eq 1 -or $PropertyToTruncate -ne '.') {
                        $chunkedOutputArray[0].$PropertyToTruncate = ''
                    }
        
                    $outputTooBig = $true
                    break
                }
            }
        
            # Processing remaining items if the output isn't too big yet
            if ($outputTooBig -eq $false) {
                $properties = @{
                    Object              = $chunkedOutputArray
                    Completed           = $outputTooBig
                    ForceEmptyNextToken = $true
                }
        
                $tempResult = GetResultAsString @getResultString @properties
                if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {
                    $outputResult = $tempResult
                }
            }
        
            Write-Output $outputResult
        }
        
        $Action = Write-Output --%{{{ Action }}}
        $Action = ParseInputParameter -Name 'Action' -Value $Action
        
        $LogName = Write-Output --%{{{ LogName }}}
        $LogName = ParseInputParameter -Name 'LogName' -Value $LogName
        
        $NextToken = Write-Output --%{{{ NextToken }}}
        $NextToken = ParseInputParameter -Name 'NextToken' -Value $NextToken -Regex '^(?!\s*$).+'
        
        $AllowTruncatedOutput = Write-Output --%{{{ AllowTruncatedOutput }}}
        $AllowTruncatedOutput = ParseInputParameter -Name 'AllowTruncatedOutput' -Value $AllowTruncatedOutput -Regex '(Yes|No)'
        
        $CompressOutput = Write-Output --%{{{ CompressOutput }}}
        $CompressOutput = ParseInputParameter -Name 'CompressOutput' -Value $CompressOutput -Regex '(Yes|No)'
        
        $StartTime = Write-Output --%{{{ StartTime }}}
        $StartTime = ParseInputParameter -Name 'StartTime' -Value $StartTime
        
        $EndTime = Write-Output --%{{{ EndTime }}}
        $EndTime = ParseInputParameter -Name 'EndTime' -Value $EndTime
        
        $IncludeInformationLevel = Write-Output --%{{{ IncludeInformationLevel }}}
        $IncludeInformationLevel = ParseInputParameter -Name 'IncludeInformationLevel' -Value $IncludeInformationLevel -Regex '(Yes|No)'
        
        $IncludeWarningLevel = Write-Output --%{{{ IncludeWarningLevel }}}
        $IncludeWarningLevel = ParseInputParameter -Name 'IncludeWarningLevel' -Value $IncludeWarningLevel -Regex '(Yes|No)'
        
        $IncludeErrorLevel = Write-Output --%{{{ IncludeErrorLevel }}}
        $IncludeErrorLevel = ParseInputParameter -Name 'IncludeErrorLevel' -Value $IncludeErrorLevel -Regex '(Yes|No)'
        
        $IncludeCriticalLevel = Write-Output --%{{{ IncludeCriticalLevel }}}
        $IncludeCriticalLevel = ParseInputParameter -Name 'IncludeCriticalLevel' -Value $IncludeCriticalLevel -Regex '(Yes|No)'
        
        $IncludeVerboseLevel = Write-Output --%{{{ IncludeVerboseLevel }}}
        $IncludeVerboseLevel = ParseInputParameter -Name 'IncludeVerboseLevel' -Value $IncludeVerboseLevel -Regex '(Yes|No)'
        
        $EventIds = Write-Output --%{{{ EventIds }}}
        $EventIds = ParseInputParameter -Name 'EventIds' -Value $EventIds
        
        $ProviderName = Write-Output --%{{{ ProviderName }}}
        $ProviderName = ParseInputParameter -Name 'ProviderName' -Value $ProviderName
        
        if ($NextToken -ne '*') {
            try {
                $NextToken = ConvertBase64ToString -Base64 $NextToken
            } catch {
                ExitWithFailureMessage -Message 'The specified NextToken is invalid.' -PrintJson
            }
        }
        
        $enableCompression = GetCompressionBoolean -CompressOutput $CompressOutput
        $maximumOutputBytes = GetMaximumOutputBytes -AllowTruncatedOutput $AllowTruncatedOutput
        
        switch ($Action) {
            'ListLogs' {
                [scriptblock]$scriptblock = {
        
                    $properties = @{
                        Property = @(
                            'LogName'
                            'OwningProviderName'
                            'RecordCount'
                        )
                    }
        
                    $getWinEvent = @{
                        ListLog = '*'
                        ErrorAction = 'SilentlyContinue'
                    }
                    Get-WinEvent @getWinEvent | Where-Object LogName -gt $NextToken | Select-Object @properties | Sort-Object LogName
                }
        
                $processItems = @{
                    ScriptBlock              = $scriptblock
                    ConvertNextTokenToBase64 = $true
                    ChunksPerLoop            = 15
                    EnableCompression        = $enableCompression
                    MaximumOutputBytes       = $maximumOutputBytes
                    PaginationProperty       = 'LogName'
                }
            }
        
            'ListLogEntries' {
                [scriptblock]$scriptblock = {
                    try {
                        if ($NextToken -ne '*') {
                            $parts = $NextToken.Split(',')
        
                            if ([string]::IsNullOrEmpty($parts)) {
                                ExitWithFailureMessage -Message 'The specified NextToken is invalid.'
                            }
        
                            $date = [datetimeoffset]::FromUnixTimeMilliseconds($parts[0]).DateTime
                            $recordId = $parts[1]
                        } else {
                            $date = Get-Date
                        }
        
                        if ($NextToken -eq '*') {
                            $recordId = [long]::MaxValue
                        }
        
                        $properties = @{
                            Property = @(
                                'RecordId'
                                'TimeCreated'
                                'Level'
                                'Id'
                                'Message'
                                'ProviderName'
                                'UserId'
                            )
                        }
        
                        $filterHashTable = @{
                                LogName = $LogName
                        }
        
                        $_endTime = Get-Date
                        if ($EndTime -ne 0) {
                            $_endTime = [datetimeoffset]::FromUnixTimeMilliseconds($EndTime).DateTime
                        }
        
                        $_startTime = [datetime]::MinValue
                        if ($StartTime -ne 0) {
                            $_startTime = [datetimeoffset]::FromUnixTimeMilliseconds($StartTime).DateTime
                        }
        
                        # If date from pagination token is less than endDate then use the date from pagination token. This will handle pagination within a filtered table.
                        if ($date -le $_endTime) {
                            $_endTime = $date
                        }
        
                        $filterHashTable.Add('EndTime', $_endTime)
        
                        if ($_startTime -le $_endTime) {
                            $filterHashTable.Add('StartTime', $_startTime)
                        }
        
                        # Build log level list
                        $logLevelsArray = New-Object -TypeName 'System.Collections.ArrayList'
        
                        if ($IncludeInformationLevel -eq 'Yes') {
                            $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Informational.value__)
                            $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::LogAlways.value__)
                        }
        
                        if ($IncludeWarningLevel -eq 'Yes') {
                            $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Warning.value__)
                        }
        
                        if ($IncludeErrorLevel -eq 'Yes') {
                            $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Error.value__)
                        }
        
                        if ($IncludeCriticalLevel -eq 'Yes') {
                            $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Critical.value__)
                        }
        
                        if ($IncludeVerboseLevel -eq 'Yes') {
                            $null = $logLevelsArray.Add([System.Diagnostics.Eventing.Reader.StandardEventLevel]::Verbose.value__)
                        }
        
                        $filterHashTable.Add('Level', $logLevelsArray.ToArray())
        
                        if ($ProviderName -ne '-') {
                            $filterHashTable.Add('ProviderName', $ProviderName)
                        }
        
                        if ($EventIds -ne '-') {
                            $eventIdsToQuery = New-Object -TypeName 'System.Collections.ArrayList'
        
                            $ids = $EventIds.Split(',')
                            $null = foreach ($id in $ids) {
                                # handle format 1000, 2000-2005, 6000
                                if ($id -match '^(\d+(-\d+))?$') {
                                    $rangeIds = $id.Split('-')
                                    if ($rangeIds.Count -ne 2 -or $rangeIds[0] -gt $rangeIds[1]) {
                                        ExitWithFailureMessage 'The specified EventIds are invalid.' -PrintJson
                                    }
        
                                    $count = [int]$rangeIds[1] - [int]$rangeIds[0]
                                    For ($i=0; $i -le $count; $i++) {
                                        $eventIdsToQuery.Add([int]$rangeIds[0] + [int]$i)
                                    }
                                } else {
                                    $eventIdsToQuery.Add($id)
                                }
                            }
        
                            $whereObject = {$_.RecordId -lt $recordId -and $_.Id -in $eventIdsToQuery}
                            Get-WinEvent -FilterHashTable $filterHashTable -ErrorAction Stop | Where-Object $whereObject | Select-Object @properties
                        } else {
                            Get-WinEvent -FilterHashTable $filterHashTable -ErrorAction Stop | Where-Object RecordId -lt $recordId | Select-Object @properties
                        }
                    } catch [Exception] {
                        if (($_.Exception -match "No events were found that match the specified selection criteria") -Or ($_.Exception -match "There is not an event provider on the localhost computer that matches*")) {
                            Write-Output "0 events found."
                        } else {
                            ExitWithFailureMessage -Message $_.Exception.Message
                        }
                    }
                }
        
                $processItems = @{
                    ScriptBlock              = $scriptblock
                    ConvertNextTokenToBase64 = $true
                    ChunksPerLoop            = 1
                    EnableCompression        = $enableCompression
                    MaximumOutputBytes       = $maximumOutputBytes
                    PaginationProperty       = '.'
                    PropertyToTruncate       = 'Message'
                    StringReplacementRegex   = @('\"\\\/Date\((\d+)\)\\\/\"', '"$1"')
                }
            }
        }
        
        ProcessItems @processItems

