---
schemaVersion: "1.0"
description: "Get performance counters and details about the processes."
sessionType: InteractiveCommands
parameters:
  PrintInteractiveStatements:
    type: String
    description: "(Optional) If set to 'No', the command will not print text that indicates a keystroke is required for it to continue running."
    default: 'No'
    allowedValues:
    - 'Yes'
    - 'No'
properties:
  windows:
    commands: |
        $ErrorActionPreference = 'Stop'
        
        Function ParseInputParameter {
            param (
                [string]$Name,
                [string]$Value,
                [string]$Regex
            )
        
            $ValidParameterRegex = '^--%[ +{|{].*}( +)?$'
            if ($Value -notmatch $ValidParameterRegex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
            }
            $parameterValue = $Value.Substring(3)
        
            $trimmedParameterValue = $parameterValue.TrimStart().TrimEnd()
            $trimmedParameterValue = $trimmedParameterValue.Substring(1)
            $trimmedParameterValue = $trimmedParameterValue.Substring(0, $trimmedParameterValue.Length - 1)
        
            if ($Regex -and $trimmedParameterValue -notmatch $Regex) {
                ExitWithFailureMessage -Message "Invalid syntax for the parameter $Name"
            } else {
                $trimmedParameterValue
            }
        }
        
        function ExitWithFailureMessage {
            param (
                [string]$Message,
                [string]$ExceptionMessage,
                [Switch]$PrintJson
            )
            if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
                $errorMessage = $Message
            } else {
                $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
            }
            if ($PrintJson) {ConvertTo-Json -InputObject @{error = $errorMessage} -Compress}
            WriteStandardError -Message $errorMessage
            [System.Environment]::Exit(1)
        }
        
        function ExitWithFailureMessageAndExitCode {
            param (
                [string]$Message,
                [string]$ExceptionMessage,
                [int]$ExitCode,
                [Switch]$PrintJson
            )
            if ([string]::IsNullOrWhitespace($ExceptionMessage)) {
                $errorMessage = $Message
            } else {
                $errorMessage = '{0} {1}' -f $Message, $ExceptionMessage
            }
            if ($PSBoundParameters.ContainsKey('ExitCode') -eq $true) {
                $exitCode = $ExitCode
            } else {
                $exitCode = 1
            }
            if ($PrintJson) {
                $ErrorObject = @{
                    error = $errorMessage
                    exitCode = $exitCode
                }
                ConvertTo-Json -InputObject $ErrorObject -Compress
            }
            WriteStandardError -Message $errorMessage
            [System.Environment]::Exit($exitCode)
        }
        
        function ExitWithSuccessMessage {
            param (
                [string]$Message
            )
            Write-Host $Message
            [System.Environment]::Exit(0)
        }
        
        function WriteStandardError {
            param (
                [string]$Message
            )
            $Host.UI.WriteErrorLine($Message)
        }

        $script:ResultProperty = 'results'
        $script:DataProperty = 'data'
        $script:NextTokenProperty = 'nextToken'
        
        function ConvertBase64ToString {
            param (
                [string]$Base64
            )
            $bytes = [System.Convert]::FromBase64String($Base64)
            [System.Text.Encoding]::UTF8.GetString($bytes)
        }
        
        function ConvertStringToBase64 {
            param (
                [string]$String
            )
            $bytes = [System.Text.Encoding]::UTF8.GetBytes($String)
            [System.Convert]::ToBase64String($bytes)
        }
        
        function GetCompressionBoolean {
            param (
                [ValidateSet('No','Yes')]
                [string]$CompressOutput
            )
            if ($CompressOutput -eq 'Yes') {
                $true
            } else {
                $false
            }
        }
        
        function GetJson {
            param ($InputObject)
            ConvertTo-Json -InputObject $InputObject -Compress -Depth 5
        }
        
        function GetBase64EncodedGzipString {
            param ($InputString)
        
            $inputBytes = [System.Text.Encoding]::UTF8.GetBytes($InputString)
        
            try {
                $memoryStream = New-Object -TypeName 'System.IO.MemoryStream'
                $compressionMode = [System.IO.Compression.CompressionMode]::Compress
                $gzipStream = New-Object -TypeName 'System.IO.Compression.GzipStream' -ArgumentList @($memoryStream, $compressionMode)
        
                $gzipStream.Write($inputBytes, 0, $inputBytes.Length)
                $gzipStream.Close()
                $memoryStream.Close()
        
                [System.Convert]::ToBase64String($memoryStream.ToArray())
            } finally {
                $gzipStream.Dispose()
                $memoryStream.Dispose()
            }
        }
        
        function GetResultAsString {
            param (
                [PSObject]$Object,
                [bool]$Completed,
                [switch]$ConvertNextTokenToBase64,
                [bool]$EnableCompression,
                [bool]$ForceEmptyNextToken,
                [string]$NextToken,
                [string]$PaginationProperty,
                [array]$StringReplacementRegex
            )
        
            if ([string]::IsNullOrWhiteSpace($NextToken)) {
                if ($Completed -eq $false -and $Object.Count -ge 1 -and $ForceEmptyNextToken -ne $true) {
                    if ($PaginationProperty -eq '.') {
                        $NextToken = $Object[-1]
                    } else {
                        $NextToken = $Object[-1].$PaginationProperty
                    }
                }
            }
        
            if ($ForceEmptyNextToken) {
                $NextToken = [string]::Empty
            } elseif ($ConvertNextTokenToBase64) {
                $NextToken = ConvertStringToBase64 -String $NextToken
            }
        
            $data = @{
                $script:ResultProperty    = $Object
                $script:NextTokenProperty = $NextToken
            }
        
            if ($EnableCompression -eq $true) {
                $string = GetJson -InputObject $data
        
                if ($StringReplacementRegex.Count -eq 2) {
                    $string = $string -replace $StringReplacementRegex
                }
        
                $data = GetBase64EncodedGzipString -InputString $string
            }
        
            $output = GetJson -InputObject @{
                $script:DataProperty = $data
            }
            if ($StringReplacementRegex.Count -eq 2) {
                $output -replace $StringReplacementRegex
            } else {
                $output
            }
        }
        
        function GetMaximumOutputBytes {
            param (
                $AllowTruncatedOutput,
                [int]$MaximumOutputSize = 2500
            )
            if ($AllowTruncatedOutput -eq 'Yes') {
                0
            } else {
                $padding = (GetResultAsString -Object @() -Completed $false -EnableCompression $false).length
                $MaximumOutputSize - $padding
            }
        }
        
        function ProcessItems {
            param (
                [scriptblock]$ScriptBlock,
                [switch]$ConvertNextTokenToBase64,
                [int]$ChunksPerLoop = 1,
                [bool]$EnableCompression,
                [int]$MaximumOutputBytes,
                [string]$PaginationProperty,
                [string]$PropertyToRemove,
                [string]$NextToken,
                [switch]$SetNextTokenBeforeAdding,
                [array]$StringReplacementRegex
            )
        
            $chunkedOutputArray = New-Object -TypeName 'System.Collections.ArrayList'
        
            $outputResult = [string]::Empty
        
            $outputTooBig = $false
            $counter = 0
        
            $getResultString = @{
                EnableCompression = $EnableCompression
                PaginationProperty = $PaginationProperty
                StringReplacementRegex = $StringReplacementRegex
            }
        
            foreach ($item in (& $ScriptBlock)) {
                if ($outputTooBig -eq $true) { break }
        
                if ($NextToken -ne '*') {
                    if ($PaginationProperty -eq '.' -and $item -le $NextToken) {
                        continue
                    } elseif ($PaginationProperty -ne '.' -and $item.$PaginationProperty -le $NextToken) {
                        continue
                    }
                }
        
                if ($SetNextTokenBeforeAdding) {
                    if ($PaginationProperty -eq '.') {
                        $newNextToken = $item
                    } else {
                        $newNextToken = $item.$PaginationProperty
                    }
                }
        
                if ($PropertyToRemove) {
                    $item.PSObject.properties.remove($PropertyToRemove)
                }
        
                $null = $chunkedOutputArray.Add($item)
        
                if ($counter -lt $ChunksPerLoop) {
                    $counter++
                    continue
                }
        
                $counter = 0
        
                $properties = @{
                    Object = $chunkedOutputArray
                    Completed = $outputTooBig
                }
                if ($ConvertNextTokenToBase64) {
                    $properties.Add('ConvertNextTokenToBase64', $ConvertNextTokenToBase64)
                }
                if ($SetNextTokenBeforeAdding) {
                    $properties.Add('NextToken', $newNextToken)
                }
                $tempResult = GetResultAsString @properties @getResultString
        
                if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {
                    $outputResult = $tempResult
                } else {
                    $outputTooBig = $true
                    break
                }
            }
        
            # Processing remaining items if the output isn't too big yet
            if ($outputTooBig -eq $false) {
                $properties = @{
                    Object = $chunkedOutputArray
                    Completed = $outputTooBig
                    ForceEmptyNextToken = $true
                }
                if ($ConvertNextTokenToBase64) {
                    $properties.Add('ConvertNextTokenToBase64', $ConvertNextTokenToBase64)
                }
                if ($SetNextTokenBeforeAdding) {
                    $properties.Add('NextToken', $newNextToken)
                }
                $tempResult = GetResultAsString @getResultString @properties
                if ($MaximumOutputBytes -eq 0 -or $tempResult.Length -le $MaximumOutputBytes) {
                    $outputResult = $tempResult
                }
            }
        
            $outputResult
        }

        # Total memory consumption percentage
        function GetTotalMemoryUsage
        {
            $ComputerMemory =  Get-CimInstance -Class WIN32_OperatingSystem
            $Memory = ((($ComputerMemory.TotalVisibleMemorySize - $ComputerMemory.FreePhysicalMemory)*100)/ $ComputerMemory.TotalVisibleMemorySize)
            return [String][math]::Round($Memory, 2)
        }
        
        # get the percentage value of total CPU usage consumption
        function GetTotalCPUUsage
        {
            $Processors = Get-CimInstance -Query 'select Name, PercentProcessorTime from Win32_PerfFormattedData_PerfOS_Processor'
            foreach ($processor in $Processors) {
                if ($processor.Name -like '_Total') {
                    return [String]$processor.PercentProcessorTime
                }
            }
        }
        $PrintInteractiveStatements = Write-Output --%{{{ PrintInteractiveStatements }}}
        $PrintInteractiveStatements = ParseInputParameter -Name 'PrintInteractiveStatements' -Value $PrintInteractiveStatements -Regex '(Yes|No)'
        
        $script:FMToken = '__FM_SESSION_OUTPUT__'
        $script:DataProperty = 'data'
        $script:TimestampProperty = 'timestamp'
        $script:ProcessUsageDetailsProperty = 'processDetails'
        $script:SystemUsageProperty = 'systemDetails'
        $script:TotalCpuUsageProperty = 'totalCpuUsage'
        $script:TotalMemoryUsageProperty = 'totalMemoryUsage'
        
        Function Main {
            $selectObject = @{Property = @(
            @{Name='id';      Expression = {[String]$_.IDProcess}},
            @{Name='name';    Expression = {$_.name}},
            @{Name='cpu';     Expression = {[String]$_.PercentProcessorTime}},
            @{Name='memory';  Expression = {[String][Math]::Round(($_.workingSetPrivate / 1mb),2)}},
            @{Name='handles'; Expression = {$_.HandleCount}},
            @{Name='startTime'; Expression = {((Get-Date) - (New-TimeSpan -Seconds $_.elapsedTime)).ToString('r')}},
            @{Name='threadCount'; Expression = {$_.ThreadCount}}
        )}
        
            # id, name, cpu, memory, handles, startTime, threadCount
            $process = Get-WmiObject -class Win32_PerfFormattedData_PerfProc_Process -filter { name!='_Total' and name!='Idle' }|
                        Select-Object @selectObject | Sort-Object -Descending 'Memory'
        
            $processDetails = @{
                $script:SystemUsageProperty = @{
                    $script:TotalCpuUsageProperty = GetTotalCPUUsage
                    $script:TotalMemoryUsageProperty = GetTotalMemoryUsage
                }
                $script:ProcessUsageDetailsProperty = $process
            }
        
            [int]$Timestamp = Get-Date -UFormat %s
        
            $string = GetJson -InputObject @{
                $script:TimestampProperty = $Timestamp
                $script:DataProperty = $processDetails
            }
        
            $output = $script:FMToken
        
            $output+$string
        }
        
        do {
            Main
            ''
        
            if ($PrintInteractiveStatements -eq 'Yes') {
                $continue = Read-Host -Prompt 'Press q to end the loop or press any other key to continue.'
            } else {
                $continue = Read-Host
            }
        } while ($continue -ne 'q')
    runAsElevated: true
  linux:
    commands: |
        #!/bin/bash
        set -e
        
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS_RELEASE="$ID${VERSION_ID:+.${VERSION_ID}}"
        elif [ -f /etc/centos-release ]; then
            OS_RELEASE="centos.$(awk '{print $3}' /etc/centos-release)"
        elif [ -f /etc/redhat-release ]; then
            OS_RELEASE="rhel.$(lsb_release -r | awk '{print $2}')"
        fi
        
        case "$OS_RELEASE" in
            amzn.2|centos.7*|centos.8*|fedora.*|rhel.7*|rhel.8*|sles*)
                command_path='/usr/bin/'
                ;;
            amzn.2018.03|centos.6*|debian.*|rhel.6*|ubuntu.16*|ubuntu.18*|ubuntu.20*)
                command_path='/bin/'
                ;;
            *)
                # Catch all without the full path for untested platforms
                command_path=''
        esac
        
        ExitWithFailureMessage() {
            MESSAGE="$1"
            JSON="$2"
            if [[ "$JSON" == "PRINT_JSON" ]]; then
                "${command_path}echo" "{\"error\":\"$MESSAGE\"}"
            fi
            WriteStandardError "$MESSAGE"
            exit 1
        }
        
        # exit codes. 0-100 are reserved exit codes. 101-150 codes are for linux, 151-200 are for macos and 200 onwards codes are for windows.
        ExitWithFailureMessageAndExitCode() {
            MESSAGE="$1"
            EXITCODE="$2"
            JSON="$3"
            if [[ "$JSON" == "PRINT_JSON" ]]; then
                "${command_path}echo" "{\"error\":\"$MESSAGE\",\"exitCode\":\"$EXITCODE\"}"
            fi
            WriteStandardError "$MESSAGE"
            exit "$EXITCODE"
        }
        
        ExitWithSuccessMessage() {
            "${command_path}echo" "$1"
            exit 0
        }
        
        WriteStandardError() {
            MESSAGE="$1"
            (>&2 "${command_path}echo" "$MESSAGE")
        }

        JQ="jq"
        VERSION="1.6"
        PRODUCT_PATH="/opt/amazon/ssm/fleet_manager"
        JQ_BINARY="$PRODUCT_PATH/$JQ-$VERSION"
        
        CheckSha256FileHash() {
            FILE_PATH="$1"
            SHA256="$2"
        
            if [ -f "$FILE_PATH" ]; then
                TEST=$("${command_path}echo" "$SHA256  $FILE_PATH" | /usr/bin/sha256sum -c 2>&1) || return 1
                return 0
            fi
        
            return 1
        }
        
        SetLockedDownPermissions() {
            "${command_path}chmod" u+rwx "$1"
            "${command_path}chmod" go-rwx "$1"
            "${command_path}chown" "$(/usr/bin/whoami)":"$(/usr/bin/id --group --name)" "$1"
        }
        
        CreateLockedDownFolder() {
            "${command_path}mkdir" -p "$1"
            SetLockedDownPermissions "$1"
        }
        
        DownloadFile() {
            SOURCE="$1"
            DESTINATION="$2"
            if [ -f /usr/bin/curl ]; then
                /usr/bin/curl -s "$SOURCE" -o "$DESTINATION"
            elif [ -f /usr/bin/wget ]; then
                /usr/bin/wget -q "$SOURCE" -O "$DESTINATION"
            else
                ExitWithFailureMessage "Unable to download the source using 'curl' or 'wget'. Failing execution." 'PRINT_JSON'
            fi
        }
        
        IfRunningKernelVersion2() {
            "${command_path}uname" -r | grep -q '^2\.' || return 1
        }
        
        GetJQSHA256Hash() {
            case "$1" in
                'aarch64')
                    "${command_path}echo" "a6e84e979b91b26763c700d4ba6c616554444bbbf0cf1863e96611b0e68b88f2"
                    ;;
                'armv6l')
                    "${command_path}echo" "4717f1350a963e5ae5446e61eb21e3936754f84dd13586d494dcd6b497b267c1"
                    ;;
                'armv7l')
                    "${command_path}echo" "e097be6c7ef954d581a359ad2d7aa4ec19c89bd3b9ab55919c826a1d30373a5c"
                    ;;
                'i686')
                    "${command_path}echo" "062902c5a177cb80866d556a07e10331d9f8b8b676ffb1b7cd2985a9c2e539c8"
                    ;;
                'x86_64')
                    "${command_path}echo" "15d1d1b093481c737603247a785731b7f32f3b4dccd63f77186de8bfe4f6fd68"
                    ;;
                'x86_64_kernel2')
                    "${command_path}echo" "af986793a515d500ab2d35f8d2aecd656e764504b789b66d7e1a0b727a124c44"
                    ;;
                *)
                    ExitWithFailureMessage "The CPU architecture '$1' is not supported. Failing execution." 'PRINT_JSON'
                    ;;
            esac
        }
        
        RandomString() {
            "${command_path}cat" /dev/urandom | /usr/bin/tr -dc 'a-zA-Z0-9' | /usr/bin/fold -w ${1:-32} | /usr/bin/head -n 1
        }
        
        InstallJQ() {
            CreateLockedDownFolder "$PRODUCT_PATH"
        
            CPU_ARCH=$("${command_path}uname" -m)
            IfRunningKernelVersion2 && CPU_ARCH="${CPU_ARCH}_kernel2"
            JQ_SHA256=$(GetJQSHA256Hash "$CPU_ARCH")
        
            CheckSha256FileHash "$JQ_BINARY" "$JQ_SHA256" || {
                JQ_TEMP_BINARY="$PRODUCT_PATH/$(RandomString)"
        
                OS_NAME=$("${command_path}uname" -s)
                REGION="us-east-1"
                S3_BUCKET="aws-fleet-manager-artifacts-us-east-1"
                S3_DNS="s3.us-east-1.amazonaws.com"
                SOURCE="https://$S3_BUCKET.$S3_DNS/$JQ/$VERSION/$OS_NAME/$CPU_ARCH/$JQ"
                DownloadFile "$SOURCE" "$JQ_TEMP_BINARY"
        
                CheckSha256FileHash "$JQ_TEMP_BINARY" "$JQ_SHA256" || {
                    "${command_path}rm" --force "$JQ_TEMP_BINARY"
                    ExitWithFailureMessage "Downloading the $JQ binary failed. Failing execution."
                }
        
                "${command_path}mv" "$JQ_TEMP_BINARY" "$JQ_BINARY"
            }
        
            SetLockedDownPermissions "$JQ_BINARY"
        }

        InstallJQ

        Main () {
            Counters=''
        
            while IFS= read -r cpuline; do
                case "$cpuline" in
                    "cpu "*)
                        totalidle0=$("${command_path}echo" "$cpuline" | "${command_path}grep" -e 'cpu ' | /usr/bin/awk '{print $5+$6}')
                        totalnoneidle0=$("${command_path}echo" "$cpuline" | "${command_path}grep" -e 'cpu ' | /usr/bin/awk '{print $2+$3+$4+$7+$8+$9}')
                        overalltotal0=$((totalidle0 + totalnoneidle0))
                        ;;
                esac
            done <"$cpustatfile"
        
            timestamp=$(date +%s)
            Counters=$("${command_path}echo" "[ $timestamp ]" | "$JQ_BINARY" -c '{timestamp: .[0]}')
        
            processDetails=$("${command_path}echo" '{"data": {"processDetails": []}}' | "$JQ_BINARY" -c '.')
            Counters=$("$JQ_BINARY" -c --argjson Counters "$Counters" --argjson processDetails "$processDetails" -n '$Counters * $processDetails')
        
            cpuCounters=$("${command_path}echo" '{"data": {"systemDetails": {"totalCpuUsage": []}}}' | "$JQ_BINARY" -c '.')
            Counters=$("$JQ_BINARY" -c --argjson Counters "$Counters" --argjson output "$cpuCounters" -n '$Counters * $output')
        
            while IFS= read -r cpuline; do
                case "$cpuline" in
                    "cpu "*)
                        idle1=$("${command_path}echo" "$cpuline" | "${command_path}grep" -e 'cpu ' | /usr/bin/awk '{print $5+$6}')
                        noneidle1=$("${command_path}echo" "$cpuline" | "${command_path}grep" -e 'cpu ' | /usr/bin/awk '{print $2+$3+$4+$7+$8+$9}')
                        overalltotal1=$((idle1 + noneidle1))
                        totaldif=$((overalltotal1 - overalltotal0))
                        ideldif=$((idle1 - totalidle0))
                        value=\""$("${command_path}echo" "[$totaldif, $ideldif]" | "$JQ_BINARY" -c '(1000*(.[0] - .[1])/.[0]/10)')"\"
                        output=$("${command_path}echo" "[ "$value"]" | "$JQ_BINARY" -c '.[0]')
                        Counters=$("${command_path}echo" "$Counters" | "$JQ_BINARY" -c --argjson output "$output" '.data.systemDetails.totalCpuUsage = $output')
                        ;;
                esac
            done <"$cpustatfile"
        
        
            memCounters=$("${command_path}echo" '{"data": {"systemDetails": {"totalMemoryUsage": []}}}' | "$JQ_BINARY" -c '.')
            Counters=$("$JQ_BINARY" -c --argjson Counters "$Counters" --argjson memCounters "$memCounters" -n '$Counters * $memCounters')
            meminfo=$("${command_path}cat" /proc/meminfo)
            total=$("${command_path}echo" "$meminfo" | "${command_path}grep" -e '^MemTotal' | /usr/bin/awk '{print $2}')
            availableMem=$("${command_path}echo" "$meminfo" | "${command_path}grep" -e '^MemAvailable' | /usr/bin/awk '{print $2}')
            availableMemValue=\"$("${command_path}echo" "[$total, $availableMem]" | "$JQ_BINARY" -c '((.[0] - .[1])/1024)')\"
            memoryUsedInteger=$("${command_path}echo" "[$total, $availableMem]" | "$JQ_BINARY" -c '((.[0] - .[1])/1024)')
        
            totalMemValue=\"$("${command_path}echo" "[$total]" | "$JQ_BINARY" -c '(.[0]/1024)')\"
            totalMemoryInteger=$("${command_path}echo" "[$total]" | "$JQ_BINARY" -c '(.[0]/1024)')
        
            memoryConsumedPercentageValue=\"$("${command_path}echo" "[$memoryUsedInteger, $totalMemoryInteger]" | "$JQ_BINARY" -c '((.[0]*100)/.[1])')\"
            output=$("${command_path}echo" "[ "$memoryConsumedPercentageValue"]" | "$JQ_BINARY" -c '.[0]')
            Counters=$("${command_path}echo" "$Counters" | "$JQ_BINARY" -c --argjson output "$output" '.data.systemDetails.totalMemoryUsage = $output')
        
            # getting timezone eg: UTC
            getTZ=$(date +%Z)
        
            i=1
            n=0
            ps -eo pid,lstart,user,etime,pcpu,pmem,cmd --sort=-pmem | while read -r line; do
                if [ $n -ge $i ]; then
                    pidValue=\"$("${command_path}echo" "$line" | awk {'print $1'})\"
                    cpuValue=\"$("${command_path}echo" "$line" | awk {'print $9'})\"
                    memoryValue=\"$("${command_path}echo" "$line" | awk {'print $10'})\"
                    commandValue=$("${command_path}echo" "$line" | awk {'print $11'})
                    monthValue=$("${command_path}echo" "$line" | awk {'print $3'})
                    dateValue=$("${command_path}echo" "$line" | awk {'print $4'})
                    timeValue=$("${command_path}echo" "$line" | awk {'print $5'})
                    yearValue=$("${command_path}echo" "$line" | awk {'print $6'})
                    startTime=$(date -d "$monthValue $dateValue $timeValue $yearValue $getTZ" -u)
                    userValue=$("${command_path}echo" "$line" | awk {'print $7'})
                    output=$("${command_path}echo" "[ "$pidValue", "$cpuValue", "$memoryValue", \"$commandValue\", \"$startTime\", \"$userValue\"]" | "$JQ_BINARY" -c '{"id": .[0], "cpu": .[1], "memory": .[2], "name": .[3], "startTime": .[4], "user": .[5]}')
                    Counters=$("${command_path}echo" "$Counters" | "$JQ_BINARY" -c --argjson output "$output" '.data.processDetails += [$output]')
                fi;
                n=$((n+1))
                echo $Counters > 2
            done
        
            read -r Counters < 2
        
            # session token
            stringOutput="__FM_SESSION_OUTPUT__"
            result="${stringOutput}${Counters}"
        
            "${command_path}echo" "$result"
        }
        
        PrintInteractiveStatements='{{ PrintInteractiveStatements }}'
        
        cpustatfile='/proc/stat'
        netstatfile='/proc/net/dev'
        
        while [ "$Reply" != 'q' ]; do
            Main
            "${command_path}echo"
        
            if [ "$PrintInteractiveStatements" = 'Yes' ]; then
                /usr/bin/printf 'Press q to end the loop or press any other key to continue.'
            fi
        
            read -r Reply
        done
    runAsElevated: true
  macos:
    commands: |
        #!/bin/bash
        set -e
        
        ExitWithFailureMessage() {
            MESSAGE="$1"
            JSON="$2"
            if [[ "$JSON" == "PRINT_JSON" ]]; then
                /bin/echo "{\"error\":\"$MESSAGE\"}"
            fi
            WriteStandardError "$MESSAGE"
            exit 1
        }
        
        ExitWithSuccessMessage() {
            /bin/echo "$1"
            exit 0
        }
        
        WriteStandardError() {
            MESSAGE="$1"
            (>&2 /bin/echo "$MESSAGE")
        }

        JQ="jq"
        VERSION="1.6"
        PRODUCT_PATH="/opt/amazon/ssm/fleet_manager"
        JQ_BINARY="$PRODUCT_PATH/$JQ-$VERSION"
        
        CheckSha256FileHash() {
            FILE_PATH="$1"
            SHA256="$2"
        
            if [ -f "$FILE_PATH" ]; then
                TEST=$(/bin/echo "$SHA256  $FILE_PATH" | /usr/bin/shasum -c 2>&1) || return 1
                return 0
            fi
        
            return 1
        }
        
        SetLockedDownPermissions() {
            /bin/chmod u+rwx "$1"
            /bin/chmod go-rwx "$1"
            /usr/sbin/chown "$(/usr/bin/whoami)":"$(/usr/bin/id -g -nr)" "$1"
        }
        
        CreateLockedDownFolder() {
            /bin/mkdir -p "$1"
            SetLockedDownPermissions "$1"
        }
        
        DownloadFile() {
            SOURCE="$1"
            DESTINATION="$2"
            /usr/bin/curl -s "$SOURCE" -o "$DESTINATION"
        }
        
        GetJQSHA256Hash() {
            case "$1" in
                'x86_64')
                    /bin/echo "5c0a0a3ea600f302ee458b30317425dd9632d1ad8882259fcaf4e9b868b2b1ef"
                    ;;
                *)
                    ExitWithFailureMessage "The CPU architecture '$1' is not supported. Failing execution." 'PRINT_JSON'
                    ;;
            esac
        }
        
        RandomString() {
            /usr/bin/openssl rand -base64 6
        }
        
        InstallJQ() {
            CreateLockedDownFolder "$PRODUCT_PATH"
        
            CPU_ARCH=$(/usr/bin/uname -m)
            JQ_SHA256=$(GetJQSHA256Hash "$CPU_ARCH")
        
            CheckSha256FileHash "$JQ_BINARY" "$JQ_SHA256" || {
                JQ_TEMP_BINARY="$PRODUCT_PATH/$(RandomString)"
        
                OS_NAME=$(/usr/bin/uname -s)
                REGION="us-east-1"
                S3_BUCKET="aws-fleet-manager-artifacts-us-east-1"
                S3_DNS="s3.us-east-1.amazonaws.com"
                SOURCE="https://$S3_BUCKET.$S3_DNS/$JQ/$VERSION/$OS_NAME/$CPU_ARCH/$JQ"
                DownloadFile "$SOURCE" "$JQ_TEMP_BINARY"
        
                CheckSha256FileHash "$JQ_TEMP_BINARY" "$JQ_SHA256" || {
                    /bin/rm -f "$JQ_TEMP_BINARY"
                    ExitWithFailureMessage "Downloading the $JQ binary failed. Failing execution."
                }
        
                /bin/mv "$JQ_TEMP_BINARY" "$JQ_BINARY"
            }
        
            SetLockedDownPermissions "$JQ_BINARY"
        }

        InstallJQ

        Main () {
            Counters=''
            timestamp=$(date +%s)
        
            Counters=$("${command_path}echo" "[ $timestamp ]" | "$JQ_BINARY" -c '{timestamp: .[0]}')
            processDetails=$("${command_path}echo" '{"data": {"processDetails": []}}' | "$JQ_BINARY" -c '.')
        
            Counters=$("$JQ_BINARY" -c --argjson Counters "$Counters" --argjson processDetails "$processDetails" -n '$Counters * $processDetails')
            cpuCounters=$("${command_path}echo" '{"data": {"systemDetails": {"totalCpuUsage": []}}}' | "$JQ_BINARY" -c '.')
        
            Counters=$("$JQ_BINARY" -c --argjson Counters "$Counters" --argjson output "$cpuCounters" -n '$Counters * $output')
        
            zero=0
            one=1
            two=2
            three=3
            four=4
            five=5
            six=6
            seven=7
            eight=8
            nine=9
            ten=10
        
            while read -r -a line; do
                getTZ="${line[four]}"
            done <<< "$(date)"
        
            i=1
            n=0
        
            cpuUsage=0
            memUsage=0
            while read -r -a line; do
                if [[ n -ge i ]]; then
                    cpuUsage=`echo $cpuUsage + ${line[eight]} | bc`
                    memUsage=`echo $memUsage + ${line[nine]} | bc`
        
                    pidValue=\"${line[zero]}\"
                    cpuValue=\"${line[eight]}\"
                    memoryValue=\"${line[nine]}\"
                    commandValue="${line[ten]}"
                    startTime="${line[two]} ${line[three]} ${line[five]} ${line[four]} ${getTZ}"
                    userValue="${line[six]}"
                    output=$("${command_path}echo" "[ "$pidValue", "$cpuValue", "$memoryValue", \"$commandValue\", \"$startTime\", \"$userValue\"]" | "$JQ_BINARY" -c '{"id": .[0], "cpu": .[1], "memory": .[2], "name": .[3], "startTime": .[4], "user": .[5]}')
                    Counters=$("${command_path}echo" "$Counters" | "$JQ_BINARY" -c --argjson output "$output" '.data.processDetails += [$output]')
                fi
                ((n++))
            done <<< "$(ps -eo pid,lstart,user,etime,pcpu,pmem,command -m)"
            cpuUsage=\"$cpuUsage\"
            memUsage=\"$memUsage\"
        
            output=$("${command_path}echo" "[ "$cpuUsage"]" | "$JQ_BINARY" -c '.[0]')
            Counters=$("${command_path}echo" "$Counters" | "$JQ_BINARY" -c --argjson output "$output" '.data.systemDetails.totalCpuUsage = $output')
        
            memCounters=$("${command_path}echo" '{"data": {"systemDetails": {"totalMemoryUsage": []}}}' | "$JQ_BINARY" -c '.')
            Counters=$("$JQ_BINARY" -c --argjson Counters "$Counters" --argjson output "$memCounters" -n '$Counters * $output')
            output=$("${command_path}echo" "[ "$memUsage"]" | "$JQ_BINARY" -c '.[0]')
            Counters=$("${command_path}echo" "$Counters" | "$JQ_BINARY" -c --argjson output "$output" '.data.systemDetails.totalMemoryUsage = $output')
        
            StringOutput="__FM_SESSION_OUTPUT__"
            StringOutput+=$Counters
        
            "${command_path}echo" "$StringOutput"
        }
        
        PrintInteractiveStatements='{{ PrintInteractiveStatements }}'
        
        while [ "$Reply" != 'q' ]; do
            Main
            "${command_path}echo"
        
            if [ "$PrintInteractiveStatements" = 'Yes' ]; then
                /usr/bin/printf 'Press q to end the loop or press any other key to continue.'
            fi
        
            read -r Reply
        done
    runAsElevated: true

