#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-CreateNewDocumentDBInstanceSOP_2020-09-21

            ## Intent
            Used to create a new instance in a specified AZ/Region

            ## Type
            SOP

            ## Risk
            Small

            ## Requirements
              * Available DocumentDB Cluster

            ## Permissions required for AutomationAssumeRole
              * rds:CreateDBInstance
              * rds:DescribeDBClusters
              * rds:DescribeDBInstances
              * rds:DescribeDBSubnetGroups

            ## Cancellation behavior
            Fail

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) DBClusterIdentifier
              * type: String
              * description: DocumentDB Cluster Identifier

            ### (Optional) DBInstanceIdentifier
              * type: String
              * description: DocumentDB Instance Identifier

            ### (Optional) DBInstanceClass
              * type: String
              * default: db.t3.medium
              * description: Instance [class](https://docs.aws.amazon.com/documentdb/latest/developerguide/db-instance-classes.html#db-instance-classes-by-region)

            ### (Optional) AvailabilityZone
              * type: String
              * description: Availability Zone to place DocDB Instance

            ### (Optional) Engine:
              * type: String
              * default: docdb
              * description: DocumentDB Engine

            ## Details
            The document creates a new DocumentDB instance using API and waits for the instance to become available.

            ## Steps executed in normal flow
              * RecordStartTime
              * GetClusterAZ
              * CreateNewInstance
              * WaitUntilCreatedInstanceAvailable
              * OutputRecoveryTime

            ## Outputs
            ### OutputRecoveryTime.RecoveryTime
              * type: Integer
              * description: SOP execution time in seconds

schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
outputs:
  - OutputRecoveryTime.RecoveryTime

parameters:
  DBInstanceIdentifier:
    type: String
    description: (Optional) DocDb Instance Identifier
    default: ''
  DBClusterIdentifier:
    type: String
    description: (Required) DocDb Cluster Identifier
  DBInstanceClass:
    type: 'String'
    default: 'db.t3.medium'
    description: '(Optional) Instance class. Please refer to: https://docs.aws.amazon.com/documentdb/latest/developerguide/db-instance-classes.html#db-instance-classes-by-region'
  AvailabilityZone:
    type: String
    default: ''
    description: (Optional) Availability Zone to place DocDb Instance
  Engine:
    type: String
    default: 'docdb'
    description: (Optional) DocDb Engine
  AutomationAssumeRole:
    type: String
    description: >-
      (Required) The ARN of the role that allows Automation to perform
      the actions on your behalf. If no role is specified, Systems Manager Automation
      uses your IAM permissions to run this document.

mainSteps:
  - name: RecordStartTime
    description: Start recording execution time
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def start_time(events, context):
            return datetime.now(timezone.utc).isoformat()
        
        


  - name: GetClusterAZ
    description: Get DocDb cluster availability zones
    action: aws:executeScript
    onFailure: Abort
    outputs:
      - Name: CurrentClusterAZs
        Selector: $.Payload.cluster_azs
        Type: StringList
    inputs:
      Runtime: python3.8
      Handler: get_cluster_az
      InputPayload:
        DBClusterIdentifier: '{{ DBClusterIdentifier }}'
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def get_cluster_az(events, context):
            try:
                config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
                docdb = boto3.client('docdb', config=config)
                response = docdb.describe_db_clusters(DBClusterIdentifier=events['DBClusterIdentifier'])
                subnet_group_name = response['DBClusters'][0]['DBSubnetGroup']
                db_clusters_resp = docdb.describe_db_subnet_groups(DBSubnetGroupName=subnet_group_name)
                cluster_azs = [x['SubnetAvailabilityZone']['Name'] for x in db_clusters_resp['DBSubnetGroups'][0]['Subnets']]
                return {'cluster_azs': cluster_azs}
            except Exception as e:
                print(f'Error: {e}')
                raise
        
        


  - name: CreateNewInstance
    description: Create a new instance in a specified AZ/Region
    action: aws:executeScript
    onFailure: Abort
    inputs:
      Runtime: python3.8
      Handler: create_new_instance
      InputPayload:
        DBClusterIdentifier: '{{ DBClusterIdentifier }}'
        DBInstanceIdentifier: '{{ DBInstanceIdentifier }}'
        DBInstanceClass: '{{ DBInstanceClass }}'
        DBClusterAZs: '{{ GetClusterAZ.CurrentClusterAZs }}'
        AvailabilityZone: '{{ AvailabilityZone }}'
        Engine: '{{ Engine }}'
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def create_new_instance(events, context):
            try:
                config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
                docdb = boto3.client('docdb', config=config)
                az = events.get('AvailabilityZone')
                instance_az = az if az else random.choice(events['DBClusterAZs'])
                response = docdb.create_db_instance(
                    DBInstanceIdentifier=events['DBInstanceIdentifier'],
                    DBInstanceClass=events['DBInstanceClass'],
                    Engine=events['Engine'],
                    AvailabilityZone=instance_az,
                    DBClusterIdentifier=events['DBClusterIdentifier']
                )
                return {'instance_az': response['DBInstance']['AvailabilityZone']}
            except Exception as e:
                print(f'Error: {e}')
                raise
        
        


  - name: WaitUntilCreatedInstanceAvailable
    description: Wait until the created instance is in status available
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: docdb
      Api: DescribeDBInstances
      Filters:
        - Name: "db-cluster-id"
          Values:
            - '{{ DBClusterIdentifier }}'
      PropertySelector: "$.DBInstances..DBInstanceStatus"
      DesiredValues:
        - available

  - name: OutputRecoveryTime
    description: Calculate execution time
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: recovery_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def recovery_time(events, context):
            return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds
        
        

      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'
	2022-06-28T17:51:54.596000+02:00	YAML	Automation	3	AWSResilienceHub-CreateNewDocumentDBInstanceSOP_2020-09-21	Active
