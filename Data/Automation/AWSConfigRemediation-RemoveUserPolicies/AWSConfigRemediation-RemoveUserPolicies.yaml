schemaVersion: "0.3"
description: |
  ### Document name - AWSConfigRemediation-RemoveUserPolicies

  ## What does this document do?
  The AWSConfigRemediation-RemoveUserPolicies runbook deletes the AWS Identity and Access Management (IAM) inline policies and detaches any managed policies attached to the IAM user you specify using the [DeleteUserPolicy](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteUserPolicy.html) and
  [DetachUserPolicy](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DetachUserPolicy.html) APIs.

  ## Input Parameters
  * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
  * IAMUserID: (Required) The ID of the IAM user you want to remove policies from.
  * PolicyType: (Optional) The type of IAM policies you want to remove from IAM user.

  ## Output Parameters
  * RemoveUserPoliciesAndVerify.Output: Success message and HTTP response metadata or failure exception.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+
  IAMUserID:
    type: String
    description: (Required) The ID of the IAM user you want to remove policies from.
    allowedPattern: ^AIDA[A-Z0-9]+$
  PolicyType:
    type: String
    description: (Optional) The type of IAM policies you want to remove from IAM user.
    default: All
    allowedValues:
      - Inline
      - Managed
      - All
outputs:
  - RemoveUserPoliciesAndVerify.Output
mainSteps:
  - name: RemoveUserPoliciesAndVerify
    action: aws:executeScript
    description: |
      ## RemoveUserPoliciesAndVerify
      Deletes and detaches IAM policies from the IAM user you specify in the IAMUserID parameter.
      ## Outputs
      * Output: Success message and HTTP response metadata or failure exception.
    isEnd: true
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        IAMUserID: "{{ IAMUserID }}"
        PolicyType: "{{ PolicyType }}"
      Script: |-
        from time import sleep

        import boto3

        PAGE_SIZE = 1000
        THROTTLE_PERIOD = 0.05


        def get_username(iam_client, iam_user_id):
            paginator = iam_client.get_paginator("list_users")
            page_iterator = paginator.paginate(PaginationConfig={"PageSize": PAGE_SIZE})
            for page in page_iterator:
                for user in page["Users"]:
                    username = user["UserName"]
                    user_id = user["UserId"]
                    if user_id == iam_user_id:
                        return username
                sleep(THROTTLE_PERIOD)


        def get_inline_policies(iam_client, iam_username):
            paginator = iam_client.get_paginator("list_user_policies")
            page_iterator = paginator.paginate(UserName=iam_username, PaginationConfig={"PageSize": PAGE_SIZE})
            policies = []
            for page in page_iterator:
                policy_names = page["PolicyNames"]
                policies.extend(policy_names)
                sleep(THROTTLE_PERIOD)
            return policies


        def delete_inline_policies(iam_client, iam_username, user_policies):
            responses = []
            for policy in user_policies:
                response = iam_client.delete_user_policy(UserName=iam_username, PolicyName=policy)
                responses.append(response)
            return responses


        def get_managed_policies(iam_client, iam_username):
            paginator = iam_client.get_paginator("list_attached_user_policies")
            page_iterator = paginator.paginate(UserName=iam_username, PaginationConfig={"PageSize": PAGE_SIZE})
            policies = []
            for page in page_iterator:
                for policy in page["AttachedPolicies"]:
                    policies.append(policy["PolicyArn"])
                sleep(THROTTLE_PERIOD)
            return policies


        def detach_managed_policies(iam_client, iam_username, attached_user_policies):
            responses = []
            for policy in attached_user_policies:
                response = iam_client.detach_user_policy(UserName=iam_username, PolicyArn=policy)
                responses.append(response)
            return responses


        def check_existing_policies(iam_user_id, policy_type, inline_policies_response, managed_policies_response):
            error_message = None
            if policy_type == "All" and not inline_policies_response and not managed_policies_response:
                error_message = f"AWS IAM user with user id, {iam_user_id}, has no inline user policies and no managed user policies."
            if policy_type == "Inline" and not inline_policies_response:
                error_message = f"AWS IAM user with user id, {iam_user_id}, has no inline user policies."
            if policy_type == "Managed" and not managed_policies_response:
                error_message = f"AWS IAM user with user id, {iam_user_id}, has no managed user policies."

            if error_message is not None:
                raise Exception(error_message)


        def verify_user_policy_status(iam_client, iam_username, policy_type):
            if policy_type in ["Inline", "All"]:
                inline_policies = get_inline_policies(iam_client, iam_username)
            if policy_type in ["Managed", "All"]:
                managed_policies = get_managed_policies(iam_client, iam_username)

            if policy_type == "All":
                if not inline_policies and not managed_policies:
                    return {"output": "Verification of AWS IAM user, deletion of inline user policies and detachment of managed user policies is successful."}
                if inline_policies and managed_policies:
                    error_message = f"VERIFICATION FAILED. AWS IAM USER WITH USERNAME, {iam_username}, DELETION OF INLINE USER POLICIES AND DETACHMENT OF MANAGED USER POLICIES UNSUCCESSFUL."
                if inline_policies:
                    error_message = f"VERIFICATION FAILED. AWS IAM USER WITH USERNAME, {iam_username}, DELETION OF INLINE USER POLICIES UNSUCCESSFUL."
                if managed_policies:
                    error_message = f"VERIFICATION FAILED. AWS IAM USER WITH USERNAME, {iam_username}, DETACHMENT OF MANAGED USER POLICIES UNSUCCESSFUL."
            if policy_type == "Inline":
                if not inline_policies:
                    return {"output": "Verification of AWS IAM user, deletion of inline user policies is successful."}
                else:
                    error_message = f"VERIFICATION FAILED. AWS IAM WITH USERNAME, {iam_username}, DELETION OF INLINE USER POLICIES UNSUCCESSFUL."
            if policy_type == "Managed":
                if not managed_policies:
                    return {"output": "Verification of AWS IAM user, detachment of managed policies is successful."}
                else:
                    error_message = f"VERIFICATION FAILED. AWS IAM WITH USERNAME, {iam_username}, DETACHMENT OF MANAGED USER POLICIES UNSUCCESSFUL."

            if error_message:
                raise Exception(error_message)


        def handler(event, context):
            iam_client = boto3.client("iam")
            iam_user_id = event["IAMUserID"]
            policy_type = event["PolicyType"]

            iam_username = get_username(iam_client, iam_user_id)
            if iam_username is None:
                error_message = f"IAM user with user id, {iam_user_id}, does not exist."
                raise Exception(error_message)

            inline_policies_response = []
            managed_policies_response = []
            if policy_type in ["Inline", "All"]:
                inline_policies = get_inline_policies(iam_client, iam_username)
                if inline_policies:
                    inline_policies_response = delete_inline_policies(iam_client, iam_username, inline_policies)
            if policy_type in ["Managed", "All"]:
                managed_policies = get_managed_policies(iam_client, iam_username)
                if managed_policies:
                    managed_policies_response = detach_managed_policies(iam_client, iam_username, managed_policies)

            check_existing_policies(iam_user_id, policy_type, inline_policies_response, managed_policies_response)

            results = verify_user_policy_status(iam_client, iam_username, policy_type)
            if policy_type == "All":
                results["delete_inline_policies_http_response"] = inline_policies_response
                results["detach_managed_policies_http_response"] = managed_policies_response
            if policy_type == "Inline":
                results["delete_inline_policies_http_response"] = inline_policies_response
            if policy_type == "Managed":
                results["detach_managed_policies_http_response"] = managed_policies_response
            return results
    outputs:
      - Name: Output
        Selector: $.Payload
        Type: StringMap
	2021-04-21T17:12:46.025000+02:00	YAML	Automation	1	AWSConfigRemediation-RemoveUserPolicies	Active
