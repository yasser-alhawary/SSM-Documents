# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-ForceECSServiceTaskFailureTest_2020-04-01

            ## Intent
            Restore ECS services when service task failure (compatible on EC2 and Fargate)

            ## Type
            Test

            ## Risk
            High

            ## Requirements:
              * Launch Amazon ECS cluster [Get setup for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html)
              * Amazon cloudwatch alarm is setup for downtime metric expression. Include link for the same.
                Should include the same description in description for parameters for DowntimeAlarmName as well.
                We don't need to mention "TreatMissingData" property as "missing" runs.

            ## Permissions required for AutomationAssumeRole:
              * ecs:DescribeClusters
              * ecs:DescribeServices
              * ecs:ListTasks
              * ecs:StopTask
              * cloudwatch:DescribeAlarms
              * cloudwatch:DescribeAlarmHistory

            ## Supports Rollback
            No

            ## Cancellation behavior
            Fail

            ## Inputs:
            ### (Required) ClusterName
              * type: String
              * description: The name of the ECS Cluster

            ### (Required) ServiceName
              * type: String
              * description: The name of ECS Service

            ### (Required) AutomationAssumeRole
              * type: String
              * description: The ARN of the role that allows Automation to perform the actions on your behalf.

            ### (Required) CanaryAlarmName
              * type: String
              * description: The Synthetic Alarm which should be green within recovery time.

            ### (Optional) PercentageOfTasksToStop
              * type: Integer
              * description: Percentage of tasks to be stopped. Only positive integer values,
                             greater than 0 and less than 100.

            ## Details
            Stop the work of a certain percentage of tasks. Waits for the tasks to automatically recover successfully.

            Please, use the following AWS documentation guidelines if something was left in a bad state.
              * [Runtime Troubleshooting](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/troubleshooting.html)

            ## Steps executed in normal flow:
              * AssertAlarmToBeGreenBeforeTest
              * InjectFailure
              * FailWithIncorrectParams
              * StopSelectedTasks
              * WaitTasksToBeRestored
              * AssertAlarmToBeGreen

            ## Outputs
              None


schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  ClusterName:
    type: String
    description: (Required) The name of the ECS Cluster
  ServiceName:
    type: String
    description: (Required) The name of ECS Service
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  CanaryAlarmName:
    type: String
    description: (Required) The Synthetic Alarm which should be green within recovery time.
  PercentageOfTasksToStop:
    type: Integer
    description: (Optional) Percentage of tasks to be stopped. Only positive integer values, greater than 0 and less than 100.
    default: 30
mainSteps:
  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time.
    maxAttempts: 1
    timeoutSeconds: 300
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{CanaryAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]

  - name: InjectFailure
    action: 'aws:branch'
    description: check PercentageOfTasksToStop is greater than 0 and less than 100.
    inputs:
      Choices:
        - Or:
          - Variable: "{{PercentageOfTasksToStop}}"
            NumericLesser: 1
          - Variable: "{{PercentageOfTasksToStop}}"
            NumericGreater: 100
          NextStep: FailWithIncorrectParams
      Default:
        StopSelectedTasks

  - name: FailWithIncorrectParams
    action: aws:executeScript
    description: Fail if PercentageOfTasksToStop is less than 1 or greater than 100.
    inputs:
      Runtime: python3.8
      Handler: raise_exception
      InputPayload:
        ErrorMessage: "PercentageOfTasksToStop should be greater than 0 and less than 100."
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def raise_exception(events, context):
            """
            Raises AssertionError exception with defined error message
            You can pass additional arguments to run python format() on the message.
            Example:
        
            ErrorMessage: "test {test1} {test2}"
            test1: "replaced1"
            test2: "replaced2"
        
            will render in
            `test replaced1 replaced2`
        
        
            :param events: dict with the following keys:
                * ErrorMessage: error message to return, you can add placeholders in {} and replace them with other parameters
                * any_key: will replace placeholder {any_key} in ErrorMessage
            :param context:
            :return: None
            """
            required_params = [
                'ErrorMessage'
            ]
        
            for key in required_params:
                if key not in events:
                    raise KeyError(f'Requires {key} in events')
        
            format_dict = {k: v for k, v in events.items() if k != 'ErrorMessage'}
            raise AssertionError(events['ErrorMessage'].format(**format_dict))
        
        

    isEnd: true

  - name: StopSelectedTasks
    action: aws:executeScript
    description: Stop percentage of tasks
    inputs:
      Runtime: python3.8
      Handler: stop_selected_tasks
      Script: |-
        import boto3
        from botocore.config import Config
        import logging
        
        from botocore.exceptions import ClientError
        
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        
        

        def check_required_params(required_params, events):
            for key in required_params:
                if key not in events:
                    raise KeyError(f'Requires {key} in events')
        
        

        def stop_selected_tasks(events, context):
            """
            Stop NumberOfTasksToStop or total number of tasks running
            if NumberOfTasksToStop is greater than the total number.
            :param events: The object which contains passed parameters from SSM document
             * `ServiceName` - Required. Name of ECS Service
             * `ClusterName` - Required. Name of ECS Cluster
             * `NumberOfTasksToStop` - Required. Number of tasks to stop
            :param context: context
            :return: True or error
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ecs_client = boto3.client('ecs', config=config)
        
            paginator = ecs_client.get_paginator('list_tasks')
            pages = paginator.paginate(serviceName=events['ServiceName'],
                                       cluster=events['ClusterName'],
                                       desiredStatus='RUNNING')
        
            desired_count = ecs_client.describe_services(services=[events['ServiceName']],
                                                         cluster=events['ClusterName'])["services"][0]["desiredCount"]
        
            percentage_of_task_to_stop = events['PercentageOfTasksToStop']
            number_of_task_to_stop = 0
        
            if desired_count:
                number_of_task_to_stop = round(desired_count * percentage_of_task_to_stop / 100)
        
            tasks_stopped = 0
            for page in pages:
                task_arns = page.get('taskArns')
                for task_arn in task_arns:
                    if tasks_stopped >= number_of_task_to_stop:
                        break
                    ecs_client.stop_task(
                        cluster=events['ClusterName'],
                        task=task_arn
                    )
                    tasks_stopped += 1
        
            return True
        
        

      InputPayload:
        ServiceName: '{{ServiceName}}'
        ClusterName: '{{ClusterName}}'
        PercentageOfTasksToStop: '{{PercentageOfTasksToStop}}'

  - name: WaitForServiceToBeRestored
    action: aws:executeScript
    description: Wait for all status tasks in ECS application to be in "RUNNING" state
    inputs:
      Runtime: python3.8
      Handler: wait_services_stable
      Script: |-
        import boto3
        from botocore.config import Config
        import logging
        
        from botocore.exceptions import ClientError
        
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        
        

        def check_required_params(required_params, events):
            for key in required_params:
                if key not in events:
                    raise KeyError(f'Requires {key} in events')
        
        

        def wait_services_stable(events, context):
            """
            Wait while service will be stable.
            :param events: The object which contains passed parameters from SSM document
             * `ServiceName` - Required. Name of ECS Service
             * `ClusterName` - Required. Name of ECS Cluster
            :param context: context
            :return: True or error
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ecs_client = boto3.client('ecs', config=config)
        
            cluster_name = events['ClusterName']
            service = events.get('ServiceName')
        
            if service:
                services = [service]
            else:
                services = []
                paginator = ecs_client.get_paginator('list_services')
                pages = paginator.paginate(cluster=cluster_name)
        
                for page in pages:
                    service_arns = page.get('serviceArns')
                    services.extend(service_arns)
        
            waiter = ecs_client.get_waiter('services_stable')
            waiter.wait(
                cluster=cluster_name,
                services=services,
                WaiterConfig={
                    'Delay': 15,
                    'MaxAttempts': 20
                }
            )
            return True

      InputPayload:
        ServiceName: '{{ServiceName}}'
        ClusterName: '{{ClusterName}}'

  - name: AssertAlarmToBeGreen
    action: aws:assertAwsResourceProperty
    description: Wait for the alarm to be green after test is complete
    maxAttempts: 10
    timeoutSeconds: 600
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{CanaryAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
    isEnd: true
