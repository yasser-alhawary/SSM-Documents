schemaVersion: "0.3"
description: |
   ### Document name - AWSConfigRemediation-EnableCWLoggingForSessionManager

   ## What does this document do?
   This runbook enables AWS Systems Manager Session Manager (Session Manager) sessions to store output logs to an Amazon CloudWatch (CloudWatch) log group
   using [CreateDocument](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateDocument.html) or [UpdateDocument](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_UpdateDocument.html) API.

   ## Input Parameters
   * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
   * DestinationLogGroup: (Required) The name of the CloudWatch log group.

   ## Output Parameters
   * EnableCWLoggingAndVerify.Output: The standard HTTP response from the GetDocument API.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@/-]+$
  DestinationLogGroup:
    type: String
    description: (Required) The name of the CloudWatch log group.
    allowedPattern: "[\\.\\-_/#A-Za-z0-9]+"
outputs:
  - EnableCWLoggingAndVerify.Output
mainSteps:
  -
    name: EnableCWLoggingAndVerify
    action: "aws:executeScript"
    description: |
      ## EnableCWLoggingAndVerify
      Accepts the CloudWatch log group to update the document which stores Session Manager session output logs preferences, or creates one if it doesn't exist.
      ## Outputs
      * Output: The standard HTTP response from the GetDocument API.
    timeoutSeconds: 600
    isEnd: true
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        cloudWatchLogGroupName: "{{ DestinationLogGroup }}"
      Script: |-
        import boto3
        import json

        standard_document_content = '''
        {{
          "schemaVersion": "1.0",
          "description": "Document to hold regional settings for Session Manager",
          "sessionType": "Standard_Stream",
          "inputs": {{
            "s3BucketName": "",
            "s3KeyPrefix": "",
            "s3EncryptionEnabled": true,
            "cloudWatchLogGroupName": "{0}",
            "cloudWatchEncryptionEnabled": true,
            "kmsKeyId": "",
            "runAsEnabled": false,
            "runAsDefaultUser": ""
          }}
        }}
        '''

        def is_document_exists(ssm_client, document_name):
            try:
                document_response = ssm_client.get_document(Name=document_name)
                return json.loads(document_response["Content"])
            except ssm_client.exceptions.InvalidDocument:
                return False

        def update_ssm_document_preference(ssm_client, updated_content, document_name):
            ssm_client.update_document(Content=updated_content,
                                       Name=document_name,
                                       DocumentVersion="$LATEST",
                                       DocumentFormat="JSON")

            # Setting the default version of the document to $LATEST
            document_response = ssm_client.describe_document(Name=document_name)
            document_status = document_response["Document"]["Status"]
            latest_version = document_response["Document"]["LatestVersion"]
            if document_status == "Active":
                ssm_client.update_document_default_version(Name=document_name, DocumentVersion=latest_version)

        def handler(event, context):
            ssm_client = boto3.client("ssm")

            document_name = "SSM-SessionManagerRunShell"
            log_group_name = event["cloudWatchLogGroupName"]
            new_document_content = standard_document_content.format(log_group_name)

            document_content = is_document_exists(ssm_client, document_name)
            if document_content:
                document_content["inputs"]["cloudWatchLogGroupName"] = log_group_name
                updated_content = json.dumps(document_content)
                update_ssm_document_preference(ssm_client, updated_content, document_name)
            else:
                ssm_client.create_document(Content=new_document_content,
                                           Name=document_name,
                                           DocumentType="Session")

            document_response = ssm_client.get_document(Name=document_name)
            configured_log_group_name = json.loads(document_response["Content"])["inputs"]["cloudWatchLogGroupName"]
            if document_response and configured_log_group_name == log_group_name:
                return {
                    "output": {
                        "Message": "Verification of EnableCWLoggingAndVerify is successful.",
                        "HTTPResponse": document_response["ResponseMetadata"]
                    }
                }
            else:
                raise Exception("AWS Systems Manager 'SSM-SessionManagerRunShell' DOCUMENT CREATE OR UPDATE FAILED.",
                                document_response["ResponseMetadata"])

    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: StringMap	2021-03-12T17:08:35.731000+01:00	YAML	Automation	1	AWSConfigRemediation-EnableCWLoggingForSessionManager	Active
