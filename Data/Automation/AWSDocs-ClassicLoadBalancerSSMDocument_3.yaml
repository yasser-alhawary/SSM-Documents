===
This Automation document
   sets up a Classic Load Balancer for an EC2 instance. It Automates the [Create
   a Classic Load Balancer Tutorial](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-getting-started.html).
   

Once this document is executed, a load balancer that receives public HTTP
   traffic and sends it to your EC2 instances will be created. Visiting the load
   balancer DNS name (found in the outputLoadBalancerDNSName step output or the load
   balancer tab in the console) will redirect to an EC2 instance and show a page
   with hello world! 

Prerequisites
---
To run the following Automation document,
   you must have permissions to run Automation workflows and create the following
   resources. The Automation workflow runs in the context of the current Amazon Identity
   and Access Management (IAM) user.
    
Resources created 
---
  * A virtual
   private cloud (VPC) with a route table, public subnet via an internet gateway,
   network ACL, and security group
  * A security group that allows access to HTTP/80

    * An IAM instance profile role that enables the EC2 instance to register with
   Amazon Systems Manager
  * An EC2 instance that is launched using the latest
   Amazon Linux AMI
  * A Classic Load Balancer that will redirect traffic to an
   EC2 instance

  Cleanup
 ---
  To remove resources created by this Automation
   document, navigate to the [Amazon CloudFormation console](https://console.aws.amazon.com/cloudformation/home)
   and delete the stack created.

*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-ClassicLoadBalancerSSMDocument).*"
mainSteps:
- action: aws:createStack
  inputs:
    Capabilities:
    - CAPABILITY_NAMED_IAM
    StackName: ClassicLoadBalancerStack
    TemplateBody: "Parameters :
  LatestAmazonLinuxAmiId :
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'

          Default: '/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2'

      Resources:
  ManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:

            AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:

              - Effect: Allow
          Principal:
            Service:
     
             - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action:
       sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

            Path: '/'
      Policies:
      - PolicyName: putParameter
      
        PolicyDocument:
          Version: '2012-10-17'
          Statement:

                # Allows access to Parameter Store parameters specific to the tutorial

                - Effect: Allow
            Action:
            - ssm:PutParameter

                  Resource: 'arn:aws:ssm:*:*:parameter/Tutorials/Passwords/AL/*'

        ManagedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:

            Path: '/'
      Roles:
      - !Ref ManagedInstanceRole
      InstanceProfileName:
       ManagedInstanceProfileClassicLoadBalancer
  VPC:
    Type: 'AWS::EC2::VPC'

          Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true

            EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:

            - Key: Name
        Value: Automation-Classic-Load-Balancer
  InternetGateway:

          Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
     
       - Key: Name
        Value: Automation-Classic-Load-Balancer
  VPCGatewayAttachment:

          Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref
       VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublic:
    Type:
       'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs
       '']
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
     
       VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Automation-Classic-Load-Balancer

        RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
  
          VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Automation-Classic-Load-Balancer

        RouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'

          Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref
       RouteTablePublic
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'

          DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref
       RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
       !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'

          Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
  
            Value: Automation-Classic-Load-Balancer
  SubnetNetworkAclAssociationPublic:

          Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
       !Ref SubnetPublic
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:

          Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
       !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction:
       allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:

          Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
       !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction:
       allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  InstanceSecurityGroup:

          Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
       'Security Group created for AWS-Classic-Load-Balancer'
      GroupName: Automation-Classic-Load-Balancer-HTTP

            SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort:
       80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags: 
    
          - Key: Name
          Value: Automation-Classic-Load-Balancer
      VpcId:
       !Ref VPC
  LinuxEc2Instance: 
    Type: AWS::EC2::Instance
    Properties:
       
      InstanceType: t2.small
      ImageId: !Ref LatestAmazonLinuxAmiId

            NetworkInterfaces: 
        - AssociatePublicIpAddress: 'true'
   
             DeviceIndex: '0'
          GroupSet: 
            - Ref: 'InstanceSecurityGroup'

                SubnetId: 
            Ref: 'SubnetPublic'
      IamInstanceProfile:
       !Ref ManagedInstanceProfile
      Tags:
        - Key: Name
          Value:
       Automation-Classic-Load-Balancer
  ClassicLoadBalancer: 
    Type: AWS::ElasticLoadBalancing::LoadBalancer

          Properties:
      HealthCheck:
        HealthyThreshold: 10
       
       Interval: 30
        Target: HTTP:80/
        Timeout: 5
        UnhealthyThreshold:
       2
      Instances:
        - !Ref LinuxEc2Instance 
      Listeners:

              - InstancePort: 80
          InstanceProtocol: HTTP
          LoadBalancerPort:
       80
          Protocol: HTTP
      LoadBalancerName: tutorialLoadBalancer

            SecurityGroups:
        - !Ref InstanceSecurityGroup
      Subnets:

              - !Ref SubnetPublic

Outputs:
  TemplateID:
    Description: 'Template
       id.'
    Value: 'vpc'
  SubnetPublic:
    Description: 'Subnet A public.'

          Value: !Ref SubnetPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublic'"
  name: createStack
  onFailure: step:deleteStack
- action: aws:runCommand
  description: 'This step outputs the public DNS address for the EC2 instance launched.
    You can use this public DNS address to test your instance in subsequent steps.
    Select the radio button next to the Step execution ID to display the public DNS
    address of the EC2 instance.

    '
  inputs:
    Comment: Outputting public DNS address of EC2 instance
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - 'curl -H "X-aws-ec2-metadata-token: $(curl -X PUT ''http://169.254.169.254/latest/api/token''
        -sq -H ''X-aws-ec2-metadata-token-ttl-seconds: 21600'' 2>/dev/null)" -sq http://169.254.169.254/latest/meta-data/public-hostname'
      executionTimeout: '3600'
      workingDirectory: ''
    Targets:
    - Key: tag:Name
      Values:
      - Automation-Classic-Load-Balancer
  name: outputPublicDNS
  onFailure: step:deleteStack
- action: aws:runCommand
  description: 'his step starts with installing the latest security updates and bug
    fixes. After updates have been installed, the Apache web server (httd24), MySQL
    (mysql57-server), and PHP software packages (php72 and php72-mysqlnd) are installed
    on the instance. The Apache web server service is then configured to start automatically.

    Once this step is complete, you can test your web server by entering the public
    DNS address (or the public IP address of your instance) in a web browser. You
    should see the Apache test page.'
  inputs:
    Comment: Installing LAMP server
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - sudo yum update -y
      - sudo yum install -y httpd24 php72 mysql57-server php72-mysqlnd
      - sudo service httpd start
      - sudo chkconfig httpd on
      - chkconfig --list httpd
      - 'curl -H "X-aws-ec2-metadata-token: $(curl -X PUT ''http://169.254.169.254/latest/api/token''
        -sq -H ''X-aws-ec2-metadata-token-ttl-seconds: 21600'' 2>/dev/null)" -sq http://169.254.169.254/latest/meta-data/public-hostname'
      executionTimeout: '3600'
      workingDirectory: ''
    Targets:
    - Key: tag:Name
      Values:
      - Automation-Classic-Load-Balancer
  name: installLAMPServer
  onFailure: step:deleteStack
- action: aws:runCommand
  description: '**Setting File Permissions**


    This step adds your user (```ec2-user```) to the ```apache``` group. After this,
    the group ownership of ```/var/www``` and its contents is changed to the ```apache```
    group. The Automation then adds group write permissions and sets the group ID
    on future subdirectories for the directory ```/var/www``` and its subdirectories.'
  inputs:
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - sudo usermod -a -G apache ec2-user
      - groups ec2-user
      - sudo chown -R ec2-user:apache /var/www
      - sudo chmod 2775 /var/www
      - find /var/www -type d -exec sudo chmod 2775 {} ;
      - find /var/www -type f -exec sudo chmod 0664 {} ;
      executionTimeout: '3600'
    Targets:
    - Key: tag:Name
      Values:
      - Automation-Classic-Load-Balancer
  name: setFilePermissions
  onFailure: step:deleteStack
- action: aws:runCommand
  inputs:
    DocumentName: AWS-RunShellScript
    Parameters:
      commands:
      - echo "<!DOCTYPE html><html><head><title>Example</title></head><body><p>Hello
        World!</p></body> </html>" > /var/www/html/index.html
      executionTimeout: '3600'
    Targets:
    - Key: tag:Name
      Values:
      - Automation-Classic-Load-Balancer
  name: createIndexHTML
  onFailure: step:deleteStack
- action: aws:executeAwsApi
  description: 'This step outputs the DNS address for the load balancer. Visiting
    this address should direct to the same page as visiting the public DNS address
    of the EC2 instance. Select the radio button next to the Step execution ID to
    display the DNS address of the load balancer.

    '
  inputs:
    Api: DescribeLoadBalancers
    LoadBalancerNames:
    - tutorialLoadBalancer
    Service: elb
  isEnd: true
  name: outputLoadBalancerDNSName
  onFailure: step:deleteStack
  outputs:
  - Name: LoadBalancerDNS
    Selector: $.LoadBalancerDescriptions[0].DNSName
    Type: String
- action: aws:deleteStack
  description: Cleans up cloudformation stack
  inputs:
    StackName: ClassicLoadBalancerStack
  name: deleteStack
schemaVersion: '0.3'
