# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-RestoreDocumentDBClusterFromPointInTimeSOP_2020-09-21

            ## Intent
            Used to restore a database to an old stable state from a Point in Time snapshot

            ## Type
            SOP

            ## Risk
            Small

            ## Requirements
              * Available DocumentDB Cluster with a recovery point

            ## Permissions required for AutomationAssumeRole
              * rds:CreateDBInstance
              * rds:DescribeDBClusters
              * rds:DescribeDBInstances
              * rds:ModifyDBCluster
              * rds:ModifyDBInstance
              * rds:RestoreDBClusterToPointInTime

            ##### In case cluster is encrypted with a KMS key
              * kms:CreateGrant
              * kms:DescribeKey

            ## Cancellation behavior
            Fail

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) DBClusterIdentifier
              * type: String
              * description: DocumentDB Cluster Identifier

            ### (Required) RestoreToDate
              * type: String
              * description: Available Point-in-Time date in UTC timezone following the pattern YYYY-MM-DDTHH:MM:SSZ
              * default: 'latest'

            ## Details
            The document restores DocumentDB cluster from a recovery point. The source cluster and instances are
            replaced by adding "-replaced" to their identifiers while the restored ones are renamed to have the original
            identifiers of the sources. The document then waits for cluster and instances to become available. Original
            cluster and identifiers are kept with the "-replaced" suffix. In case of issues users may need to remove
            recovered cluster and instances and remove the "-replaced" suffix from the original ones. If renaming
            failed, cluster and instances with the suffix "-restored" may remain and should be renamed manually or
            removed.

            ## Steps executed in normal flow
              * RecordStartTime
              * GetRecoveryPoint
              * BackupDbClusterMetadata
              * BackupDbClusterInstancesMetadata
              * RestoreClusterToPointInTime
              * RestoreDocDbClusterInstances
              * RenameReplacedDocDbCluster
              * WaitUntilReplacedInstancesAvailable
              * RenameReplacedDocDbInstances
              * WaitUntilRestoredInstancesAvailable
              * RenameRestoredDocDbInstances
              * RenameRestoredCluster
              * WaitUntilRenamedInstancesAvailable
              * OutputRecoveryTime

            ## Outputs
            ### OutputRecoveryTime.RecoveryTime
              * type: Integer
              * description: SOP execution time in seconds

            ### GetRecoveryPoint.RecoveryPoint
              * type: String
              * description: Used recovery point ID

            ### BackupDbClusterMetadata.BackupDbClusterInstancesCountValue
              * type: MapList
              * description: List of instances before recovery

            ### BackupDbClusterMetadata.BackupDbClusterSecurityGroupsId
              * type: StringList
              * description: List of cluster's security groups

            ### BackupDbClusterInstancesMetadata.DBClusterInstancesMetadata
              * type: StringMap
              * description: List of instances metadata before recovery

            ### RestoreClusterToPointInTime.RestoredClusterIdentifier
              * type: String
              * description: Cluster ID after recovery

            ### RestoreDocDbClusterInstances.RestoredInstancesIdentifiers
              * type: StringList
              * description: List of restored Instance IDs after recovery

schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
outputs:
  - OutputRecoveryTime.RecoveryTime
  - GetRecoveryPoint.RecoveryPoint
  - BackupDbClusterMetadata.BackupDbClusterInstancesCountValue
  - BackupDbClusterMetadata.BackupDbClusterSecurityGroupsId
  - BackupDbClusterInstancesMetadata.DBClusterInstancesMetadata
  - RestoreClusterToPointInTime.RestoredClusterIdentifier
  - RestoreDocDbClusterInstances.RestoredInstancesIdentifiers

parameters:
  DBClusterIdentifier:
    type: String
    description: (Required) DocDb Cluster Identifier
  RestoreToDate:
    type: String
    description: (Optional) Enter the available Point-in-Time date in UTC timezone following the pattern YYYY-MM-DDTHH:MM:SSZ
    default: 'latest'
  AutomationAssumeRole:
    type: String
    description: >-
      (Required) The ARN of the role that allows Automation to perform
      the actions on your behalf. If no role is specified, Systems Manager Automation
      uses your IAM permissions to run this document.

mainSteps:
  - name: RecordStartTime
    description: Start recording execution time
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def start_time(events, context):
            return datetime.now(timezone.utc).isoformat()
        
        


  - name: GetRecoveryPoint
    action: aws:executeScript
    description: Get Recovery Point
    onFailure: Abort
    outputs:
      - Name: RecoveryPoint
        Selector: $.Payload.RecoveryPoint
    inputs:
      Runtime: python3.8
      Handler: get_recovery_point_input
      InputPayload:
        DBClusterIdentifier: '{{ DBClusterIdentifier }}'
        RestoreToDate: '{{ RestoreToDate }}'
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def get_recovery_point_input(events, context):
            try:
                date = events['RestoreToDate']
                restorable_cluster_identifier = events['DBClusterIdentifier']
                if date == 'latest':
                    config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
                    docdb = boto3.client('docdb', config=config)
                    response = docdb.describe_db_clusters(DBClusterIdentifier=restorable_cluster_identifier)
                    print(response['DBClusters'][0]['LatestRestorableTime'].strftime("%Y-%m-%dT%H:%M:%S%Z"))
                    return {'RecoveryPoint': response['DBClusters'][0]['LatestRestorableTime'].strftime("%Y-%d-%mT%H:%M:%S%Z")}
                else:
                    return {'RecoveryPoint': date}
            except Exception as e:
                print(f'Error: {e}')
                raise
        
        


  - name: BackupDbClusterMetadata
    action: aws:executeAwsApi
    description: Backup restorable cluster metadata
    inputs:
      Service: docdb
      Api: DescribeDBClusters
      Filters:
        - Name: "db-cluster-id"
          Values:
            - '{{ DBClusterIdentifier }}'
    outputs:
      - Name: BackupDbClusterInstancesCountValue
        Selector: $.DBClusters[0].DBClusterMembers
        Type: MapList
      - Name: BackupDbClusterSecurityGroupsId
        Selector: $.DBClusters..VpcSecurityGroupId
        Type: StringList

  - name: BackupDbClusterInstancesMetadata
    action: aws:executeScript
    description: Backup current DbClusterInstances type
    onFailure: Abort
    outputs:
      - Name: DBClusterInstancesMetadata
        Selector: $.Payload.DBClusterInstancesMetadata
        Type: StringMap
    inputs:
      Runtime: python3.8
      Handler: backup_cluster_instances_type
      InputPayload:
        DBClusterIdentifier: '{{ DBClusterIdentifier }}'
        DBClusterInstances: '{{ BackupDbClusterMetadata.BackupDbClusterInstancesCountValue }}'
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def backup_cluster_instances_type(events, context):
            try:
                config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
                docdb = boto3.client('docdb', config=config)
                restorable_instances_metadata = {}
                instance_type = {}
                instances = events['DBClusterInstances']
                for instance in instances:
                    response = docdb.describe_db_instances(DBInstanceIdentifier=instance['DBInstanceIdentifier'])
                    print(response)
                    instance_id = instance['DBInstanceIdentifier']
                    instance_type[instance_id] = {
                        'DBInstanceClass': response['DBInstances'][0]['DBInstanceClass'],
                        'Engine': response['DBInstances'][0]['Engine'],
                        'AvailabilityZone': response['DBInstances'][0]['AvailabilityZone']
                    }
                    restorable_instances_metadata.update(instance_type)
                return {'DBClusterInstancesMetadata': restorable_instances_metadata}
            except Exception as e:
                print(f'Error: {e}')
                raise
        
        


  - name: RestoreClusterToPointInTime
    action: aws:executeScript
    description: Restore DocDb Cluster to provided date or last available point in time
    onFailure: Abort
    outputs:
      - Name: RestoredClusterIdentifier
        Selector: $.Payload.RestoredClusterIdentifier
        Type: String
    inputs:
      Runtime: python3.8
      Handler: restore_to_point_in_time
      InputPayload:
        DBClusterIdentifier: '{{ DBClusterIdentifier }}'
        RestoreToDate: '{{ RestoreToDate }}'
        VpcSecurityGroupIds: '{{ BackupDbClusterMetadata.BackupDbClusterSecurityGroupsId }}'
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def restore_to_point_in_time(events, context):
            try:
                config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
                docdb = boto3.client('docdb', config=config)
                restorable_cluster_identifier = events['DBClusterIdentifier']
                db_cluster = docdb.describe_db_clusters(
                    DBClusterIdentifier=events['DBClusterIdentifier']
                )
                if 'DBClusters' in db_cluster and db_cluster['DBClusters']:
                    db_subnet_group = db_cluster['DBClusters'][0]['DBSubnetGroup']
                else:
                    raise AssertionError(f'No db cluster found with id: {events["DBClusterIdentifier"]}')
        
                new_cluster_identifier = restorable_cluster_identifier + "-restored-" + 
                    datetime.now().strftime(RESTORED_CLUSTER_SUFFIX_FORMAT)
                date = events['RestoreToDate']
                security_groups = events['VpcSecurityGroupIds']
                if date == 'latest':
                    docdb.restore_db_cluster_to_point_in_time(
                        DBClusterIdentifier=new_cluster_identifier,
                        SourceDBClusterIdentifier=restorable_cluster_identifier,
                        UseLatestRestorableTime=True,
                        DBSubnetGroupName=db_subnet_group,
                        VpcSecurityGroupIds=security_groups
                    )
                else:
                    date = datetime.strptime(events['RestoreToDate'], "%Y-%m-%dT%H:%M:%S%z")
                    print(date)
                    docdb.restore_db_cluster_to_point_in_time(
                        DBClusterIdentifier=new_cluster_identifier,
                        SourceDBClusterIdentifier=restorable_cluster_identifier,
                        RestoreToTime=date,
                        DBSubnetGroupName=db_subnet_group,
                        VpcSecurityGroupIds=security_groups
                    )
                return {'RestoredClusterIdentifier': new_cluster_identifier}
            except Exception as e:
                print(f'Error: {e}')
                raise
        
        


  - name: RestoreDocDbClusterInstances
    action: aws:executeScript
    description: Restore database cluster instances
    onFailure: Abort
    outputs:
      - Name: RestoredInstancesIdentifiers
        Selector: $.Payload
        Type: StringList
    inputs:
      Runtime: python3.8
      Handler: restore_db_cluster_instances
      InputPayload:
        BackupDbClusterInstancesCountValue: '{{ BackupDbClusterMetadata.BackupDbClusterInstancesCountValue }}'
        DBClusterIdentifier: '{{ RestoreClusterToPointInTime.RestoredClusterIdentifier }}'
        DBClusterInstancesMetadata: '{{ BackupDbClusterInstancesMetadata.DBClusterInstancesMetadata }}'
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def restore_db_cluster_instances(events, context):
            try:
                config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
                docdb = boto3.client('docdb', config=config)
                print(events['BackupDbClusterInstancesCountValue'])
                instances = events['BackupDbClusterInstancesCountValue']
                instances_sorted = sorted(instances, key=itemgetter('IsClusterWriter'), reverse=True)
                db_cluster_identifier = events['DBClusterIdentifier']
                restored_instances_identifiers = []
                cluster_info = docdb.describe_db_clusters(DBClusterIdentifier=db_cluster_identifier)['DBClusters'][0]
                new_cluster_azs = cluster_info['AvailabilityZones']
                instances_by_az = {}
                for az in new_cluster_azs:
                    instances_by_az[az] = 0
                for instance in instances_sorted:
                    primary_instance = 1 if instance['IsClusterWriter'] else 2
                    restorable_instance_identifier = instance['DBInstanceIdentifier']
                    restored_instance_identifier = instance['DBInstanceIdentifier'] + '-restored'
                    if events['DBClusterInstancesMetadata'][restorable_instance_identifier]['AvailabilityZone'] 
                            in new_cluster_azs:
                        availability_zone = events['DBClusterInstancesMetadata'][restorable_instance_identifier][
                            'AvailabilityZone']
                    else:
                        availability_zone = sorted(instances_by_az, key=instances_by_az.get)[0]
                    instances_by_az[availability_zone] += 1
                    docdb.create_db_instance(
                        DBInstanceIdentifier=restored_instance_identifier,
                        DBInstanceClass=events['DBClusterInstancesMetadata'][restorable_instance_identifier]['DBInstanceClass'],
                        Engine=events['DBClusterInstancesMetadata'][restorable_instance_identifier]['Engine'],
                        DBClusterIdentifier=db_cluster_identifier,
                        AvailabilityZone=availability_zone,
                        PromotionTier=primary_instance
                    )
                    restored_instances_identifiers.append(restored_instance_identifier)
                return restored_instances_identifiers
            except Exception as e:
                print(f'Error: {e}')
                raise
        
        


  - name: RenameReplacedDocDbCluster
    action: aws:executeScript
    description: Rename original cluster so it can be replaced with the restored one
    onFailure: Abort
    outputs:
      - Name: ReplacedClusterIdentifier
        Selector: $.Payload.ReplacedClusterIdentifier
        Type: String
    inputs:
      Runtime: python3.8
      Handler: rename_replaced_db_cluster
      InputPayload:
        DBClusterIdentifier: '{{ DBClusterIdentifier }}'
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def rename_replaced_db_cluster(events, context):
            try:
                config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
                docdb = boto3.client('docdb', config=config)
                db_cluster_identifier = events['DBClusterIdentifier']
                new_db_cluster_identifier = db_cluster_identifier + '-replaced'
                docdb.modify_db_cluster(
                    DBClusterIdentifier=db_cluster_identifier,
                    NewDBClusterIdentifier=new_db_cluster_identifier,
                    ApplyImmediately=True,
                )
                return {'ReplacedClusterIdentifier': new_db_cluster_identifier}
            except Exception as e:
                print(f'Error: {e}')
                raise
        
        


  - name: WaitUntilReplacedInstancesAvailable
    description: Wait for instances to be in status available
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: docdb
      Api: DescribeDBInstances
      Filters:
        - Name: "db-cluster-id"
          Values:
            - '{{ RenameReplacedDocDbCluster.ReplacedClusterIdentifier }}'
      PropertySelector: "$.DBInstances..DBInstanceStatus"
      DesiredValues:
        - available

  - name: RenameReplacedDocDbInstances
    action: aws:executeScript
    description: Rename original instances so they can be replaced with the restored ones
    onFailure: Abort
    outputs:
      - Name: ReplacedInstancesIdentifiers
        Selector: $.Payload
        Type: StringList
    inputs:
      Runtime: python3.8
      Handler: rename_replaced_db_instances
      InputPayload:
        DBClusterIdentifier: '{{ RenameReplacedDocDbCluster.ReplacedClusterIdentifier }}'
        BackupDbClusterInstancesCountValue: '{{ BackupDbClusterMetadata.BackupDbClusterInstancesCountValue }}'
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def rename_replaced_db_instances(events, context):
            try:
                config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
                docdb = boto3.client('docdb', config=config)
                instances = events['BackupDbClusterInstancesCountValue']
                replaced_instances_identifiers = []
                for instance in instances:
                    docdb.modify_db_instance(
                        DBInstanceIdentifier=instance['DBInstanceIdentifier'],
                        ApplyImmediately=True,
                        NewDBInstanceIdentifier=instance['DBInstanceIdentifier'] + '-replaced',
                    )
                    replaced_instances_identifiers.append(instance['DBInstanceIdentifier'] + '-replaced')
                return replaced_instances_identifiers
            except Exception as e:
                print(f'Error: {e}')
                raise
        
        


  - name: WaitUntilRestoredInstancesAvailable
    description: Wait for instances to be in status available
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: docdb
      Api: DescribeDBInstances
      Filters:
        - Name: "db-cluster-id"
          Values:
            - '{{ RestoreClusterToPointInTime.RestoredClusterIdentifier }}'
      PropertySelector: "$.DBInstances..DBInstanceStatus"
      DesiredValues:
        - available

  - name: RenameRestoredDocDbInstances
    action: aws:executeScript
    description: Rename restored DocumentDB instances so they replace the original ones
    onFailure: Abort
    outputs:
      - Name: RestoredInstancesIdentifiers
        Selector: $.Payload
        Type: StringList
    inputs:
      Runtime: python3.8
      Handler: rename_restored_db_instances
      InputPayload:
        RestoredInstancesIdentifiers: '{{ RestoreDocDbClusterInstances.RestoredInstancesIdentifiers }}'
        RestoredClusterIdentifier: '{{ RestoreClusterToPointInTime.RestoredClusterIdentifier }}'
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def rename_restored_db_instances(events, context):
            try:
                config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
                docdb = boto3.client('docdb', config=config)
                instances = events['RestoredInstancesIdentifiers']
                restored_instances_identifiers = []
                for instance in instances:
                    restored_instance_identifier = instance.replace('-restored', '')
                    docdb.modify_db_instance(
                        DBInstanceIdentifier=instance,
                        ApplyImmediately=True,
                        NewDBInstanceIdentifier=restored_instance_identifier
                    )
                    restored_instances_identifiers.append(restored_instance_identifier)
                return restored_instances_identifiers
            except Exception as e:
                print(f'Error: {e}')
                raise
        
        


  - name: RenameRestoredCluster
    action: aws:executeAwsApi
    description: Rename restored DocumentDB cluster so it replaces the original one
    inputs:
      Service: docdb
      Api: ModifyDBCluster
      DBClusterIdentifier: '{{ RestoreClusterToPointInTime.RestoredClusterIdentifier }}'
      NewDBClusterIdentifier: '{{ DBClusterIdentifier }}'
      ApplyImmediately: True

  - name: WaitUntilRenamedInstancesAvailable
    description: Wait for instances to be in status available
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: docdb
      Api: DescribeDBInstances
      Filters:
        - Name: 'db-cluster-id'
          Values:
            - '{{ DBClusterIdentifier }}'
      PropertySelector: "$.DBInstances..DBInstanceStatus"
      DesiredValues:
        - available

  - name: OutputRecoveryTime
    description: Calculate execution time
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: recovery_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def recovery_time(events, context):
            return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds
        
        

      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'
