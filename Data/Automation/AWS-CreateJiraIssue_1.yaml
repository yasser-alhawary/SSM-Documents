description: "Creates a Jira issue."
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  JiraUsername:
    type: "String"
    description: "(Required) The name of the user the issue will be created with."
  SSMParameterName:
    type: "String"
    description: "(Required) The name of an encrypted SSM Parameter containing the
       API key or password for the Jira user."
  JiraURL:
    type: "String"
    description: "(Required) The url of the Jira instance."
  ProjectKey:
    type: "String"
    description: "(Required) The key of the project the issue should be created in."
  IssueSummary:
    type: "String"
    description: "(Required) A brief summary of the issue."
  IssueDescription:
    type: "String"
    description: "(Required) A detailed description of the issue."
  IssueTypeName:
    type: "String"
    description: "(Required) The name of the type of issue you want to create (ex.
       Task, Sub-task, Bug, etc)."
  PriorityName:
    type: "String"
    description: "(Optional) The name of the priority of the issue."
    default: ""
  AssigneeName:
    type: "String"
    description: "(Optional) The username of the person the issue should be assigned
       to."
    default: ""
  DueDate:
    type: "String"
    description: "(Optional) The due date for the issue in yyyy-mm-dd format."
    default: ""
  LambdaAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role that allows Lambda created by Automation
       to perform the actions on your behalf. If not specified a transient role will
       be created to execute the Lambda function."
    default: ""
  AutomationAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role that allows Automation to perform
       the actions on your behalf. "
    default: ""
mainSteps:
- name: "createMacroStack"
  action: "aws:createStack"
  onFailure: "step:deleteMacroCloudFormationTemplate"
  inputs:
    Capabilities:
    - "CAPABILITY_IAM"
    - "CAPABILITY_AUTO_EXPAND"
    StackName: "CreateJiraIssueMacroStack{{automation:EXECUTION_ID}}"
    TemplateBody: "AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  LambdaAssumeRoleNotSpecified:

          Fn::Or:
    - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - ''

          - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - undefined
Parameters:

        LambdaRoleArn: {Default: '', Description: 'The ARN of the role that allows
       Lambda
      created by Automation to perform the action on your behalf

      
      ', Type: String}
Resources:
  BasicLambdaRole:
    Condition: LambdaAssumeRoleNotSpecified

          Properties:
      AssumeRolePolicyDocument:
        Statement:
    
          - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:

                  Service: [lambda.amazonaws.com]
        Version: '2012-10-17'

          Type: AWS::IAM::Role
  ParameterParserFunction:
    Properties:
   
         Code:
        ZipFile:
          Fn::Join:
          - '

        
          '
          - ['def handler (event, context) :', '  response = { "requestId"
       : event["requestId"],
              "status": "success" }', '  response["
      fragment"] = event["params"]["ssmParameter"].lstrip(''/'')',
        
          '  return response']
      FunctionName: ParameterParserFunction
   
         Handler: index.handler
      MemorySize: 128
      Role:
        Fn::If:

              - LambdaAssumeRoleNotSpecified
        - Fn::GetAtt: [BasicLambdaRole,
       Arn]
        - {Ref: LambdaRoleArn}
      Runtime: python3.7
      Timeout:
       300
    Type: AWS::Lambda::Function
  ParameterParserMacro:
    Properties:

            Description: Parses leading '/' characters from the SSMParameter parameter

            FunctionName:
        Fn::GetAtt: [ParameterParserFunction, Arn]
 
           Name: ParameterParserMacro
    Type: AWS::CloudFormation::Macro
"
- name: "createDocumentStack"
  action: "aws:createStack"
  onFailure: "step:deleteMacroCloudFormationTemplate"
  inputs:
    Capabilities:
    - "CAPABILITY_IAM"
    - "CAPABILITY_AUTO_EXPAND"
    StackName: "CreateJiraIssueLambdaStack{{automation:EXECUTION_ID}}"
    Parameters:
    - ParameterKey: "LambdaRoleArn"
      ParameterValue: "{{LambdaAssumeRole}}"
    - ParameterKey: "LambdaName"
      ParameterValue: "CreateJiraIssueLambda-{{automation:EXECUTION_ID}}"
    - ParameterKey: "SSMParameterName"
      ParameterValue: "{{SSMParameterName}}"
    TemplateBody: "AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  LambdaAssumeRoleNotSpecified:

          Fn::Or:
    - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - ''

          - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - undefined
Parameters:

        LambdaName: {Description: 'The lambda function name

      ', Type: String}

        LambdaRoleArn: {Default: '', Description: 'The ARN of the role that allows
       Lambda
      created by Automation to perform the action on your behalf

      
      ', Type: String}
  SSMParameterName: {Description: 'The name of the
       SSM Parameter with the Jira password/token

      ', Type: String}
Resources:

        CreateJiraIssue:
    Properties:
      Code: {ZipFile: "#
# Copyright
       2018 Amazon.com, Inc. or its affiliates. All
           Rights Reserved.
      n#
# Permission is hereby granted, free of charge, to
           any
       person obtaining a copy of this
# software and associated documentation
      
           files (the "Software"), to deal in the Software
# without
       restriction,
           including without limitation the rights to use,
       copy, modify,
# merge,
           publish, distribute, sublicense,
       and/or sell copies of the Software, and
           to
# permit persons
       to whom the Software is furnished to do so.
#

          # THE SOFTWARE
       IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
     
            OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      
           FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
       NO EVENT SHALL
           THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE
       FOR ANY CLAIM, DAMAGES OR
           OTHER LIABILITY, WHETHER IN AN ACTION
      n# OF CONTRACT, TORT OR OTHERWISE,
           ARISING FROM, OUT OF OR IN
       CONNECTION WITH THE
# SOFTWARE OR THE USE
           OR OTHER DEALINGS
       IN THE SOFTWARE.
#
import boto3
import json
from
           botocore.vendored
       import requests

def add_priority(issue, priority):

          
      tfields = issue["fields"]
tfields["priority"] = {"name"
      : priority}

          
def add_assignee(issue, assignee):
tfields
       = issue["fields"]
tfields["
          assignee"] = {"
      name": assignee}

def add_due_date(issue, due_date):

         
       tfields = issue["fields"]
tfields["duedate"] = due_date
      n
def handler(event,
           context):

tclient = boto3.client(
      "ssm")

tssm_parameter_name
           = event["SSMParameterName
      "].strip()

tsecret = client.get_parameter(Name=ssm_parameter_name,
      
           WithDecryption=True)['Parameter']['Value']

tusername =
       event["JiraUsername"
          ].strip()
turl = event["JiraURL
      "].strip()

tissue = {
tt"fields"
          : {
t
      tt"summary": event["IssueSummary"].strip(),
ttt"project
      "
          : {
tttt"key": event["ProjectKey"].strip()
      nttt},
ttt"
          description": event["IssueDescription
      "].strip(),
ttt"issuetype"
          : {
tttt"
      name": event["IssueTypeName"].strip()
ttt}
tt}


                t}

tpriority = event["PriorityName"].strip()

      tif priority:
tt
          add_priority(issue, priority)

tassignee
       = event["AssigneeName"].strip()

          tif assignee:

      ttadd_assignee(issue, assignee)

tdue_date = event["
        
        DueDate"].strip()
tif due_date:
ttadd_due_date(issue, due_date)
      n

          tdata = json.dumps(issue)

theaders = {'Content-Type':'application/json'}
      n
          
tresponse = requests.post('{0}/rest/api/2/issue/'.format(url),
      nttt
          tttt headers=headers,
tttttt
      t data=data,
ttttttt auth=(username,
           secret))
      n
tif not response.ok:
ttraise Exception("Received error
  
               with status code " + str(response.status_code) + " from Jira
      ")
t
          else:
ttissue_key = (response.json()["key"
      ])
ttreturn {"IssueKey"
          : issue_key}




      n

"}
      FunctionName: {Ref: LambdaName}
      Handler: index.handler

            MemorySize: 128
      Role:
        Fn::If:
        - LambdaAssumeRoleNotSpecified

              - Fn::GetAtt: [LambdaRole, Arn]
        - {Ref: LambdaRoleArn}
 
           Runtime: python3.7
      Timeout: 300
    Type: AWS::Lambda::Function

        LambdaRole:
    Condition: LambdaAssumeRoleNotSpecified
    Properties:

            AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']

                Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]

              Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:

                Statement:
          - Action: ['ssm:GetParameter']
          
        Effect: Allow
            Resource:
              Fn::Join:
         
           - ''
              - - Fn::Join:
                  - ':'
         
               - - arn
                    - {Ref: 'AWS::Partition'}
         
                 - ssm
                    - {Ref: 'AWS::Region'}
            
              - {Ref: 'AWS::AccountId'}
                    - parameter/
     
                 - Fn::Transform:
                    Name: ParameterParserMacro

                          Parameters:
                      ssmParameter: {Ref:
       SSMParameterName}
          Version: '2012-10-17'
        PolicyName: CreateJiraIssueLambdaPolicy

          Type: AWS::IAM::Role
"
- name: "createJiraIssue"
  action: "aws:invokeLambdaFunction"
  onFailure: "step:deleteCloudFormationTemplate"
  inputs:
    FunctionName: "CreateJiraIssueLambda-{{automation:EXECUTION_ID}}"
    Payload: "{"JiraUsername": "{{JiraUsername}}", "SSMParameterName": "{{SSMParameterName}}"
      , "JiraURL": "{{JiraURL}}", "ProjectKey": "{{ProjectKey}}", "IssueSummary"
      : "{{IssueSummary}}", "IssueDescription": "{{IssueDescription}}", "IssueTypeName"
      : "{{IssueTypeName}}", "PriorityName": "{{PriorityName}}", "AssigneeName"
      : "{{AssigneeName}}", "DueDate": "{{DueDate}}"}"
- name: "deleteCloudFormationTemplate"
  action: "aws:deleteStack"
  inputs:
    StackName: "CreateJiraIssueLambdaStack{{automation:EXECUTION_ID}}"
- name: "deleteMacroCloudFormationTemplate"
  action: "aws:deleteStack"
  inputs:
    StackName: "CreateJiraIssueMacroStack{{automation:EXECUTION_ID}}"
outputs:
- "createJiraIssue.Payload"
