schemaVersion: "0.3"
description: |
  ### Document name - AWSConfigRemediation-EnableSystemsManagerSessionManagerAuditLogsToS3

  ## What does this document do?
  This document enables AWS Systems Manager Session Manager session output logs to an Amazon S3 bucket using [CreateDocument](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateDocument.html) or [UpdateDocument](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_UpdateDocument.html) API.

  ## Input Parameters
  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  * BucketName: (Required) Amazon S3 bucket name to serve as the destination for the AWS Systems Manager Session Manager session logs.
  * S3KeyPrefix: (Optional) Amazon S3 bucket prefix.

  ## Output Parameters
  * EnableS3Logging.Response: The standard HTTP response from the GetDocument API.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@/-]+$
  BucketName:
    type: String
    description: (Required) Amazon S3 bucket name to serve as the destination for the AWS Systems Manager Session Manager session logs.
    allowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  S3KeyPrefix:
    type: String
    description: (Optional) Amazon S3 bucket prefix.
    allowedPattern: "(.*){1,1024}"
    default: ""
outputs:
  - EnableS3Logging.Response
mainSteps:
  -
    name: EnableS3Logging
    action: aws:executeScript
    description: |
      ## EnableS3Logging
      Updates the document which stores AWS Systems Manager session manager preferences and if it doesn't exist, creates one.
      ## Outputs
      * Response: The standard HTTP response from the GetDocument API.
    timeoutSeconds: 600
    isEnd: true
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        BucketName: "{{ BucketName }}"
        S3KeyPrefix: "{{ S3KeyPrefix }}"
      Script: |-
        import boto3
        import json
        from time import sleep

        standard_document_content = '''
        {{
          "schemaVersion": "1.0",
          "description": "Document to hold regional settings for Session Manager",
          "sessionType": "Standard_Stream",
          "inputs": {{
            "s3BucketName": "{0}",
            "s3KeyPrefix": "{1}",
            "s3EncryptionEnabled": true,
            "cloudWatchLogGroupName": "",
            "cloudWatchEncryptionEnabled": true,
            "kmsKeyId": "",
            "runAsEnabled": false,
            "runAsDefaultUser": ""
          }}
        }}
        '''

        def is_document_exists(ssm_client, document_name):
            try:
                document_response = ssm_client.get_document(Name=document_name)
                return json.loads(document_response['Content'])
            except ssm_client.exceptions.InvalidDocument:
                return False

        def handler(event, context):
            document_name = "SSM-SessionManagerRunShell"
            bucket_name = event["BucketName"]
            key_prefix = event["S3KeyPrefix"]
            new_document_content = standard_document_content.format(bucket_name, key_prefix)

            ssm_client = boto3.client("ssm")
            document_content = is_document_exists(ssm_client, document_name)
            if document_content:
                document_content["inputs"]["s3BucketName"] = bucket_name
                document_content["inputs"]["s3KeyPrefix"] = key_prefix
                updated_content = json.dumps(document_content)
                ssm_client.update_document(Content=updated_content,
                                           Name=document_name,
                                           DocumentVersion="$LATEST",
                                           DocumentFormat="JSON")
                # Setting the default version of the document to $LATEST
                document_response = ssm_client.describe_document(Name=document_name)
                document_status = document_response["Document"]["Status"]
                latest_version = document_response["Document"]["LatestVersion"]
                if document_status == 'Active':
                    ssm_client.update_document_default_version(Name=document_name, DocumentVersion=latest_version)
            else:
                ssm_client.create_document(Content=new_document_content,
                                           Name=document_name,
                                           DocumentType="Session")

            # Verification
            document_response = ssm_client.get_document(Name=document_name)
            configured_bucket = json.loads(document_response['Content'])["inputs"]["s3BucketName"]
            configured_key_prefix = json.loads(document_response['Content'])["inputs"]["s3KeyPrefix"]
            if document_response and configured_bucket == bucket_name and configured_key_prefix == key_prefix:
               return{
                    "output": {
                        "Message": "Verification of EnableSystemsManagerSessionManagerAuditLogsToS3 is successful.",
                        "HTTPResponse": document_response['ResponseMetadata']
                    }
               }
            raise Exception("AWS Systems Manager 'SSM-SessionManagerRunShell' DOCUMENT CREATE OR UPDATE FAILED.", document_response['ResponseMetadata'])

    outputs:
      - Name: Response
        Selector: $.Payload.output
        Type: StringMap
	2020-12-07T23:09:43.741000+01:00	YAML	Automation	1	AWSConfigRemediation-EnableSystemsManagerSessionManagerAuditLogsToS3	Active
