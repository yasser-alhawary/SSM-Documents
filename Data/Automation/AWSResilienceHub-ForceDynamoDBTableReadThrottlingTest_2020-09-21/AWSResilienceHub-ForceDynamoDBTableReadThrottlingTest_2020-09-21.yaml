#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-ForceDynamoDbTableReadThrottlingTest_2020-09-21

            ## Intent
            Test that the ReadThrottleEvents metric alarm setup detects and alerts when table becomes unavailable

            ## Type
            TEST

            ## Risk
            Small

            ## Requirements
              * Not on-demand DynamoDB table or a table with provisioned capacity with autoscaling enabled
              * The DynamoDB Table should be actively read during the last minutes before the execution to get right average values of `ConsumedReadCapacityUnits` metric
              * An alarm setup for ReadThrottleEvents metric

            ## Permissions required for AutomationAssumeRole
              * dynamodb:UpdateTable
              * dynamodb:DescribeTable
              * cloudwatch:DescribeAlarms
              * ssm:GetAutomationExecution
              * ssm:StartAutomationExecution
              * ssm:GetParameters
              * iam:PassRole

            ## Supports Rollback
            Yes. Reverts provisioned read and write capacity units to original values

            ## Cancellation behavior
            Reverts provisioned read and write capacity units to original values

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) DynamoDBTableName
              * type: String
              * description: The DynamoDB Table Name with PROVISIONED billing mode

            ### (Required) ReadThrottleAlarmName
              * type: String
              * description: Alarm for metric `ReadThrottleEvents` that triggers when any read throttle events occure

            ### (Required) ReadCapacityUnitsLimit
              * type: String
              * description: ReadCapacityUnits value that should be lower than actual consumed value

            ### (Optional) IsRollback
              * type: String
              * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
              * default: false

            ### (Optional) PreviousExecutionId
              * type: String
              * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up

            ## Details
            The document updates DynamoDB table provisioned read capacity units (RCU) to the specified value that has
            to be lower than the usual consumption, and tests that alarm for metric `ReadThrottleEvents` is triggered.
            In case of issues users should manually revert provisioned read capacity units value.

            ## Steps executed in normal flow
              * CheckIsRollback
              * AssertBillingModeProvisioned
              * ValidateReadCapacityUnitsLimit
              * AssertAlarmToBeGreenBeforeTest
              * BackupProvisionedThroughput
              * UpdateTableRCU
              * WaitForActiveStatusAfterUpdateTableRCU
              * AssertAlarmToBeRed
              * RollbackCurrentExecution
              * WaitForActiveStatusAfterRollbackToPreviousTableRCU
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * CheckIsRollback
              * GetPreviousExecutionInputs
              * PrepareRollbackOfPreviousExecution
              * ConvertParamTypes
              * AssertDynamoDBTableName
              * RollbackPreviousExecution
              * WaitForActiveStatusAfterRollbackPrevious

            ## Outputs
            None

schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  DynamoDBTableName:
    type: String
    description: (Required) The DynamoDB Table Name with PROVISIONED billing mode.
  ReadThrottleAlarmName:
    type: String
    description: (Required) Alarm which should be green after test.
  ReadCapacityUnitsLimit:
    type: Integer
    description: (Required) ReadCapacityUnits value that should be lower than actual consumed value
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  IsRollback:
    type: String
    description: (Optional) Run rollback step of the given previous execution (parameter PreviousExecutionId). Can be either true or false.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: CheckIsRollback
    description: Check if document should be executed in rollback mode
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetPreviousExecutionInputs
          Variable: "{{ IsRollback }}"
          StringEquals: 'true'
      Default: AssertBillingModeProvisioned

  - name: GetPreviousExecutionInputs
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: ReadCapacityUnitsLimit
        Selector: $.Payload.ReadCapacityUnitsLimit[0]
        Type: String
      - Name: DynamoDBTableName
        Selector: $.Payload.DynamoDBTableName[0]
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def get_inputs_from_ssm_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events:
                raise KeyError('Requires ExecutionId')
        
            if not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            response_parameters = response['AutomationExecution']['Parameters']
            # TODO DIG-853
            for parameter in response_parameters:
                output[parameter] = response_parameters[parameter]
        
            return output
        
        


  - name: PrepareRollbackOfPreviousExecution
    description: Get original Read and Write Capacity Units
    action: aws:executeScript
    outputs:
      - Name: BackupReadCapacityUnits
        Selector: $.Payload.BackupReadCapacityUnits[0]
        Type: String
      - Name: BackupWriteCapacityUnits
        Selector: $.Payload.BackupWriteCapacityUnits[0]
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
        StepName: 'BackupProvisionedThroughput'
        ResponseField: 'BackupReadCapacityUnits,BackupWriteCapacityUnits'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def get_output_from_ssm_step_execution(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:
                raise KeyError('Requires ExecutionId, StepName and ResponseField in events')
        
            ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            for step in ssm_response['AutomationExecution']['StepExecutions']:
                if step['StepName'] == events['StepName']:
                    response_fields = events['ResponseField'].split(',')
                    output = {}
                    for response_field in response_fields:
                        if response_field in step['Outputs']:
                            # Sets values in string type regardless of what is the original value type. In order to set
                            # values with original types please use 'get_typed_output_from_ssm_step_execution'.
                            output[response_field] = step['Outputs'][response_field]
                        else:
                            """
                            By default SSM ignores empty values when encodes API outputs to JSON. It may result in
                            a situation when an empty value is a valid value but step output completely misses it.
                            Usually happens with SQS queue policies, default policy is returned by API as an empty value
                            and executeApi step output ignores it. As a result, further steps in rollback execution will fail.
                            Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string
                            represents a default sqs policy
                            """
                            output[response_field] = ['']
                    return output
        
            # Could not find step name
            raise Exception('Can not find step name % in ssm execution response', events['StepName'])
        
        


  - name: ConvertParamTypes
    description: Cast float RCU and WCU values to integers
    action: aws:executeScript
    outputs:
      - Name: BackupReadCapacityUnits
        Selector: $.Payload.BackupReadCapacityUnits
        Type: Integer
      - Name: BackupWriteCapacityUnits
        Selector: $.Payload.BackupWriteCapacityUnits
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: convert_param_types
      InputPayload:
        Parameters:
          - Name: BackupReadCapacityUnits
            Value: '{{ PrepareRollbackOfPreviousExecution.BackupReadCapacityUnits }}'
            OutputType: Integer
          - Name: BackupWriteCapacityUnits
            Value: '{{ PrepareRollbackOfPreviousExecution.BackupWriteCapacityUnits }}'
            OutputType: Integer
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def convert_param_types(events, context):
            """
            Use this script to convert value types from strings to specific OutputTypes
            All outputs and inputs from SSM steps received through API calls have string type regardless of their actual type
            On the other hand various AWS APIs expect params to be in types other than strings
            """
            output = {}
            params = events.get('Parameters', [])
            for param in params:
                param_name = param.get('Name')
                value = param.get('Value')
                output_type = param.get('OutputType')
                if not param_name or not output_type or 'Value' not in param:
                    raise ValueError(f"Failed to get function parameters from input payload: {param}")
                if output_type not in ["Float", "Integer", "Boolean"]:
                    raise ValueError(f"Incorrect OutputType in events: {output_type}")
        
                if output_type == 'Float':
                    output[param_name] = float(value)
                if output_type == 'Integer':
                    output[param_name] = int(value)
                if output_type == 'Boolean':
                    output[param_name] = value.lower() == 'true'
            return output


  - name: AssertDynamoDBTableName
    description: Validate that rollback is executed with the same input
    action: aws:branch
    inputs:
      Choices:
        - NextStep: RollbackPreviousExecution
          Variable: "{{ GetPreviousExecutionInputs.DynamoDBTableName }}"
          StringEquals: '{{ DynamoDBTableName }}'
    isEnd: true

  - name: RollbackPreviousExecution
    description: Revert original RCU value, WCU value is not changed but is required by API
    action: aws:executeAwsApi
    inputs:
      Service: dynamodb
      Api: UpdateTable
      TableName: '{{ DynamoDBTableName }}'
      ProvisionedThroughput:
        ReadCapacityUnits: '{{ ConvertParamTypes.BackupReadCapacityUnits }}'
        WriteCapacityUnits: '{{ ConvertParamTypes.BackupWriteCapacityUnits }}'
  
  - name: WaitForActiveStatusAfterRollbackPrevious
    description: Wait for the table to become active
    action: aws:waitForAwsResourceProperty
    inputs:
      Service: dynamodb
      Api: DescribeTable
      TableName: '{{ DynamoDBTableName }}'
      PropertySelector: '$.Table.TableStatus'
      DesiredValues: [ 'ACTIVE' ]
    isEnd: true

  - name: AssertBillingModeProvisioned
    description: Asserts that billing mode iS PROVISIONED
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.8
      Handler: validate_billing_mode
      Script: |-
        import logging
        import random
        import time
        from typing import Any, Callable, Iterator, List
        
        import boto3
        from botocore.config import Config
        
        boto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        ENABLED_INSIGHTS_STATUSES = ['ENABLING', 'ENABLED']
        GLOBAL_TABLE_ACTIVE_STATUSES = ['ACTIVE']
        
        

        def _execute_boto3_dynamodb(delegate: Callable[[Any], dict]) -> dict:
            """
            Executes the given delegate with dynamodb client parameter
            :param delegate: The delegate to execute (with boto3 function)
            :return: The output of the given function
            """
            dynamo_db_client = boto3.client('dynamodb', config=boto3_config)
            description = delegate(dynamo_db_client)
            if not description['ResponseMetadata']['HTTPStatusCode'] == 200:
                logging.error(description)
                raise ValueError('Failed to execute request')
            return description
        
        

        def _describe_table(table_name: str) -> dict:
            """
            Describes the given dynamodb table
            :param table_name: The table name
            :return: The dictionary of table description properties
            """
            return _execute_boto3_dynamodb(
                delegate=lambda x: x.describe_table(TableName=table_name))
        
        

        def validate_billing_mode(events: dict, context: dict) -> None:
            """
            Validate billing mode to be specific value.
            :param events: The dictionary that supposed to have the following keys:
            * `ExpectedValues` - The list of values the property expected to be
            * `TableName` - The target table name
            :return: The status of continuous backup
            """
            if 'ExpectedValues' not in events:
                raise KeyError('Requires ExpectedValues')
            if 'TableName' not in events:
                raise KeyError('Requires TableName')
        
            table_name: str = events['TableName']
            expected_values: List[str] = events['ExpectedValues']
        
            description = _describe_table(table_name=table_name)
            billing_mode = description.get('Table', {}).get('BillingModeSummary', {}).get('BillingMode', '')
        
            # process empty property case
            if not billing_mode and (not expected_values or '' in expected_values or None in expected_values):
                return
            else:
                if billing_mode not in expected_values:
                    raise ValueError(
                        f'BillingMode is required to be one of the following values {expected_values}, '
                        'but was {match.value}')
        
        

      InputPayload:
        ExpectedValues:
          - "PROVISIONED"
          - ""
        TableName: "{{ DynamoDBTableName }}"

  - name: ValidateReadCapacityUnitsLimit
    description: Check that the requested RCU value is valid
    action: aws:branch
    inputs:
      Choices:
        - NextStep: AssertAlarmToBeGreenBeforeTest
          Variable: '{{ ReadCapacityUnitsLimit }}'
          NumericGreaterOrEquals: 1
    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time.
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ ReadThrottleAlarmName }}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]

  - name: BackupProvisionedThroughput
    description: Backup original RCU and WCU values for rollback
    action: aws:executeAwsApi
    outputs:
      - Name: BackupReadCapacityUnits
        Selector: $.Table.ProvisionedThroughput.ReadCapacityUnits
        Type: Integer
      - Name: BackupWriteCapacityUnits
        Selector: $.Table.ProvisionedThroughput.WriteCapacityUnits
        Type: Integer
    inputs:
      Service: dynamodb
      Api: DescribeTable
      TableName: '{{ DynamoDBTableName }}'

  - name: UpdateTableRCU
    description: Update RCU value, WCU is not changed but required by API
    action: aws:executeAwsApi
    inputs:
      Service: dynamodb
      Api: UpdateTable
      TableName: '{{ DynamoDBTableName }}'
      ProvisionedThroughput:
        ReadCapacityUnits: '{{ ReadCapacityUnitsLimit }}'
        WriteCapacityUnits: '{{ BackupProvisionedThroughput.BackupWriteCapacityUnits }}'

  - name: WaitForActiveStatusAfterUpdateTableRCU
    description: Wait for the table to become active
    action: aws:waitForAwsResourceProperty
    inputs:
      Service: dynamodb
      Api: DescribeTable
      TableName: '{{ DynamoDBTableName }}'
      PropertySelector: '$.Table.TableStatus'
      DesiredValues: [ 'ACTIVE' ]
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback

  - name: AssertAlarmToBeRed
    description: Wait for expected alarm to be red after failure is injected
    action: aws:waitForAwsResourceProperty
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ ReadThrottleAlarmName }}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]

  - name: RollbackCurrentExecution
    description: Revert original RCU value, WCU value is not changed but is required by API
    action: aws:executeAwsApi
    maxAttempts: 5
    onCancel: step:TriggerRollback
    inputs:
      Service: dynamodb
      Api: UpdateTable
      TableName: '{{ DynamoDBTableName }}'
      ProvisionedThroughput:
        ReadCapacityUnits: '{{ BackupProvisionedThroughput.BackupReadCapacityUnits }}'
        WriteCapacityUnits: '{{ BackupProvisionedThroughput.BackupWriteCapacityUnits }}'

  - name: WaitForActiveStatusAfterRollbackToPreviousTableRCU
    description: Wait for the table to become active
    action: aws:waitForAwsResourceProperty
    inputs:
      Service: dynamodb
      Api: DescribeTable
      TableName: '{{ DynamoDBTableName }}'
      PropertySelector: '$.Table.TableStatus'
      DesiredValues: [ 'ACTIVE' ]

  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ ReadThrottleAlarmName }}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true

  - name: TriggerRollback
    description: This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def start_rollback_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
        
            # Get parameters for current execution and add IsRollback and PreviousExecutionId
            response_parameters = response['AutomationExecution']['Parameters']
            response_parameters['IsRollback'] = ['true']
            response_parameters['PreviousExecutionId'] = [events['ExecutionId']]
        
            rollback_execution_response = ssm.start_automation_execution(
                DocumentName=response['AutomationExecution']['DocumentName'],
                DocumentVersion=response['AutomationExecution']['DocumentVersion'],
                Parameters=response_parameters
            )
            output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']
            return output
        
        

    isEnd: true
	2022-04-25T22:13:18.823000+02:00	YAML	Automation	3	AWSResilienceHub-ForceDynamoDBTableReadThrottlingTest_2020-09-21	Active
