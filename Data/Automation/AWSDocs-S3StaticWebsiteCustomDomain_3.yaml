description: "Tutorial: Configuring a static website using a custom domain registered
   with Route 53
===

This Automation document helps you configure a static website
   on an Amazon Simple Storage Service (Amazon S3) bucket using a custom domain name.
   The document automates the procedure described in [Tutorial: Configuring a static
   website using a custom domain registered with Route 53](https://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html)
   in the *Amazon Simple Storage Service User Guide*.

Prerequisites
---

To
   run the following Automation document, you must have permissions to run Automation
   workflows and create the following resources and have a domain name registered
   in Route53. The Automation workflow runs in the context of the current Amazon
   Identity and Access Management (IAM) user unless otherwise specified. To register
   a new domain, follow the instructions [here](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register.html).

  
Resources created
---

This Automation document launches an Amazon CloudFormation
   stack to create the following resources.

  * A S3 bucket that has public read
   access and a static website configuration and hosts an index and error document

    * A S3 bucket that has a static website configuration that redirects to the hosting
   bucket
  * A S3 bucket that logs access to the hosting bucket
  * Route53 alias
   records that redirect the custom domain to the regional S3 endpoint

Outputs

  ---

After the Automation is complete, access your custom domain and confirm content
   is being served. Access is logged every two hours and will appear in the logging
   bucket.

If your website or redirect links don't work, you can try the following:

  
* **Clear cache** u2013 Clear the cache of your web browser.

* **Check name
   servers** u2013 If your web page and redirect links don't work after you've cleared
   your cache, you can compare the name servers for your domain and the name servers
   for your hosted zone. If the name servers don't match, you might need to update
   your domain name servers to match those listed under your hosted zone. For more
   information, see [Adding or changing name servers and glue records for a domain]
   (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-name-servers-glue-records.html).

  
Cleanup
---

To remove resources created by this Automation document, navigate
   to the S3 bucket and remove all items from the buckets created and then delete
   the CloudFormation stack created.

*Provide feedback [here](https://docs.aws.amazon.com/forms/aws-doc-feedback?feedback_destination_id=fdb9de10-9bb3-4e90-b330-df8c2533c9dd&topic_url=http://docs.aws.amazon.com/AutomatedTutorials/AWSDocs-S3StaticWebsiteCustomDomain).*"
mainSteps:
- action: aws:createStack
  description: 'Creates three S3 buckets. The first will host the static webpage.
    The second will redirect to the bucket hosting bucket. The third will contain
    access log entries. The hosting bucket will have static website hosting and public
    access enabled. Route53 alias records will redirect the custom domain to the S3
    static

    website endpoints.'
  inputs:
    Parameters:
    - ParameterKey: RootDomainName
      ParameterValue: '{{ RootDomainName }}'
    StackName: s3BucketStack
    TemplateBody: "{
  "Mappings" : {
    "RegionMap" : {
      "us-east-2"
       : { "S3hostedzoneID" : "Z2O1EMRO9K5GLX", "websiteendpoint" : "s3-website.us-east-2.amazonaws.com"
       },
      "us-east-1" : { "S3hostedzoneID" : "Z3AQBSTGFYJSTF", "websiteendpoint"
       : "s3-website-us-east-1.amazonaws.com" },
      "us-west-1" : { "S3hostedzoneID"
       : "Z2F56UZL2M1ACD", "websiteendpoint" : "s3-website-us-west-1.amazonaws.com"
       },
      "us-west-2" : { "S3hostedzoneID" : "Z3BJ6K6RIION7M", "websiteendpoint"
       : "s3-website-us-west-2.amazonaws.com" },
      "af-south-1" : { "S3hostedzoneID"
       : "Z11KHD8FBVPUYU", "websiteendpoint" : "s3-website.af-south-1.amazonaws.com"
       },
      "ap-east-1" : { "S3hostedzoneID" : "ZNB98KWMFR0R6", "websiteendpoint"
       : "s3-website.ap-east-1.amazonaws.com" },
      "ap-south-1" : { "S3hostedzoneID"
       : "Z11RGJOFQNVJUP", "websiteendpoint" : "s3-website.ap-south-1.amazonaws.com"
       },
      "ap-northeast-3" : { "S3hostedzoneID" : "Z2YQB5RD63NC85",
       "websiteendpoint" : "s3-website.ap-northeast-3.amazonaws.com" },
   
         "ap-northeast-2" : { "S3hostedzoneID" : "Z3W03O7B5YMIYP", "websiteendpoint"
       : "s3-website.ap-northeast-2.amazonaws.com" },
      "ap-southeast-1"
       : { "S3hostedzoneID" : "Z3O0J2DXBE1FTB", "websiteendpoint" : "s3-website-ap-southeast-1.amazonaws.com"
       },
      "ap-southeast-2" : { "S3hostedzoneID" : "Z1WCIGYICN2BYD",
       "websiteendpoint" : "s3-website-ap-southeast-2.amazonaws.com" },
   
         "ap-northeast-1" : { "S3hostedzoneID" : "Z2M4EHUR26P7ZW", "websiteendpoint"
       : "s3-website-ap-northeast-1.amazonaws.com" },
      "ca-central-1" :
       { "S3hostedzoneID" : "Z1QDHH18159H29", "websiteendpoint" : "s3-website.ca-central-1.amazonaws.com"
       },
      "cn-northwest-1" : { "S3hostedzoneID" : "", "websiteendpoint"
       : "s3-website.cn-northwest-1.amazonaws.com.cn" },
      "eu-central-1"
       : { "S3hostedzoneID" : "Z21DNDUVLTQW6Q", "websiteendpoint" : "s3-website.eu-central-1.amazonaws.com"
       },
      "eu-west-1" : { "S3hostedzoneID" : "Z1BKCTXD74EZPE", "websiteendpoint"
       : "s3-website-eu-west-1.amazonaws.com" },
      "eu-west-2" : { "S3hostedzoneID"
       : "Z3GKZC51ZF0DB4", "websiteendpoint" : "s3-website.eu-west-2.amazonaws.com"
       },
      "eu-south-1" : { "S3hostedzoneID" : "", "websiteendpoint"
       : "s3-website.eu-south-1.amazonaws.com" },
      "eu-west-3" : { "S3hostedzoneID"
       : "Z3R1K369G5AVDG", "websiteendpoint" : "s3-website.eu-west-3.amazonaws.com"
       },
      "eu-north-1" : { "S3hostedzoneID" : "Z3BAZG2TWCNX0D", "websiteendpoint"
       : "s3-website.eu-north-1.amazonaws.com" },
      "me-south-1" : { "
      S3hostedzoneID" : "", "websiteendpoint" : "3-website.me-south-1.amazonaws.com"
       },
      "sa-east-1" : { "S3hostedzoneID" : "Z7KQH4QJS55SO", "websiteendpoint"
       : "s3-website-sa-east-1.amazonaws.com" },
      "us-gov-east-1" : { "
      S3hostedzoneID" : "Z2NIFVYYW2VKV1", "websiteendpoint" : "s3-website.us-gov-east-1.amazonaws.com"
       },
      "us-gov-west-1" : { "S3hostedzoneID" : "Z31GFT0UA1I2HV", "
      websiteendpoint" : "s3-website-us-gov-west-1.amazonaws.com" }
    }
  },

        "Parameters": {
      "RootDomainName": {
          "Description"
      : "Domain name for your website (example.com)",
          "Type": "String"
      
      }
  },
  "Resources": {
    "LogBucket": {
      "Type": "
      AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
   
               "Fn::Join": ["", ["logs.", {"Ref":"RootDomainName"}]]

              },
        "AccessControl": "LogDeliveryWrite"
      }
    },

          "RootBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties"
      : {
        "BucketName" : {"Ref":"RootDomainName"},
        "AccessControl"
      : "PublicRead",
        "WebsiteConfiguration": {
          "IndexDocument"
      :"index.html",
          "ErrorDocument":"error.html"
        },
 
             "LoggingConfiguration":{
          "DestinationBucketName": { "
      Ref": "LogBucket" },
          "LogFilePrefix": "access"
        }

            }
    },
    "WWWBucket": {
      "Type": "AWS::S3::Bucket"
      ,
      "Properties": {
        "BucketName": {
          "Fn::Join"
      : ["", ["www.", {"Ref":"RootDomainName"}]]
        },
        "AccessControl"
      : "BucketOwnerFullControl",
        "WebsiteConfiguration": {
       
         "RedirectAllRequestsTo": {
              "HostName": {"Ref": "RootBucket"
      }
          }
        }
      }
    },
    "RootBucketPolicy": {
  
          "Type": "AWS::S3::BucketPolicy",
      "Properties": {
       
       "PolicyDocument": {
          "Id": "MyPolicy",
          "Statement"
      : [
            {
              "Sid": "PublicReadForGetBucketObjects"
      ,
              "Effect": "Allow",
              "Principal": "*"
      ,
              "Action": "s3:GetObject",
              "Resource":
       {
                "Fn::Join": [
                  "",
            
            [
                    "arn:aws:s3:::",
                    {
  
                          "Ref": "RootBucket"
                    },
     
                     "/*"
                  ]
                ]
           
         }
            }
          ]
        },
        "Bucket": {
     
           "Ref": "RootBucket"
        }
      }
    },
    "myDNS": {

            "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {

              "HostedZoneName": {
            "Fn::Join": ["", [{"Ref":
       "RootDomainName"}, "."]]
        },
        "Comment": "Zone apex
       alias.",
        "RecordSets": [
            {
              "Name"
      : {"Ref": "RootDomainName"},
              "Type": "A",
         
           "AliasTarget": {
                "HostedZoneId": {"Fn::FindInMap"
       : [ "RegionMap", { "Ref" : "AWS::Region" }, "S3hostedzoneID"]},

                      "DNSName": {"Fn::FindInMap" : [ "RegionMap", { "Ref"
       : "AWS::Region" }, "websiteendpoint"]}
              }
            },

                  {
              "Name": {"Fn::Join": ["", ["www.", {"
      Ref":"RootDomainName"}]]},
              "Type": "A",
            
        "AliasTarget": {
                "HostedZoneId": {"Fn::FindInMap"
       : [ "RegionMap", { "Ref" : "AWS::Region" }, "S3hostedzoneID"]},

                      "DNSName": {"Fn::FindInMap" : [ "RegionMap", { "Ref"
       : "AWS::Region" }, "websiteendpoint"]}
              }
            }

                ]
      }
    }
  },
  "Outputs": {
    "S3BucketName":
       {
      "Value": {
        "Ref": "RootBucket"
      },
      "
      Description": "Name of root S3Bucket"
    }
  }
}"
  name: createS3Stack
  onFailure: step:deleteS3StackOnError
- action: aws:executeAwsApi
  description: Gets information from stack creation that to use in the following step.
  inputs:
    Api: DescribeStacks
    Service: cloudformation
    StackName: '{{ createS3Stack.StackId }}'
  name: getStackInformation
  onFailure: step:deleteS3StackOnError
  outputs:
  - Name: S3BucketName
    Selector: $.Stacks[0].Outputs[0].OutputValue
    Type: String
- action: aws:executeScript
  description: Uploads the index and error page to the hosting S3 bucket.
  inputs:
    Handler: script_handler
    InputPayload:
      S3BucketName: '{{ getStackInformation.S3BucketName }}'
    Runtime: python3.6
    Script: "import boto3
def script_handler(events, context):

  s3 = boto3.resource('s3')

        data = """<html xmlns="http://www.w3.org/1999/xhtml" >
  <head>
 
         <title>My Website Home Page</title>
  </head>
  <body>
    <h1>Welcome
       to my website</h1>
    <p>Now hosted on Amazon S3!</p>
  </body>
</html>"
      ""

  s3.Bucket(events["S3BucketName"]).put_object(Key='index.html', Body=data)

      
  data = """<html xmlns="http://www.w3.org/1999/xhtml" >
  <head>

          <title>Error</title>
  </head>
  <body>
    <p>Encountered an error.</p>

        </body>
</html>"""

  s3.Bucket(events["S3BucketName"]).put_object(Key='error.html',
       Body=data)"
  isEnd: true
  name: uploadContent
  onFailure: step:deleteS3StackOnError
- action: aws:deleteStack
  description: Deletes the CloudFormation stack when an error is encountered.
  inputs:
    StackName: '{{ createS3Stack.StackId }}'
  name: deleteS3StackOnError
parameters:
  AutomationAssumeRole:
    default: ''
    description: (Optional) The ARN of the role that allows Automation to perform
      the actions on your behalf
    type: String
  RootDomainName:
    description: (Required) The custom domain that will redirect to the s3 bucket
      endpoint
    type: String
schemaVersion: '0.3'
