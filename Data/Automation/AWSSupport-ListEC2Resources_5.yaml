description: "*This document will focus on EC2 related resources (Instances, EIP's,
   EBS Volumes, ASG's) and help you to list the resources from your AWS Account.*
    

---
This document has four parameters
- (Optional) AutomationAssumeRole
   for the IAM role required for executing AWS APIs
- (Optional) BucketName, if
   you would like to save a CSV.
- (Optional) RegionsToQuery for regions from where
   you would like to list the resources, by default it would query all active regions
   for listing resources.
- (Optional) DisplayResourceDeletionDocumentation for
   surfacing relevant documentation links to delete the resources, by default it
   would be 'Yes'.

**This document provides sensitive data, please make sure appropriate
   bucket policy is in place for the bucket specified in the parameter 'BucketName'.
   If the bucket is public CSV would not be uploaded.**"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
- "listEC2Instances.EC2_Instances"
- "listImages.AMIs"
- "listVolumes.EBS_Volumes"
- "listSnapshots.Volume_Snapshots"
- "listEIPs.EIPs"
- "listENIs.NetworkInterfaces"
- "listAutoScalingGroups.AutoScalingGroups"
- "listElasticLoadBalancers.ELBs"
parameters:
  AutomationAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role that allows Automation to perform
       the actions on your behalf."
    allowedPattern: "^$|^arn:aws:iam::[0-9]*:role/[/w+=,.@-]+$"
    default: ""
  BucketName:
    type: "String"
    description: "(Optional) If you would like to save a CSV, please provide a bucket
       name"
    default: ""
    allowedPattern: "^$|^[a-zA-Z0-9][a-zA-Z0-9.-_]{1,255}$"
  RegionsToQuery:
    type: "String"
    default: "All"
    description: "(Optional) List resources in regions specified by this parameter.
       By default the document queries all regions however to override the behaviour
       it is possible to pass a comma delimited region list such as 'us-east-1,us-west-1'"
  DisplayResourceDeletionDocumentation:
    type: "String"
    default: "True"
    description: "(Optional) If set to True the automation creates links in the output
       to documentation related to deleting your resources."
    allowedValues:
    - "True"
    - "False"
mainSteps:
- name: "getActiveRegions"
  action: "aws:executeAwsApi"
  outputs:
  - Name: "ActiveRegions"
    Selector: "$.Regions"
    Type: "MapList"
  inputs:
    Api: "DescribeRegions"
    Service: "ec2"
  description: "#### Get Active Regions for the AWS Account"
  nextStep: "validateRegionsToQuery"
  onFailure: "Abort"
  isCritical: true
- name: "validateRegionsToQuery"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_A='RegionName'
from botocore.exceptions import ClientError
import
       boto3
class RegionValidation:
tdef __init__(A,active_regions,regions_to_query):A.all_regions=A.get_all_regions();A.active_regions=active_regions;A.regions_to_query=regions_to_query;A.known_issue=['me-south-1','af-south-1','eu-south-1','ap-east-1']

      tdef get_all_regions(C):
tttry:return[A[_A]for A in boto3.client('ec2',region_name='us-east-1').describe_regions(AllRegions=True)['Regions']]

      ttexcept ClientError as A:print('Something Went Wrong with the API Call!');print(str(A))

      ttexcept Exception as B:print('get_all_regions: Oops! Something went wrong!');print(B)

      def script_handler(events,context):
tO='not_running_in';N='inactive_regions';M='invalid_regions';L='valid_regions';J='RegionsToQuery';H=events;F='Empty';B=','

      ttry:
ttA=[];I=[];D=[];E=[A[_A]for A in H['ActiveRegions']]
ttif H[J]==''or
       H[J].lower()=='all':C=RegionValidation(E,E);A=E;A=list(set(A)-set(C.known_issue));D=list(set(C.all_regions)-set(E));return{L:B.join(A)if
       len(A)>0 else F,M:F,N:B.join(D)if len(D)>0 else F,O:B.join(C.known_issue)}

      ttelse:
tttK=H[J].split(B);C=RegionValidation(E,K)
tttfor G in K:

      ttttif G in C.all_regions:
tttttif G in E:A.append(G)
ttttt
      else:D.append(G)
ttttelse:I.append(G)
tttA=list(set(A)-set(C.known_issue));return{L:B.join(A)if
       len(A)>0 else F,M:B.join(I)if len(I)>0 else F,N:B.join(D)if len(D)>0 else
       F,O:B.join(C.known_issue)}
texcept Exception as P:print('script_handler:
       Oops! Something went wrong!');print(P)
"
    InputPayload:
      RegionsToQuery: "{{RegionsToQuery}}"
      ActiveRegions: "{{getActiveRegions.ActiveRegions}}"
  outputs:
  - Name: "ValidRegions"
    Selector: "$.Payload.valid_regions"
    Type: "String"
  - Name: "InvalidRegions"
    Selector: "$.Payload.invalid_regions"
    Type: "String"
  - Name: "InactiveRegions"
    Selector: "$.Payload.inactive_regions"
    Type: "String"
  - Name: "Known_Issue_Not_Running_In"
    Selector: "$.Payload.not_running_in"
    Type: "String"
  description: "#### Verify if the regions provided in the RegionToQuery Parameter
     are valid AWS Regions"
- name: "assertIfValidRegions"
  action: "aws:branch"
  inputs:
    Choices:
    - NextStep: "uploadCSVToS3"
      Variable: "{{validateRegionsToQuery.ValidRegions}}"
      StringEquals: "Empty"
  description: "#### If no valid regions, end the document"
- name: "listEC2Instances"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_F='Message'
_E='region'
_D='resource_list'
_C='Code'
_B='failed'

      _A='error'
from botocore.exceptions import ClientError
from multiprocessing
       import Process,Pipe
from botocore.config import Config
import textwrap,boto3

      class Prettify:
t' Prettify the json data for SSM Console '
tdef __init__(A,tableFormat):A.tableFormat=tableFormat;A.formattedVersion=''

      tdef json_to_table_via_print(A,listOfResources):
ttC=listOfResources
t
      ttry:
tttif len(C)>0:
ttttE=list(C[0].keys());A.formattedVersion=A.formattedVersion.join([A.tableFormat[B].format(E[B])for
       B in range(len(E))])
ttttfor F in range(len(C)):
tttttG='';B=list(C[F].values())

      tttttfor D in range(len(B)-1):B[D]=textwrap.shorten(B[D],width=40,placeholder='...')if
       len(str(B[D]))>40 else B[D]
tttttA.formattedVersion+=G.join([A.tableFormat[C].format(B[C])for
       C in range(len(B))])
tttelse:A.formattedVersion='No Resources Found'

      tttreturn A.formattedVersion
ttexcept Exception as H:print(H)
class Parallelize:

      t' Parallize the API calling mechanism '
tdef __init__(A,describeFunction,service):A.describeFunction=describeFunction;A.service=service;A.resource_list=[];A.processes=[];A.parent_connections=[];A.failed=[]

      tdef set_config(B,region):A=Config(retries={'max_attempts':10,'mode':'standard'},region_name=region);return
       A
tdef create_client(B,service,region):
ttC=region;A=service;D=['cloudformation','cloudwatch','dynamodb','ec2','glacier','iam','opsworks','s3sns','sqs']

      ttif A in D:return boto3.resource(A,config=B.set_config(C))
ttelse:return
       boto3.client(A,config=B.set_config(C))
tdef parallelize(A,regions):
tt
      for E in regions:D,F=Pipe();A.parent_connections.append(D);G=A.create_client(A.service,E);B=Process(target=A.describeFunction,args=(G,E,F));A.processes.append(B)

      ttfor B in A.processes:B.start()
ttfor B in A.processes:B.join()
tt
      for D in A.parent_connections:
tttC=D.recv()
tttif _D in C:A.resource_list.extend(C[_D])

      tttif _B in C:A.failed.append(C[_B])
def get_resource(client,region,conn):

      tI='AvailabilityZone';H='Key';E=region;D='Name';B=conn;J=['running','pending','stopped','stopping'];F=[]

      ttry:
ttfor A in client.instances.filter(Filters=[{D:'instance-state-name','Values':J}]):

      tttG='-'
tttif A.tags:
ttttfor C in A.tags:G=C['Value']if H in C
       and C[H].lower()=='name'else'-'
tttK={'InstanceId':A.id,D:G,'State':A.state[D],'Region':A.placement[I][:-1],'Console':'https://console.aws.amazon.com/ec2/v2/home?region={}#Instances:search={}'.format(A.placement[I][:-1],A.id)};F.append(K)

      ttB.send({_D:F})
texcept ClientError as L:B.send({_B:{_A:L.response['Error'],_E:E}})

      texcept Exception as M:B.send({_B:{_A:{_C:'InternalFailure',_F:M},_E:E}})

      tB.close()
def script_handler(events,context):
tJ='True';I='Documentation';H='{:<15}';G='{:<24}';B=events;D='Terminate
       your instance - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html';C=Parallelize(get_resource,'ec2');C.parallelize(B['Regions'].split(','));K=Prettify([G,G,H,H,'{:<15}
      n']);L=K.json_to_table_via_print(C.resource_list);E='';F=C.failed
tif len(F)>0:

      ttfor A in F:
tttif A[_A][_C]=='UnauthorizedOperation'or A[_A][_C]=='AccessDenied':raise
       Exception('{} - {}'.format(A[_A][_C],A[_A][_F]))
tttelse:E+='{} - {}:{}
      n'.format(A[_E],A[_A][_C],A[_A][_F])
treturn{_D:'{}
{}'.format(L,D if B[I]==J
       else''),_B:E,'how_to':D if B[I]==J else"Parameter 'DisplayResourceDeletionDocumentation'
       was set as 'False'"}
"
    InputPayload:
      Regions: "{{validateRegionsToQuery.ValidRegions}}"
      Documentation: "{{DisplayResourceDeletionDocumentation}}"
  outputs:
  - Name: "EC2_Instances"
    Selector: "$.Payload.resource_list"
    Type: "String"
  - Name: "Failures"
    Selector: "$.Payload.failed"
    Type: "String"
  - Name: "How to terminate resource"
    Selector: "$.Payload.how_to"
    Type: "String"
  description: "#### List EC2 Instances"
  onFailure: "Continue"
  isCritical: false
- name: "listImages"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_F='Message'
_E='region'
_D='resource_list'
_C='Code'
_B='failed'

      _A='error'
from botocore.exceptions import ClientError
from multiprocessing
       import Process,Pipe
from botocore.config import Config
import textwrap,boto3

      class Prettify:
t' Prettify the json data for SSM Console '
tdef __init__(A,tableFormat):A.tableFormat=tableFormat;A.formattedVersion=''

      tdef json_to_table_via_print(A,listOfResources):
ttC=listOfResources
t
      ttry:
tttif len(C)>0:
ttttE=list(C[0].keys());A.formattedVersion=A.formattedVersion.join([A.tableFormat[B].format(E[B])for
       B in range(len(E))])
ttttfor F in range(len(C)):
tttttG='';B=list(C[F].values())

      tttttfor D in range(len(B)-1):B[D]=textwrap.shorten(B[D],width=40,placeholder='...')if
       len(str(B[D]))>40 else B[D]
tttttA.formattedVersion+=G.join([A.tableFormat[C].format(B[C])for
       C in range(len(B))])
tttelse:A.formattedVersion='No Resources Found'

      tttprint(A.formattedVersion);return A.formattedVersion
ttexcept Exception
       as H:print(H)
class Parallelize:
t' Parallize the API calling mechanism
       '
tdef __init__(A,describeFunction,service):A.describeFunction=describeFunction;A.service=service;A.resource_list=[];A.processes=[];A.parent_connections=[];A.failed=[]

      tdef set_config(B,region):A=Config(retries={'max_attempts':10,'mode':'standard'},region_name=region);return
       A
tdef create_client(B,service,region):
ttC=region;A=service;D=['cloudformation','cloudwatch','dynamodb','ec2','glacier','iam','opsworks','s3sns','sqs']

      ttif A in D:return boto3.resource(A,config=B.set_config(C))
ttelse:return
       boto3.client(A,config=B.set_config(C))
tdef parallelize(A,regions):
tt
      for E in regions:D,F=Pipe();A.parent_connections.append(D);G=A.create_client(A.service,E);B=Process(target=A.describeFunction,args=(G,E,F));A.processes.append(B)

      ttfor B in A.processes:B.start()
ttfor B in A.processes:B.join()
tt
      for D in A.parent_connections:
tttC=D.recv()
tttif _D in C:A.resource_list.extend(C[_D])

      tttif _B in C:A.failed.append(C[_B])
def get_resource(client,region,conn):

      t'Describes all of the images available to you.';C=conn;B=region;D=[]
ttry:

      ttfor A in client.images.filter(Owners=['self']):E={'Name':A.name,'ImageId':A.id,'ImageLocation':A.image_location,'State':A.state,'Public':A.public,'Region':B,'Console':'https://console.aws.amazon.com/ec2/home?region={}#Images:search={}'.format(B,A.id)};D.append(E)

      ttC.send({_D:D})
texcept ClientError as F:C.send({_B:{_A:F.response['Error'],_E:B}})

      texcept Exception as G:C.send({_B:{_A:{_C:'InternalFailure',_F:G},_E:B}})

      tC.close()
def script_handler(events,context):
tI='True';H='Documentation';D='{:<15}';B=events;E='Deregistering
       your Linux AMI - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/deregister-ami.html';C=Parallelize(get_resource,'ec2');C.parallelize(B['Regions'].split(','));F='-';G=C.failed

      tif len(G)>0:
ttfor A in G:
tttif A[_A][_C]=='UnauthorizedOperation'or
       A[_A][_C]=='AccessDenied':raise Exception('{} - {}'.format(A[_A][_C],A[_A][_F]))

      tttelse:F+='{} - {}:{}
'.format(A[_E],A[_A][_C],A[_A][_F])
treturn{_D:'{}
      n{}'.format(Prettify(['{:<45}','{:<24}','{:<30}',D,D,D,'{:<15}
']).json_to_table_via_print(C.resource_list),E
       if B[H]==I else''),_B:F,'how_to':E if B[H]==I else"Parameter 'DisplayResourceDeletionDocumentation'
       was set as 'False'"}
"
    InputPayload:
      Regions: "{{validateRegionsToQuery.ValidRegions}}"
      Documentation: "{{DisplayResourceDeletionDocumentation}}"
  outputs:
  - Name: "AMIs"
    Selector: "$.Payload.resource_list"
    Type: "String"
  - Name: "Failures"
    Selector: "$.Payload.failed"
    Type: "String"
  - Name: "How to terminate resource"
    Selector: "$.Payload.how_to"
    Type: "String"
  description: "#### List AMIs"
  onFailure: "Continue"
  isCritical: false
- name: "listVolumes"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_F='Message'
_E='region'
_D='resource_list'
_C='Code'
_B='failed'

      _A='error'
from botocore.exceptions import ClientError
from multiprocessing
       import Process,Pipe
from botocore.config import Config
import textwrap,boto3

      class Prettify:
t' Prettify the json data for SSM Console '
tdef __init__(A,tableFormat):A.tableFormat=tableFormat;A.formattedVersion=''

      tdef json_to_table_via_print(A,listOfResources):
ttC=listOfResources
t
      ttry:
tttif len(C)>0:
ttttE=list(C[0].keys());A.formattedVersion=A.formattedVersion.join([A.tableFormat[B].format(E[B])for
       B in range(len(E))])
ttttfor F in range(len(C)):
tttttG='';B=list(C[F].values())

      tttttfor D in range(len(B)-1):B[D]=textwrap.shorten(B[D],width=40,placeholder='...')if
       len(str(B[D]))>40 else B[D]
tttttA.formattedVersion+=G.join([A.tableFormat[C].format(B[C])for
       C in range(len(B))])
tttelse:A.formattedVersion='No Resources Found'

      tttreturn A.formattedVersion
ttexcept Exception as H:print(H)
class Parallelize:

      t' Parallize the API calling mechanism '
tdef __init__(A,describeFunction,service):A.describeFunction=describeFunction;A.service=service;A.resource_list=[];A.processes=[];A.parent_connections=[];A.failed=[]

      tdef set_config(B,region):A=Config(retries={'max_attempts':10,'mode':'standard'},region_name=region);return
       A
tdef create_client(B,service,region):
ttC=region;A=service;D=['cloudformation','cloudwatch','dynamodb','ec2','glacier','iam','opsworks','s3sns','sqs']

      ttif A in D:return boto3.resource(A,config=B.set_config(C))
ttelse:return
       boto3.client(A,config=B.set_config(C))
tdef parallelize(A,regions):
tt
      for E in regions:D,F=Pipe();A.parent_connections.append(D);G=A.create_client(A.service,E);B=Process(target=A.describeFunction,args=(G,E,F));A.processes.append(B)

      ttfor B in A.processes:B.start()
ttfor B in A.processes:B.join()
tt
      for D in A.parent_connections:
tttC=D.recv()
tttif _D in C:A.resource_list.extend(C[_D])

      tttif _B in C:A.failed.append(C[_B])
def get_resource(client,region,conn):

      t'Describes all Volumes';C=region;B=conn;D=[];E=['available','in-use','creating',_A]

      ttry:
ttfor A in client.volumes.filter(Filters=[{'Name':'status','Values':E}]):F={'VolumeId':A.id,'State':A.state,'Encrypted':A.encrypted,'AvailabilityZone':A.availability_zone,'Region':A.availability_zone[:-1],'Console':'https://console.aws.amazon.com/ec2/home?region={}#Volumes:search={}'.format(A.availability_zone[:-1],A.id)};D.append(F)

      ttB.send({_D:D})
texcept ClientError as G:B.send({_B:{_A:G.response['Error'],_E:C}})

      texcept Exception as H:B.send({_B:{_A:{_C:'InternalFailure',_F:H},_E:C}})

      tB.close()
def script_handler(events,context):
tJ='True';I='Documentation';H='{:<24}';D='{:<15}';B=events;E='Deleting
       an Amazon EBS volume - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html';C=Parallelize(get_resource,'ec2');C.parallelize(B['Regions'].split(','));F='-';G=C.failed

      tif len(G)>0:
ttfor A in G:
tttif A[_A][_C]=='UnauthorizedOperation'or
       A[_A][_C]=='AccessDenied':raise Exception('{} - {}'.format(A[_A][_C],A[_A][_F]))

      tttelse:F+='{} - {}:{}
'.format(A[_E],A[_A][_C],A[_A][_F])
treturn{_D:'{}
      n{}'.format(Prettify([H,D,D,H,D,'{:<15}
']).json_to_table_via_print(C.resource_list),E
       if B[I]==J else''),_B:F,'how_to':E if B[I]==J else"Parameter 'DisplayResourceDeletionDocumentation'
       was set as 'False'"}
"
    InputPayload:
      Regions: "{{validateRegionsToQuery.ValidRegions}}"
      Documentation: "{{DisplayResourceDeletionDocumentation}}"
  outputs:
  - Name: "EBS_Volumes"
    Selector: "$.Payload.resource_list"
    Type: "String"
  - Name: "Failures"
    Selector: "$.Payload.failed"
    Type: "String"
  - Name: "How to terminate resource"
    Selector: "$.Payload.how_to"
    Type: "String"
  description: "#### List EBS Volumes"
  onFailure: "Continue"
  isCritical: false
- name: "listSnapshots"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_F='Message'
_E='region'
_D='resource_list'
_C='Code'
_B='failed'

      _A='error'
from botocore.exceptions import ClientError
from multiprocessing
       import Process,Pipe
from botocore.config import Config
import textwrap,boto3

      class Prettify:
t' Prettify the json data for SSM Console '
tdef __init__(A,tableFormat):A.tableFormat=tableFormat;A.formattedVersion=''

      tdef json_to_table_via_print(A,listOfResources):
ttC=listOfResources
t
      ttry:
tttif len(C)>0:
ttttE=list(C[0].keys());A.formattedVersion=A.formattedVersion.join([A.tableFormat[B].format(E[B])for
       B in range(len(E))])
ttttfor F in range(len(C)):
tttttG='';B=list(C[F].values())

      tttttfor D in range(len(B)-1):B[D]=textwrap.shorten(B[D],width=40,placeholder='...')if
       len(str(B[D]))>40 else B[D]
tttttA.formattedVersion+=G.join([A.tableFormat[C].format(B[C])for
       C in range(len(B))])
tttelse:A.formattedVersion='No Resources Found'

      tttreturn A.formattedVersion
ttexcept Exception as H:print(H)
class Parallelize:

      t' Parallize the API calling mechanism '
tdef __init__(A,describeFunction,service):A.describeFunction=describeFunction;A.service=service;A.resource_list=[];A.processes=[];A.parent_connections=[];A.failed=[]

      tdef set_config(B,region):A=Config(retries={'max_attempts':10,'mode':'standard'},region_name=region);return
       A
tdef create_client(B,service,region):
ttC=region;A=service;D=['cloudformation','cloudwatch','dynamodb','ec2','glacier','iam','opsworks','s3sns','sqs']

      ttif A in D:return boto3.resource(A,config=B.set_config(C))
ttelse:return
       boto3.client(A,config=B.set_config(C))
tdef parallelize(A,regions):
tt
      for E in regions:D,F=Pipe();A.parent_connections.append(D);G=A.create_client(A.service,E);B=Process(target=A.describeFunction,args=(G,E,F));A.processes.append(B)

      ttfor B in A.processes:B.start()
ttfor B in A.processes:B.join()
tt
      for D in A.parent_connections:
tttC=D.recv()
tttif _D in C:A.resource_list.extend(C[_D])

      tttif _B in C:A.failed.append(C[_B])
def get_resource(client,region,conn):

      t'Describes all of the EBS snapshots available to you.';B=conn;A=region;D=[]

      ttry:
ttfor C in client.snapshots.filter(OwnerIds=['self']):E={'SnapshotId':C.id,'VolumeId':C.volume_id,'Encrypted':C.encrypted,'Region':A,'Console':'https://console.aws.amazon.com/ec2/home?region={}#Snapshots:search={}'.format(A,C.id)};D.append(E)

      ttB.send({_D:D})
texcept ClientError as F:B.send({_B:{_A:F.response['Error'],_E:A}})

      texcept Exception as G:B.send({_B:{_A:{_C:'InternalFailure',_F:G},_E:A}})

      tB.close()
def script_handler(events,context):
tJ='True';I='Documentation';H='{:<15}';G='{:<24}';B=events;D='Deleting
       an Amazon EBS snapshot - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html';C=Parallelize(get_resource,'ec2');C.parallelize(B['Regions'].split(','));E='-';F=C.failed

      tif len(F)>0:
ttfor A in F:
tttif A[_A][_C]=='UnauthorizedOperation'or
       A[_A][_C]=='AccessDenied':raise Exception('{} - {}'.format(A[_A][_C],A[_A][_F]))

      tttelse:E+='{} - {}:{}
'.format(A[_E],A[_A][_C],A[_A][_F])
treturn{_D:'{}
      n{}'.format(Prettify([G,G,H,H,'{:<15}
']).json_to_table_via_print(C.resource_list),D
       if B[I]==J else''),_B:E,'how_to':D if B[I]==J else"Parameter 'DisplayResourceDeletionDocumentation'
       was set as 'False'"}
"
    InputPayload:
      Regions: "{{validateRegionsToQuery.ValidRegions}}"
      Documentation: "{{DisplayResourceDeletionDocumentation}}"
  outputs:
  - Name: "Volume_Snapshots"
    Selector: "$.Payload.resource_list"
    Type: "String"
  - Name: "Failures"
    Selector: "$.Payload.failed"
    Type: "String"
  - Name: "How to terminate resource"
    Selector: "$.Payload.how_to"
    Type: "String"
  description: "#### List Volume Snapshots"
  onFailure: "Continue"
  isCritical: false
- name: "listEIPs"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_F='Message'
_E='region'
_D='resource_list'
_C='Code'
_B='failed'

      _A='error'
from botocore.exceptions import ClientError
from multiprocessing
       import Process,Pipe
from botocore.config import Config
import textwrap,boto3

      class Prettify:
t' Prettify the json data for SSM Console '
tdef __init__(A,tableFormat):A.tableFormat=tableFormat;A.formattedVersion=''

      tdef json_to_table_via_print(A,listOfResources):
ttC=listOfResources
t
      ttry:
tttif len(C)>0:
ttttE=list(C[0].keys());A.formattedVersion=A.formattedVersion.join([A.tableFormat[B].format(E[B])for
       B in range(len(E))])
ttttfor F in range(len(C)):
tttttG='';B=list(C[F].values())

      tttttfor D in range(len(B)-1):B[D]=textwrap.shorten(B[D],width=40,placeholder='...')if
       len(str(B[D]))>40 else B[D]
tttttA.formattedVersion+=G.join([A.tableFormat[C].format(B[C])for
       C in range(len(B))])
tttelse:A.formattedVersion='No Resources Found'

      tttreturn A.formattedVersion
ttexcept Exception as H:print(H)
class Parallelize:

      t' Parallize the API calling mechanism '
tdef __init__(A,describeFunction,service):A.describeFunction=describeFunction;A.service=service;A.resource_list=[];A.processes=[];A.parent_connections=[];A.failed=[]

      tdef set_config(B,region):A=Config(retries={'max_attempts':10,'mode':'standard'},region_name=region);return
       A
tdef create_client(B,service,region):
ttC=region;A=service;D=['cloudformation','cloudwatch','dynamodb','ec2','glacier','iam','opsworks','s3sns','sqs']

      ttif A in D:return boto3.resource(A,config=B.set_config(C))
ttelse:return
       boto3.client(A,config=B.set_config(C))
tdef parallelize(A,regions):
tt
      for E in regions:D,F=Pipe();A.parent_connections.append(D);G=A.create_client(A.service,E);B=Process(target=A.describeFunction,args=(G,E,F));A.processes.append(B)

      ttfor B in A.processes:B.start()
ttfor B in A.processes:B.join()
tt
      for D in A.parent_connections:
tttC=D.recv()
tttif _D in C:A.resource_list.extend(C[_D])

      tttif _B in C:A.failed.append(C[_B])
def get_resource(client,region,conn):

      t'Describes all of the EIPs.';C=conn;B=region;D=[]
ttry:
ttfor A in client.vpc_addresses.all():E={'PublicIp':A.public_ip,'PrivateIpAddress':A.private_ip_address
       if A.private_ip_address else'-','NetworkInterfaceId':A.network_interface_id
       if A.network_interface_id else'-','NetworkInterfaceOwnerId':A.network_interface_owner_id
       if A.network_interface_owner_id else'-','Region':B,'Console':'https://console.aws.amazon.com/ec2/home?region={}#Addresses:search={}'.format(B,A.public_ip)};D.append(E)

      ttC.send({_D:D})
texcept ClientError as F:C.send({_B:{_A:F.response['Error'],_E:B}})

      texcept Exception as G:C.send({_B:{_A:{_C:'InternalFailure',_F:G},_E:B}})

      tC.close()
def script_handler(events,context):
tI='True';H='Documentation';C=events;B='{:<24}';E='Releasing
       an Elastic IP address - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#using-instance-addressing-eips-releasing';D=Parallelize(get_resource,'ec2');D.parallelize(C['Regions'].split(','));F='-';G=D.failed

      tif len(G)>0:
ttfor A in G:
tttif A[_A][_C]=='UnauthorizedOperation'or
       A[_A][_C]=='AccessDenied':raise Exception('{} - {}'.format(A[_A][_C],A[_A][_F]))

      tttelse:F+='{} - {}:{}
'.format(A[_E],A[_A][_C],A[_A][_F])
treturn{_D:'{}
      n{}'.format(Prettify([B,B,B,B,'{:<15}','{:<15}
']).json_to_table_via_print(D.resource_list),E
       if C[H]==I else''),_B:F,'how_to':E if C[H]==I else"Parameter 'DisplayResourceDeletionDocumentation'
       was set as 'False'"}
"
    InputPayload:
      Regions: "{{validateRegionsToQuery.ValidRegions}}"
      Documentation: "{{DisplayResourceDeletionDocumentation}}"
  outputs:
  - Name: "EIPs"
    Selector: "$.Payload.resource_list"
    Type: "String"
  - Name: "Failures"
    Selector: "$.Payload.failed"
    Type: "String"
  - Name: "How to terminate resource"
    Selector: "$.Payload.how_to"
    Type: "String"
  description: "#### List Elastic IPs"
  onFailure: "Continue"
  isCritical: false
- name: "listENIs"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_F='Message'
_E='region'
_D='resource_list'
_C='Code'
_B='failed'

      _A='error'
from botocore.exceptions import ClientError
from multiprocessing
       import Process,Pipe
from botocore.config import Config
import textwrap,boto3

      class Prettify:
t' Prettify the json data for SSM Console '
tdef __init__(A,tableFormat):A.tableFormat=tableFormat;A.formattedVersion=''

      tdef json_to_table_via_print(A,listOfResources):
ttC=listOfResources
t
      ttry:
tttif len(C)>0:
ttttE=list(C[0].keys());A.formattedVersion=A.formattedVersion.join([A.tableFormat[B].format(E[B])for
       B in range(len(E))])
ttttfor F in range(len(C)):
tttttG='';B=list(C[F].values())

      tttttfor D in range(len(B)-1):B[D]=textwrap.shorten(B[D],width=50,placeholder='...')if
       len(str(B[D]))>50 else B[D]
tttttA.formattedVersion+=G.join([A.tableFormat[C].format(B[C])for
       C in range(len(B))])
tttelse:A.formattedVersion='No Resources Found'

      tttreturn A.formattedVersion
ttexcept Exception as H:print(H)
class Parallelize:

      t' Parallize the API calling mechanism '
tdef __init__(A,describeFunction,service):A.describeFunction=describeFunction;A.service=service;A.resource_list=[];A.processes=[];A.parent_connections=[];A.failed=[]

      tdef set_config(B,region):A=Config(retries={'max_attempts':10,'mode':'standard'},region_name=region);return
       A
tdef create_client(B,service,region):
ttC=region;A=service;D=['cloudformation','cloudwatch','dynamodb','ec2','glacier','iam','opsworks','s3sns','sqs']

      ttif A in D:return boto3.resource(A,config=B.set_config(C))
ttelse:return
       boto3.client(A,config=B.set_config(C))
tdef parallelize(A,regions):
tt
      for E in regions:D,F=Pipe();A.parent_connections.append(D);G=A.create_client(A.service,E);B=Process(target=A.describeFunction,args=(G,E,F));A.processes.append(B)

      ttfor B in A.processes:B.start()
ttfor B in A.processes:B.join()
tt
      for D in A.parent_connections:
tttC=D.recv()
tttif _D in C:A.resource_list.extend(C[_D])

      tttif _B in C:A.failed.append(C[_B])
def get_resource(client,region,conn):

      t'Describes all ENIs';C=region;B=conn;D=[]
ttry:
ttfor A in client.network_interfaces.all():E={'NetworkInterfaceId':A.id,'Description':A.description
       if A.description else'-','OwnerId':A.owner_id,'Status':A.status,'Region':A.availability_zone[:-1],'Console':'https://console.aws.amazon.com/ec2/home?region={}#NIC:search={}'.format(A.availability_zone[:-1],A.id)};D.append(E)

      ttB.send({_D:D})
texcept ClientError as F:B.send({_B:{_A:F.response['Error'],_E:C}})

      texcept Exception as G:B.send({_B:{_A:{_C:'InternalFailure',_F:G},_E:C}})

      tB.close()
def script_handler(events,context):
tI='True';H='Documentation';G='{:<15}';B=events;D='Knowledge
       Center - https://aws.amazon.com/premiumsupport/knowledge-center/vpc-detach-or-delete-eni/
       
Deleting a network interface - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#delete_eni';C=Parallelize(get_resource,'ec2');C.parallelize(B['Regions'].split(','));E='-';F=C.failed

      tif len(F)>0:
ttfor A in F:
tttif A[_A][_C]=='UnauthorizedOperation'or
       A[_A][_C]=='AccessDenied':raise Exception('{} - {}'.format(A[_A][_C],A[_A][_F]))

      tttelse:E+='{} - {}:{}
'.format(A[_E],A[_A][_C],A[_A][_F])
treturn{_D:'{}
      n{}'.format(Prettify(['{:<24}','{:<50}',G,'{:<10}',G,'{:<15}
']).json_to_table_via_print(C.resource_list),D
       if B[H]==I else''),_B:E,'how_to':D if B[H]==I else"Parameter 'DisplayResourceDeletionDocumentation'
       was set as 'False'"}
"
    InputPayload:
      Regions: "{{validateRegionsToQuery.ValidRegions}}"
      Documentation: "{{DisplayResourceDeletionDocumentation}}"
  outputs:
  - Name: "NetworkInterfaces"
    Selector: "$.Payload.resource_list"
    Type: "String"
  - Name: "Failures"
    Selector: "$.Payload.failed"
    Type: "String"
  - Name: "How to terminate resource"
    Selector: "$.Payload.how_to"
    Type: "String"
  description: "#### List Network Interfaces"
  onFailure: "Continue"
  isCritical: false
- name: "listAutoScalingGroups"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_F='Message'
_E='region'
_D='resource_list'
_C='Code'
_B='failed'

      _A='error'
from botocore.exceptions import ClientError
from multiprocessing
       import Process,Pipe
from botocore.config import Config
import textwrap,boto3

      class Prettify:
t' Prettify the json data for SSM Console '
tdef __init__(A,tableFormat):A.tableFormat=tableFormat;A.formattedVersion=''

      tdef json_to_table_via_print(A,listOfResources):
ttC=listOfResources
t
      ttry:
tttif len(C)>0:
ttttE=list(C[0].keys());A.formattedVersion=A.formattedVersion.join([A.tableFormat[B].format(E[B])for
       B in range(len(E))])
ttttfor F in range(len(C)):
tttttG='';B=list(C[F].values())

      tttttfor D in range(len(B)-1):B[D]=textwrap.shorten(B[D],width=40,placeholder='...')if
       len(str(B[D]))>40 else B[D]
tttttA.formattedVersion+=G.join([A.tableFormat[C].format(B[C])for
       C in range(len(B))])
tttelse:A.formattedVersion='No Resources Found'

      tttreturn A.formattedVersion
ttexcept Exception as H:print(H)
class Parallelize:

      t' Parallize the API calling mechanism '
tdef __init__(A,describeFunction,service):A.describeFunction=describeFunction;A.service=service;A.resource_list=[];A.processes=[];A.parent_connections=[];A.failed=[]

      tdef set_config(B,region):A=Config(retries={'max_attempts':10,'mode':'standard'},region_name=region);return
       A
tdef create_client(B,service,region):
ttC=region;A=service;D=['cloudformation','cloudwatch','dynamodb','ec2','glacier','iam','opsworks','s3sns','sqs']

      ttif A in D:return boto3.resource(A,config=B.set_config(C))
ttelse:return
       boto3.client(A,config=B.set_config(C))
tdef parallelize(A,regions):
tt
      for E in regions:D,F=Pipe();A.parent_connections.append(D);G=A.create_client(A.service,E);B=Process(target=A.describeFunction,args=(G,E,F));A.processes.append(B)

      ttfor B in A.processes:B.start()
ttfor B in A.processes:B.join()
tt
      for D in A.parent_connections:
tttC=D.recv()
tttif _D in C:A.resource_list.extend(C[_D])

      tttif _B in C:A.failed.append(C[_B])
def get_resource(client,region,conn):

      t'Describes all Auto Scaling Groups';M='LaunchConfigurationName';L='AutoScalingGroupName';K='NextToken';J='AutoScalingGroups';G=client;F='LaunchTemplate';D=conn;C=region;H='';E=[];I=[]

      ttry:
ttB=G.describe_auto_scaling_groups(MaxRecords=100)
ttwhile True:

      tttif len(B[J])>0:E.extend(B[J])
tttif K in B:H=B[K]
tttelse:break

      tttB=G.describe_auto_scaling_groups(MaxRecords=100,NextToken=H)
ttif E:

      tttfor A in E:N={'Name':A[L],'LaunchConfiguration':A[M]if M in A else'-',F:A[F]['LaunchTemplateName']if
       F in A else'-','Associated Instances':len([B['InstanceId']for B in A['Instances']]),'Region':C,'Console':'https://console.aws.amazon.com/ec2autoscaling/home?region={}#/details/{}?view=details'.format(C,A[L])};I.append(N)

      ttD.send({_D:I})
texcept ClientError as O:D.send({_B:{_A:O.response['Error'],_E:C}})

      texcept Exception as P:D.send({_B:{_A:{_C:'InternalFailure',_F:P},_E:C}})

      tD.close()
def script_handler(events,context):
tI='True';H='Documentation';D='{:<48}';B=events;E='Deleting
       Your Auto Scaling Infrastructure - https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html';C=Parallelize(get_resource,'autoscaling');C.parallelize(B['Regions'].split(','));F='-';G=C.failed

      tif len(G)>0:
ttfor A in G:
tttif A[_A][_C]=='UnauthorizedOperation'or
       A[_A][_C]=='AccessDenied':raise Exception('{} - {}'.format(A[_A][_C],A[_A][_F]))

      tttelse:F+='{} - {}:{}
'.format(A[_E],A[_A][_C],A[_A][_F])
treturn{_D:'{}
      n{}'.format(Prettify([D,D,D,'{:<24}','{:<15}','{:<15}
']).json_to_table_via_print(C.resource_list),E
       if B[H]==I else''),_B:F,'how_to':E if B[H]==I else"Parameter 'DisplayResourceDeletionDocumentation'
       was set as 'False'"}
"
    InputPayload:
      Regions: "{{validateRegionsToQuery.ValidRegions}}"
      Documentation: "{{DisplayResourceDeletionDocumentation}}"
  outputs:
  - Name: "AutoScalingGroups"
    Selector: "$.Payload.resource_list"
    Type: "String"
  - Name: "Failures"
    Selector: "$.Payload.failed"
    Type: "String"
  - Name: "How to terminate resource"
    Selector: "$.Payload.how_to"
    Type: "String"
  description: "#### List Auto Scaling Groups"
  onFailure: "Continue"
  isCritical: false
- name: "listElasticLoadBalancers"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_L='InternalFailure'
_K='https://console.aws.amazon.com/ec2/v2/home?region={}#LoadBalancers:search={}'

      _J='Console'
_I='Region'
_H='Message'
_G='NextToken'
_F='region'
_E='resource_list'

      _D='Code'
_C='LoadBalancerName'
_B='failed'
_A='error'
from botocore.exceptions
       import ClientError
from multiprocessing import Process,Pipe
from botocore.config
       import Config
import textwrap,boto3
class Prettify:
t' Prettify the json
       data for SSM Console '
tdef __init__(A,tableFormat):A.tableFormat=tableFormat;A.formattedVersion=''

      tdef json_to_table_via_print(A,listOfResources):
ttC=listOfResources
t
      ttry:
tttif len(C)>0:
ttttE=list(C[0].keys());A.formattedVersion=A.formattedVersion.join([A.tableFormat[B].format(E[B])for
       B in range(len(E))])
ttttfor F in range(len(C)):
tttttG='';B=list(C[F].values())

      tttttfor D in range(len(B)-1):B[D]=textwrap.shorten(B[D],width=40,placeholder='...')if
       len(str(B[D]))>40 else B[D]
tttttA.formattedVersion+=G.join([A.tableFormat[C].format(B[C])for
       C in range(len(B))])
tttelse:A.formattedVersion='No Resources Found'

      tttreturn A.formattedVersion
ttexcept Exception as H:print(H)
class Parallelize:

      t' Parallize the API calling mechanism '
tdef __init__(A,describeFunction,service):A.describeFunction=describeFunction;A.service=service;A.resource_list=[];A.processes=[];A.parent_connections=[];A.failed=[]

      tdef set_config(B,region):A=Config(retries={'max_attempts':10,'mode':'standard'},region_name=region);return
       A
tdef create_client(B,service,region):
ttC=region;A=service;D=['cloudformation','cloudwatch','dynamodb','ec2','glacier','iam','opsworks','s3sns','sqs']

      ttif A in D:return boto3.resource(A,config=B.set_config(C))
ttelse:return
       boto3.client(A,config=B.set_config(C))
tdef parallelize(A,regions):
tt
      for E in regions:D,F=Pipe();A.parent_connections.append(D);G=A.create_client(A.service,E);B=Process(target=A.describeFunction,args=(G,E,F));A.processes.append(B)

      ttfor B in A.processes:B.start()
ttfor B in A.processes:B.join()
tt
      for D in A.parent_connections:
tttC=D.recv()
tttif _E in C:A.resource_list.extend(C[_E])

      tttif _B in C:A.failed.append(C[_B])
def get_load_balancers_elb(client,region,conn):

      t'Describes all Load Balancers';I='LoadBalancerDescriptions';E=client;C=conn;B=region;F='';D=[];G=[]

      ttry:
ttA=E.describe_load_balancers(PageSize=100)
ttwhile True:
tt
      tif len(A[I])>0:D.extend(A[I])
tttif _G in A:F=A[_G]
tttelse:break

      tttA=E.describe_load_balancers(PageSize=100,Marker=F)
ttif D:
ttt
      for H in D:J={_C:H[_C],_I:B,_J:_K.format(B,H[_C])};G.append(J)
ttC.send({_E:G})

      texcept ClientError as K:C.send({_B:{_A:K.response['Error'],_F:B}})
texcept
       Exception as L:C.send({_B:{_A:{_D:_L,_H:L},_F:B}})
tC.close()
def get_load_balancers_elbv2(client,region,conn):

      t'Describes all Load Balancers';I='LoadBalancers';E=client;C=conn;B=region;F='';D=[];G=[]

      ttry:
ttA=E.describe_load_balancers(PageSize=100)
ttwhile True:
tt
      tif len(A[I])>0:D.extend(A[I])
tttif _G in A:F=A[_G]
tttelse:break

      tttA=E.describe_load_balancers(PageSize=100,Marker=F)
ttif D:
ttt
      for H in D:J={_C:H[_C],_I:B,_J:_K.format(B,H[_C])};G.append(J)
ttC.send({_E:G})

      texcept ClientError as K:C.send({_B:{_A:K.response['Error'],_F:B}})
texcept
       Exception as L:C.send({_B:{_A:{_D:_L,_H:L},_F:B}})
tC.close()
def script_handler(events,context):

      tK='True';J='Documentation';I='Regions';B=events;F='Delete a Classic Load Balancer
       - https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-getting-started.html#delete-load-balancer
                       
Delete an Application Load Balancer - https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-delete.html
                       
Delete a Network Load Balancer - https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-delete.html';C=Parallelize(get_load_balancers_elb,'elb');D=Parallelize(get_load_balancers_elbv2,'elbv2');C.parallelize(B[I].split(','));D.parallelize(B[I].split(','));G=C.resource_list;G.extend(D.resource_list);E=C.failed;E.extend(D.failed);H='-'

      tif len(E)>0:
ttfor A in E:
tttif A[_A][_D]=='UnauthorizedOperation'or
       A[_A][_D]=='AccessDenied':raise Exception('{} - {}'.format(A[_A][_D],A[_A][_H]))

      tttelse:H+='{} - {}:{}
'.format(A[_F],A[_A][_D],A[_A][_H])
treturn{_E:'{}
      n{}'.format(Prettify(['{:<48}','{:<15}','{:<15}
']).json_to_table_via_print(G),F
       if B[J]==K else''),_B:H,'how_to':F if B[J]==K else"Parameter 'DisplayResourceDeletionDocumentation'
       was set as 'False'"}
"
    InputPayload:
      Regions: "{{validateRegionsToQuery.ValidRegions}}"
      Documentation: "{{DisplayResourceDeletionDocumentation}}"
  outputs:
  - Name: "ELBs"
    Selector: "$.Payload.resource_list"
    Type: "String"
  - Name: "Failures"
    Selector: "$.Payload.failed"
    Type: "String"
  - Name: "How to terminate resource"
    Selector: "$.Payload.how_to"
    Type: "String"
  description: "#### List Elastic Load Balancers"
  onFailure: "Continue"
  isCritical: false
- name: "uploadCSVToS3"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.8"
    Handler: "script_handler"
    Script: "_E='No Resources'
_D=False
_C='s3'
_B=True
_A='Bucket'
import boto3,csv,time

      from botocore.exceptions import ClientError
def create_csv_and_upload_to_s3(resources,bucket,automation_id):

      tG='/tmp/{}';E=automation_id;B=resources
ttry:
ttC='list_ec2_resources_{}_{}.csv'.format(E,time.strftime('%Y%m%d-%H%M%S'));F=open(G.format(C),'w');A=csv.writer(F);A.writerow(['Automation:{}'.format(E)])

      ttfor D in B:
tttA.writerow([D])
tttif B[D]==_E:A.writerow(['No Resources
       Found'])
tttelse:
ttttfor H in range(len(B[D])):A.writerow(B[D][H])

      tttA.writerow('')
ttF.close();I=boto3.resource(_C);I.meta.client.upload_file(G.format(C),bucket,C);return
       C
texcept ClientError as J:print('Something Went Wrong with the API Call!');print(str(J))

      texcept Exception as K:print('create_csv_and_upload_to_s3: Oops! Something
       went wrong!');print(K)
def create_presigned_url(bucket_name,object_name,expiration=3600):

      t'Generate a presigned URL to share an S3 object'
ttry:A=boto3.client(_C);B=A.generate_presigned_url('get_object',Params={_A:bucket_name,'Key':object_name},ExpiresIn=expiration)

      texcept ClientError as C:print(C)
texcept Exception as D:print(D)
treturn
       B
def is_bucket_exists(bucket_name):
ttry:C=boto3.resource(_C);C.meta.client.head_bucket(Bucket=bucket_name);return
       _B
texcept ClientError as A:
ttB=int(A.response['Error']['Code'])
t
      tif B==403:return _B
ttelif B==404:return _D
texcept Exception as A:print('is_bucket_exists:
       Something went wrong!');print(str(A))
treturn _D
def get_bucket_policy_status(bucket_name):

      ttry:B=boto3.client(_C);return B.get_bucket_policy_status(Bucket=bucket_name)['PolicyStatus']['IsPublic']

      texcept ClientError as A:
ttprint(str(A))
ttif A.response['Error']['Code']=='NoSuchBucketPolicy':return
       _D
ttelse:return _B
texcept Exception as C:print(str(C));return _B

      def is_bucket_public(bucket_name):
tC='URI';B='Grantee'
ttry:
ttD='http://acs.amazonaws.com/groups/global/AllUsers';E=['READ','WRITE'];F=boto3.client(_C);G=F.get_bucket_acl(Bucket=bucket_name)

      ttfor A in G['Grants']:
tttfor (H,I) in A.items():
ttttif H=='Permission'and
       any((A in I for A in E)):
tttttfor (J,M) in A[B].items():
ttttt
      tif C in J and A[B][C]==D:return _B
ttreturn _D
texcept ClientError as
       K:print(str(K));return _B
texcept Exception as L:print('is_bucket_public:
       Something went wrong!');print(str(L));return _B
def script_handler(events,context):

      tH='message';A=events
tif A[_A]=='':return{H:'CSV Not Requested'}
telse:

      ttif not is_bucket_exists(A[_A]):raise Exception('Bucket {} does not exist'.format(A[_A]))

      ttif is_bucket_public(A[_A])or get_bucket_policy_status(A[_A]):raise Exception('Upload
       failed for {}. Please use a Private Bucket with appropriate Role & Bucket
       Policy which allows GetBucketAcl & PutObject.'.format(A[_A]))
ttelse:

      tttE=A[_A];D=['Instances','AMIs','EBS Volumes','Snapshots','Elastic IPs','Elastic
       Network Interfaces','Auto Scaling Groups','Elastic Load balancers'];C={}

      tttfor B in range(len(D)):C[D[B]]=A[D[B]].split('
')if A[D[B]]!=''else
       _E
tttfor B in C:
ttttif C[B]!=_E and len(C[B])>0:
tttttfor
       F in range(len(C[B])):C[B][F]=C[B][F].split()
tttG=create_csv_and_upload_to_s3(C,E,A['Automation
       ID']);return{'download_from_here':create_presigned_url(E,G),H:'{} successfully
       uploaded to {} bucket'.format(G,E)}
"
    InputPayload:
      Bucket: "{{BucketName}}"
      Automation ID: "{{automation:EXECUTION_ID}}"
      Instances: "{{listEC2Instances.EC2_Instances}}"
      AMIs: "{{listImages.AMIs}}"
      EBS Volumes: "{{listVolumes.EBS_Volumes}}"
      Snapshots: "{{listSnapshots.Volume_Snapshots}}"
      Elastic IPs: "{{listEIPs.EIPs}}"
      Elastic Network Interfaces: "{{listENIs.NetworkInterfaces}}"
      Auto Scaling Groups: "{{listAutoScalingGroups.AutoScalingGroups}}"
      Elastic Load balancers: "{{listElasticLoadBalancers.ELBs}}"
  outputs:
  - Name: "Download From Here"
    Selector: "$.Payload.download_from_here"
    Type: "String"
  - Name: "Message"
    Selector: "$.Payload.message"
    Type: "String"
  description: "#### Upload a CSV with resource details to S3"
