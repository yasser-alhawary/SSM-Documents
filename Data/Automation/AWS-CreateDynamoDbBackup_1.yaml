description: "Create DynamoDB table backup"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  TableName:
    type: "String"
    description: "(Required) Name of the DynamoDB Table."
  BackupName:
    type: "String"
    description: "(Required) Name of the backup to create."
  LambdaAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role that allows Lambda created by Automation
       to perform the actions on your behalf. If not specified a transient role will
       be created to execute the Lambda function."
    default: ""
  AutomationAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role that allows Automation to perform
       the actions on your behalf. "
    default: ""
mainSteps:
- name: "createDocumentStack"
  action: "aws:createStack"
  inputs:
    Capabilities:
    - "CAPABILITY_IAM"
    StackName: "CreateDynamoDbBackupLambdaStack{{automation:EXECUTION_ID}}"
    Parameters:
    - ParameterKey: "LambdaRoleArn"
      ParameterValue: "{{LambdaAssumeRole}}"
    - ParameterKey: "CreateBackupLambdaName"
      ParameterValue: "CreateDynamoDBBackup-{{automation:EXECUTION_ID}}"
    - ParameterKey: "VerifySnapshotLambdaName"
      ParameterValue: "VerifyDynamoDBBackup-{{automation:EXECUTION_ID}}"
    - ParameterKey: "TableName"
      ParameterValue: "{{TableName}}"
    TemplateBody: "AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  LambdaAssumeRoleNotSpecified:

          Fn::Or:
    - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - ''

          - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - undefined
Parameters:

        CreateBackupLambdaName: {Description: 'The lambda function name

     
       ', Type: String}
  LambdaRoleArn: {Default: '', Description: 'The ARN of
       the role that allows Lambda
      created by Automation to perform the action
       on your behalf

      ', Type: String}
  TableName: {Description: 'The
       name of the DynamoDB Table

      ', Type: String}
  VerifySnapshotLambdaName:
       {Description: 'The lambda function name

      ', Type: String}
Resources:

        CreateDynamoDbBackup:
    Properties:
      Code: {ZipFile: "#
# Copyright
       2018 Amazon.com, Inc. or its affiliates. All
           Rights Reserved.
      n#
# Permission is hereby granted, free of charge, to
           any
       person obtaining a copy of this
# software and associated documentation
      
           files (the "Software"), to deal in the Software
# without
       restriction,
           including without limitation the rights to use,
       copy, modify,
# merge,
           publish, distribute, sublicense,
       and/or sell copies of the Software, and
           to
# permit persons
       to whom the Software is furnished to do so.
#

          # THE SOFTWARE
       IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
     
            OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      
           FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
       NO EVENT SHALL
           THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE
       FOR ANY CLAIM, DAMAGES OR
           OTHER LIABILITY, WHETHER IN AN ACTION
      n# OF CONTRACT, TORT OR OTHERWISE,
           ARISING FROM, OUT OF OR IN
       CONNECTION WITH THE
# SOFTWARE OR THE USE
           OR OTHER DEALINGS
       IN THE SOFTWARE.
#
import boto3
from datetime import
          
       datetime

VAL_TABLE_NAME = "TableName"
VAL_DATE = "Date"
      
VAL_DATETIME
           = "Datetime"
VAL_TIME = "Time"
      
VAL_EXECUTION_ID = "ExecutionId"
          

VAL_STR = "
      {{{}}}"


def placeholder_data(ctx, tag_vars):
tdef
       
          clean(s):
ttreturn s.replace(":", "").replace("
      T", "").replace("
          -", "")

tdt = datetime.now().replace(microsecond=0)
      ntdata = {

          ttVAL_DATETIME: clean(dt.isoformat()),

      ttVAL_DATE: clean(dt.date().isoformat()),

          ttVAL_TIME:
       clean(dt.time().isoformat()),
ttVAL_EXECUTION_ID: "-"
    
            .join(ctx.function_name.split("-")[-5:]) if ctx is not None else
       ""

          t}

tif tag_vars is not None:
ttfor
       t in tag_vars:
tttdata[t]
           = tag_vars[t]
treturn
       data


def template_string(s, context, s_vars=None):

        
        tif s == "":
ttreturn ""

tplaceholders = placeholder_data(ctx=context,
      
           tag_vars=s_vars)
tfor p in placeholders:
tts = s.replace(VAL_STR.format(p),
      
           str(placeholders[p]))
treturn s


def handler(event,
       context):
t
          client = boto3.client("dynamodb")

      nttable_name = event["TableName"
          ].strip()
tbackup_name
       = template_string(event["BackupName"].strip(),
           context,
       {VAL_TABLE_NAME: table_name})

tresp = client.create_backup(TableName=table_name,
      
           BackupName=backup_name)

treturn resp["BackupDetails
      "]["BackupArn"
          ]


"}
      FunctionName: {Ref:
       CreateBackupLambdaName}
      Handler: index.handler
      MemorySize: 128

            Role:
        Fn::If:
        - LambdaAssumeRoleNotSpecified
    
          - Fn::GetAtt: [LambdaRole, Arn]
        - {Ref: LambdaRoleArn}
     
       Runtime: python3.7
      Timeout: 60
    Type: AWS::Lambda::Function
 
       LambdaRole:
    Condition: LambdaAssumeRoleNotSpecified
    Properties:

            AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']

                Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]

              Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:

                Statement:
          - Action: ['dynamodb:DescribeBackup']
   
               Effect: Allow
            Resource: '*'
          - Action: ['dynamodb:CreateBackup']

                  Effect: Allow
            Resource:
              Fn::Join:

                    - ''
              - - Fn::Join:
                  - ':'

                        - - arn
                    - {Ref: 'AWS::Partition'}

                          - dynamodb
                    - {Ref: 'AWS::Region'}

                          - {Ref: 'AWS::AccountId'}
                    - table/

                      - {Ref: TableName}
          Version: '2012-10-17'
     
         PolicyName: CreateDynamoDbBackupLambdaPolicy
    Type: AWS::IAM::Role

        VerifyDynamoDbBackup:
    Properties:
      Code: {ZipFile: "#
# Copyright
       2018 Amazon.com, Inc. or its affiliates. All
           Rights Reserved.
      n#
# Permission is hereby granted, free of charge, to
           any
       person obtaining a copy of this
# software and associated documentation
      
           files (the "Software"), to deal in the Software
# without
       restriction,
           including without limitation the rights to use,
       copy, modify,
# merge,
           publish, distribute, sublicense,
       and/or sell copies of the Software, and
           to
# permit persons
       to whom the Software is furnished to do so.
#

          # THE SOFTWARE
       IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
     
            OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      
           FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
       NO EVENT SHALL
           THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE
       FOR ANY CLAIM, DAMAGES OR
           OTHER LIABILITY, WHETHER IN AN ACTION
      n# OF CONTRACT, TORT OR OTHERWISE,
           ARISING FROM, OUT OF OR IN
       CONNECTION WITH THE
# SOFTWARE OR THE USE
           OR OTHER DEALINGS
       IN THE SOFTWARE.
#
import boto3
import time

db_client
     
            = boto3.client('dynamodb')


def handler(event, context):

      tbackup_arn
           = event["BackupArn"]

twhile True:
      ntttry:
tttstatus = db_client.describe_backup(BackupArn=backup_arn)[
      "
          BackupDescription"]["BackupDetails"]["BackupStatus
      "]
tttif status
           == "AVAILABLE":
ttt
      treturn

ttttime.sleep(10)

ttexcept
           Exception
       as e:
tttprint(e)
ttttime.sleep(10)
tttpass
"}

            FunctionName: {Ref: VerifySnapshotLambdaName}
      Handler: index.handler

            MemorySize: 128
      Role:
        Fn::If:
        - LambdaAssumeRoleNotSpecified

              - Fn::GetAtt: [LambdaRole, Arn]
        - {Ref: LambdaRoleArn}
 
           Runtime: python3.7
      Timeout: 300
    Type: AWS::Lambda::Function
"
- name: "createDynamoDbBackup"
  action: "aws:invokeLambdaFunction"
  inputs:
    FunctionName: "CreateDynamoDBBackup-{{automation:EXECUTION_ID}}"
    Payload: "{"TableName": "{{TableName}}", "BackupName": "{{BackupName}}"
      }"
- name: "verifyBackup"
  action: "aws:invokeLambdaFunction"
  maxAttempts: 10
  inputs:
    FunctionName: "VerifyDynamoDBBackup-{{automation:EXECUTION_ID}}"
    Payload: "{"BackupArn": "{{createDynamoDbBackup.Payload}}"}"
- name: "deleteCloudFormationTemplate"
  action: "aws:deleteStack"
  inputs:
    StackName: "CreateDynamoDbBackupLambdaStack{{automation:EXECUTION_ID}}"
outputs:
- "createDynamoDbBackup.Payload"
