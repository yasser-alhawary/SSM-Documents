# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |
  #### Document Name - AWS-DisableIncomingSSHOnPort22

  ## What does this document do?
  This document disables unrestricted incoming SSH traffic on port 22 for EC2 security groups.
  Traffic to the targeted security groups is restricted by removing the ingress rule that allows unrestricted incoming SSH traffic from anywhere ('0.0.0.0/0' and '::/0').

  ## Input Parameters
  * SecurityGroupIds: (Required) A comma separated list of security group IDs to restrict SSH traffic for.
  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.

  ## Output Parameters
  * DisableIncomingSSHTemplate.RestrictedSecurityGroupIds: The list of the security group IDs with disabled incoming SSH on port 22.

  ## Minimum Permissions Required
  * `ec2:DescribeSecurityGroups` and `ec2:RevokeSecurityGroupIngress` on the target security groups

schemaVersion: '0.3'
assumeRole: '{{AutomationAssumeRole}}'
parameters:
  SecurityGroupIds:
    type: StringList
    description: (Required) A comma separated list of security group IDs to restrict SSH traffic for.
    allowedPattern: '^sg-[a-z0-9]{8,17}$'
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
    allowedPattern: '^arn:aws(-cn|-us-gov)?:iam::d{12}:role/[w+=,.@_/-]+|^$'
outputs:
  - DisableIncomingSSHTemplate.RestrictedSecurityGroupIds
mainSteps:
- name: DisableIncomingSSHTemplate
  action: aws:executeScript
  onFailure: Abort
  isCritical: true
  isEnd: true
  timeoutSeconds: 600
  description: |
    ## DisableIncomingSSHTemplate
    Disables all incoming traffic on port 22 on the security groups.
    ## Inputs
    * SecurityGroupIds: The list of targeted security group IDs.
    ## Outputs
    * RestrictedSecurityGroupIds: The list of the security group IDs with disabled incoming SSH on port 22.
  inputs:
    Runtime: python3.7
    Handler: disable_incoming_ssh_handler
    InputPayload:
        SecurityGroupIds: '{{SecurityGroupIds}}'
    Script: |
        import boto3
        
        SSH_PORT = 22
        TCP = 'tcp'
        PUBLIC_IPV4_CIDR = '0.0.0.0/0'
        PUBLIC_IPV6_CIDR = '::/0'

        ec2_resource = boto3.resource("ec2")
        ec2_client = boto3.client("ec2")
      
      
        def find_open_ssh_ip_in_sg(sg_description):
          has_unrestricted = False
          unrestricted_ipv4_ranges = []
          unrestricted_ipv6_ranges = []
          for rule in sg_description["SecurityGroups"][0]["IpPermissions"]:
            if ('FromPort' in rule and rule['FromPort'] == SSH_PORT) and ('ToPort' in rule and rule['ToPort'] == SSH_PORT):
              for ip_range in rule['IpRanges']:
                if ip_range['CidrIp'] == PUBLIC_IPV4_CIDR:
                  unrestricted_ipv4_ranges.append(ip_range)
                  has_unrestricted = True
              for ip_range in rule['Ipv6Ranges']:
                if ip_range['CidrIpv6'] == PUBLIC_IPV6_CIDR:
                  unrestricted_ipv6_ranges.append(ip_range)
                  has_unrestricted = True
          
          return has_unrestricted, unrestricted_ipv4_ranges, unrestricted_ipv6_ranges
        
        
        def disable_incoming_ssh_handler(event, context):
          sg_ids = event["SecurityGroupIds"]
          Restricted_sg_ids = []
          Unrestricted_sg_ids = []
          errorMsg = "N/A"
          currentSg = None
          successful = True
          try:
            for sg_id in sg_ids:
              currentSg = sg_id
              sg_description = ec2_client.describe_security_groups(GroupIds=[sg_id])
              sg_resource = ec2_resource.SecurityGroup(sg_id)
              has_unrestricted, unrestricted_ipv4_ranges, unrestricted_ipv6_ranges = find_open_ssh_ip_in_sg(sg_description)
              
              if has_unrestricted:
                revoke_response = sg_resource.revoke_ingress(
                GroupId=sg_id,
                IpPermissions=[{
                'FromPort': SSH_PORT,
                'IpProtocol': TCP,
                'ToPort': SSH_PORT,
                'IpRanges': unrestricted_ipv4_ranges,
                'Ipv6Ranges': unrestricted_ipv6_ranges
              }],
                DryRun=False
                )
                if revoke_response and 'Return' in revoke_response and revoke_response['Return']:
                  Restricted_sg_ids.append(sg_id)
                else:
                  successful = False
                  Unrestricted_sg_ids.append(sg_id)
          
          except Exception as e:
            errorMsg = str(e)
            successful = False
            if "InvalidGroup.NotFound" in errorMsg:
              errorMsg = "The security group '{}' does not exist".format(currentSg)
          
          if not successful:
              raise Exception(
                "Unable to restrict one or more of the security groups Unrestricted_sg_ids: '{}', Restricted_sg_ids: '{}'. errorMsg: '{}'".format(
                        Unrestricted_sg_ids, Restricted_sg_ids, errorMsg))
        
          return {
          "RestrictedSecurityGroupIds": Restricted_sg_ids
        }
  outputs:
    - Name: RestrictedSecurityGroupIds
      Selector: $.Payload.RestrictedSecurityGroupIds
      Type: StringList
