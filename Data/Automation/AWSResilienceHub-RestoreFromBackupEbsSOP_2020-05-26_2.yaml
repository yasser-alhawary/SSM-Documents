# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 
---
description: 'SOP By AWS ResilienceHub: Digito_EBSRestoreFromBackup_2020_05_26'
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  EBSSnapshotIdentifier:
    type: String
    description: (Required) The identifier of the snapshot to restore
  TargetAvailabilityZone:
    type: String
    description: (Required) Availability Zone in which to create the volume
  VolumeType:
    type: String
    description: (Optional) The Volume Type. (If omitted the default would be gp2)
    default: ''
  VolumeIOPS:
    type: Integer
    description: (Optional) The number of I/O operations per second (IOPS). Not used
      for gp2. Setting at 0 will use default value.
    default: 0
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform
      the actions on your behalf.
outputs:
- CreateEbsVolume.CreatedVolumeId
- OutputRecoveryTime.RecoveryTime
- EbsDescribeSnapshot.RecoveryPoint
mainSteps:
- description: Start the timer when SOP starts
  name: RecordStartTime
  action: aws:executeScript
  inputs:
    Runtime: python3.6
    Handler: script_handler
    Script: |
      from datetime import datetime, timezone

      def script_handler(params: dict, context):
          return get_current_time().isoformat()

      def get_current_time():
          return datetime.now(timezone.utc)
    InputPayload: {}
  outputs:
  - Name: StartTime
    Selector: $.Payload
    Type: String
- description: Get current snapshot information, validate that the state is "completed"
    by calling [DescribeSnapshot](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSnapshots.html)
  name: EbsDescribeSnapshot
  action: aws:executeScript
  inputs:
    Runtime: python3.6
    Handler: script_handler
    Script: |
      import boto3

      def script_handler(params: dict, context):
          response = boto3.client('ec2').describe_snapshots(Filters=[{
              'Name': 'snapshot-id',
              'Values': [params['EBSSnapshotIdentifier']]}])
          return {
              'VolumeId': response['Snapshots'][0]['VolumeId'],
              'State': response['Snapshots'][0]['State'],
              'RecoveryPoint': response['Snapshots'][0]['StartTime'].isoformat()
          }
    InputPayload:
      EBSSnapshotIdentifier: '{{ EBSSnapshotIdentifier }}'
  outputs:
  - Name: VolumeId
    Selector: $.Payload.VolumeId
    Type: String
  - Name: State
    Selector: $.Payload.State
    Type: String
  - Name: RecoveryPoint
    Selector: $.Payload.RecoveryPoint
    Type: String
- description: Calculate the target VolumeType and IOPS. Requested Params override
    Original params, use defaults if neither exists
  name: CalculateIopsAndVolType
  action: aws:executeScript
  inputs:
    Runtime: python3.6
    Handler: script_handler
    Script: |
      from botocore.config import Config
      import boto3

      def script_handler(params: dict, context) -> dict:
          if params['VolumeId'] != "vol-ffffffff":
              config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
              ec2_client = boto3.client('ec2', config=config)
              describe_response = ec2_client.describe_volumes(VolumeIds=[params['VolumeId']])
              default_vol_type = describe_response['Volumes'][0]['VolumeType']
              default_vol_iops = describe_response['Volumes'][0]['Iops']
          else:
              default_vol_type = 'gp2'
              default_vol_iops = 3000
          volumeType = params['VolumeType'] if params['VolumeType'] != '' else default_vol_type
          targetOps = params['VolumeIOPS'] if params['VolumeIOPS'] > 0 else default_vol_iops
          return {
              'TargetVolumeType': volumeType,
              'TargetVolumeIOPS': targetOps
          }
    InputPayload:
      VolumeId: '{{ EbsDescribeSnapshot.VolumeId }}'
      VolumeType: '{{ VolumeType }}'
      VolumeIOPS: '{{ VolumeIOPS }}'
  outputs:
  - Name: TargetVolumeType
    Selector: $.Payload.TargetVolumeType
    Type: String
  - Name: TargetVolumeIOPS
    Selector: $.Payload.TargetVolumeIOPS
    Type: Integer
- description: Create the new volume by calling [CreateVolume](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html)
  name: CreateEbsVolume
  action: aws:executeScript
  inputs:
    Runtime: python3.6
    Handler: script_handler
    Script: |
      import boto3

      def script_handler(params: dict, context) -> dict:
          if params['TargetVolumeType'] == 'gp2':
              response = boto3.client('ec2').create_volume(
                  SnapshotId=params['EBSSnapshotIdentifier'],
                  AvailabilityZone=params['TargetAvailabilityZone'],
                  VolumeType=params['TargetVolumeType']
              )
          else:
              response = boto3.client('ec2').create_volume(
                  SnapshotId=params['EBSSnapshotIdentifier'],
                  AvailabilityZone=params['TargetAvailabilityZone'],
                  VolumeType=params['TargetVolumeType'],
                  Iops=params['TargetVolumeIOPS']
              )
          return {'VolumeId': response['VolumeId']}
    InputPayload:
      EBSSnapshotIdentifier: '{{ EBSSnapshotIdentifier }}'
      TargetAvailabilityZone: '{{ TargetAvailabilityZone }}'
      TargetVolumeType: '{{ CalculateIopsAndVolType.TargetVolumeType }}'
      TargetVolumeIOPS: '{{ CalculateIopsAndVolType.TargetVolumeIOPS }}'
  outputs:
  - Name: CreatedVolumeId
    Selector: $.Payload.VolumeId
    Type: String
- description: Wait until EBS volume status is running
  name: WaitUntilVolumeAvailable
  action: aws:waitForAwsResourceProperty
  inputs:
    Service: ec2
    Api: DescribeVolumes
    PropertySelector: $.Volumes[0].State
    DesiredValues:
    - available
    - in-use
    VolumeIds:
    - '{{ CreateEbsVolume.CreatedVolumeId }}'
- description: Record the runtime in seconds
  name: OutputRecoveryTime
  action: aws:executeScript
  inputs:
    Runtime: python3.6
    Handler: script_handler
    Script: |
      from datetime import datetime, timezone
      from dateutil import parser

      def script_handler(params: dict, context):
          return (get_current_time() - parser.parse(params['StartTime'])).seconds

      def get_current_time():
          return datetime.now(timezone.utc)
    InputPayload:
      StartTime: '{{ RecordStartTime.StartTime }}'
  outputs:
  - Name: RecoveryTime
    Selector: $.Payload
    Type: Integer
