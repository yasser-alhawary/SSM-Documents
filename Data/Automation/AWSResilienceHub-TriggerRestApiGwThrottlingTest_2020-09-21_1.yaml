# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-TriggerRestApiGwThrottlingTest_2020-09-21

            ## Intent
            Test REST API Gateway behavior when hitting throttling threshold

            ## Type
            TEST

            ## Risk
            High

            ## Requirements
              * REST API Gateway
              * Alarm for metric [4XXError](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) setup for the specified API Gateway
              * There is constant traffic on API Gateway during test

            ## Permissions required for AutomationAssumeRole
              * apigateway:GET
              * apigateway:PATCH
              * servicequotas:GetServiceQuota
              * cloudwatch:DescribeAlarms
              * ssm:GetAutomationExecution
              * ssm:StartAutomationExecution
              * ssm:GetParameters
              * iam:PassRole

            ##### Permissions required to log output to CloudWatch
              * logs:PutLogEvents
              * logs:DescribeLogGroups
              * logs:DescribeLogStreams

            ## Supports Rollback
            Yes, restore original throttling settings

            ## Cancellation behavior
            Restore original throttling settings

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) RestApiGwUsagePlanId
              * type: String
              * description: The ID of REST API Gateway usage plan to be modified

            ### (Required) ApiGw4xxAlarmName
              * type: String
              * description: Alarm for metric [4XXError](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) setup for the specified API Gateway

            ### (Optional) RestApiGwThrottlingRate
              * type: String
              * description: The value of throttling rate (requests per second)
              * default: '0'

            ### (Optional) RestApiGwThrottlingBurst
              * type: String
              * description: The value of throttling burst rate (requests per second)
              * default: '0'

            ### (Optional) RestApiGwStageName
              * type: String
              * description: The name of the Stage which throttling settings should be applied to. If not set, setting will be applied on the Usage Plan level
              * default: ''

            ### (Optional) RestApiGwId
              * type: String
              * description: The ID of REST API Gateway. Required if Stage name is provided. Otherwise, it will be ignored
              * default: ''

            ### (Optional) RestApiGwResourcePath
              * type: String
              * description: The Resource Path which throttling settings should be applied to (e.g. /Customers/Accounts/). Can be set to "*" (all resources). If `RestApiGwStageName` is not provided then this parameter is ignored
              * default: '*'

            ### (Optional) The HTTP method which throttling settings should be applied to (e.g. GET, POST, PUT, and etc.). Can be set to "*" (all http methods). If `RestApiGwStageName` is not provided then this parameter is ignored
              * type: String
              * description: The value of throttling rate (requests per second)
              * default: '*'

            ### (Optional) IsRollback
              * type: String
              * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
              * default: false

            ### (Optional) PreviousExecutionId
              * type: String
              * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up

            ## Details
            The document injects failure by setting both throttling rate and trottling burst of the specified REST
            API Gateway to 0. If provided, throttling is injected only for the specified stage, path and method. Alarm
            for metric [4XXError](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html)
            should be trigger by traffic on the gateway. In case of issues users should manually restore original
            throttling settings from backup.

            ## Steps executed in normal flow
              * CheckIsRollback
              * AssertAlarmToBeGreenBeforeTest
              * BackupThrottlingConfiguration
              * SetThrottlingConfiguration
              * AssertAlarmToBeRed
              * RollbackCurrentExecution
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * CheckIsRollback
              * GetInputsFromPreviousExecution
              * AssertInputsFromPreviousExecution
              * PrepareRollbackOfPreviousExecution
              * RollbackPreviousExecution

            ## Outputs
            None
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  ApiGw4xxAlarmName:
    type: String
    description: (Required) Alarm for metric `4XXError` setup for the specified
  RestApiGwUsagePlanId:
    type: String
    description: (Required) The ID of REST API Gateway usage plan to be modified
  RestApiGwThrottlingRate:
    type: String
    description: (Optional) The value of throttling rate (requests per second)
    default: '0'
  RestApiGwThrottlingBurst:
    type: String
    description: (Optional) The value of throttling burst rate (requests per second)
    default: '0'
  RestApiGwStageName:
    type: String
    description: (Optional) The name of the Stage which throttling settings should be applied to. If not set, setting will be applied on the Usage Plan level
    default: ''
  RestApiGwId:
    type: String
    description: (Optional) The ID of REST API Gateway. Required if Stage name is provided. Otherwise, it will be ignored
    default: ''
  RestApiGwResourcePath:
    type: String
    description: (Optional) The Resource Path which throttling settings should be applied to (e.g. /Customers/Accounts/). Can be set to "*" (all resources). If RestApiGwStageName is not provided then this parameter is ignored
    default: '*'
  RestApiGwHttpMethod:
    type: String
    description: (Optional) The HTTP method which throttling settings should be applied to (e.g. GET, POST, PUT, and etc.). Can be set to "*" (all http methods). If RestApiGwStageName is not provided then this parameter is ignored
    default: '*'
  IsRollback:
    type: Boolean
    description: >-
      (Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.
    default: false
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: CheckIsRollback
    description: Check if document should be executed in rollback mode
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: '{{IsRollback}}'
          BooleanEquals: true
      Default: AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: RestApiGwUsagePlanId
        Selector: $.Payload.RestApiGwUsagePlanId[0]
        Type: String
      - Name: RestApiGwId
        Selector: $.Payload.RestApiGwId[0]
        Type: String
      - Name: RestApiGwStageName
        Selector: $.Payload.RestApiGwStageName[0]
        Type: String
      - Name: RestApiGwResourcePath
        Selector: $.Payload.RestApiGwResourcePath[0]
        Type: String
      - Name: RestApiGwHttpMethod
        Selector: $.Payload.RestApiGwHttpMethod[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_inputs_from_ssm_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events:
                raise KeyError('Requires ExecutionId')
        
            if not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            response_parameters = response['AutomationExecution']['Parameters']
            # TODO DIG-853
            for parameter in response_parameters:
                output[parameter] = response_parameters[parameter]
        
            return output
        
        


  - name: AssertInputsFromPreviousExecution
    description: Validate that rollback is executed with the same input
    action: aws:executeScript
    inputs:
      Runtime: python3.7
      Handler: assert_inputs_before_throttling_rollback
      InputPayload:
        RestApiGwUsagePlanId: '{{ RestApiGwUsagePlanId }}'
        RestApiGwId: '{{ RestApiGwId }}'
        RestApiGwStageName: '{{ RestApiGwStageName }}'
        RestApiGwResourcePath: '{{ RestApiGwResourcePath }}'
        RestApiGwHttpMethod: '{{ RestApiGwHttpMethod }}'
        OriginalRestApiGwUsagePlanId: '{{ GetInputsFromPreviousExecution.RestApiGwUsagePlanId }}'
        OriginalRestApiGwId: '{{ GetInputsFromPreviousExecution.RestApiGwId }}'
        OriginalRestApiGwStageName: '{{ GetInputsFromPreviousExecution.RestApiGwStageName }}'
        OriginalRestApiGwResourcePath: '{{ GetInputsFromPreviousExecution.RestApiGwResourcePath }}'
        OriginalRestApiGwHttpMethod: '{{ GetInputsFromPreviousExecution.RestApiGwHttpMethod }}'
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        

        def assert_inputs_before_throttling_rollback(events: dict, context: dict) -> None:
            usage_plan_id: str = events['RestApiGwUsagePlanId']
            gateway_id: str = events.get('RestApiGwId')
            stage_name: str = events.get('RestApiGwStageName')
            resource_path: str = events.get('RestApiGwResourcePath', '*')
            http_method: str = events.get('RestApiGwHttpMethod', '*')
        
            original_usage_plan_id: str = events['OriginalRestApiGwUsagePlanId']
            original_gateway_id: str = events.get('OriginalRestApiGwId')
            original_stage_name: str = events.get('OriginalRestApiGwStageName')
            original_resource_path: str = events.get('OriginalRestApiGwResourcePath', '*')
            original_http_method: str = events.get('OriginalRestApiGwHttpMethod', '*')
        
            # Need to have it here to overcame issue DIG-853 during rollback case
            if original_stage_name.startswith('{{') and original_gateway_id.startswith('{{'):
                original_stage_name = original_gateway_id = ''
        
            if original_resource_path.startswith('{{'):
                original_resource_path = '*'
        
            if original_http_method.startswith('{{'):
                original_http_method = '*'
        
            assert usage_plan_id == original_usage_plan_id, f'Provided RestApiGwUsagePlanId: {usage_plan_id} is not equal to ' 
                                                            f'original RestApiGwUsagePlanId: {original_usage_plan_id}'
        
            assert gateway_id == original_gateway_id, f'Provided RestApiGwId: {gateway_id} is not equal to ' 
                                                      f'original RestApiGwId: {original_gateway_id}'
        
            assert stage_name == original_stage_name, f'Provided RestApiGwStageName: {stage_name} is not equal to ' 
                                                      f'original RestApiGwStageName: {original_stage_name}'
        
            assert resource_path == original_resource_path, f'Provided RestApiGwResourcePath: {resource_path} is not equal to' 
                                                            f' original RestApiGwResourcePath: {original_resource_path}'
        
            assert http_method == original_http_method, f'Provided RestApiGwHttpMethod: {http_method} is not equal to ' 
                                                        f'original RestApiGwHttpMethod: {original_http_method}'
        
        


  - name: PrepareRollbackOfPreviousExecution
    description: Get original throttling settings for rollback
    action: aws:executeScript
    outputs:
      - Name: RestApiGwThrottlingRateOriginalValue
        Selector: $.Payload.RestApiGwThrottlingRateOriginalValue[0]
        Type: String
      - Name: RestApiGwThrottlingBurstOriginalValue
        Selector: $.Payload.RestApiGwThrottlingBurstOriginalValue[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
        StepName: 'BackupThrottlingConfiguration'
        ResponseField: 'RestApiGwThrottlingRateOriginalValue,RestApiGwThrottlingBurstOriginalValue'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_output_from_ssm_step_execution(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:
                raise KeyError('Requires ExecutionId, StepName and ResponseField in events')
        
            ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            for step in ssm_response['AutomationExecution']['StepExecutions']:
                if step['StepName'] == events['StepName']:
                    response_fields = events['ResponseField'].split(',')
                    output = {}
                    for response_field in response_fields:
                        if response_field in step['Outputs']:
                            output[response_field] = step['Outputs'][response_field]
                        else:
                            """
                            By default SSM ignores empty values when encodes API outputs to JSON. It may result in
                            a situation when an empty value is a valid value but step output completely misses it.
                            Usually happens with SQS queue policies, default policy is returned by API as an empty value
                            and executeApi step output ignores it. As a result, further steps in rollback execution will fail.
                            Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string
                            represents a default sqs policy
                            """
                            output[response_field] = ['']
                    return output
        
            # Could not find step name
            raise Exception('Can not find step name % in ssm execution response', events['StepName'])
        
        


  - name: RollbackPreviousExecution
    description: Restore original throttling configuratiuon for the REST API Gateway from previous execution
    action: aws:executeScript
    outputs:
      - Name: RestApiGwThrottlingRateRestoredValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: RestApiGwThrottlingBurstRestoredValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: set_throttling_config
      InputPayload:
        RestApiGwUsagePlanId: '{{ GetInputsFromPreviousExecution.RestApiGwUsagePlanId }}'
        RestApiGwId: '{{ GetInputsFromPreviousExecution.RestApiGwId }}'
        RestApiGwStageName: '{{ GetInputsFromPreviousExecution.RestApiGwStageName }}'
        RestApiGwResourcePath: '{{ GetInputsFromPreviousExecution.RestApiGwResourcePath }}'
        RestApiGwHttpMethod: '{{ GetInputsFromPreviousExecution.RestApiGwHttpMethod }}'
        RestApiGwThrottlingRate: '{{ PrepareRollbackOfPreviousExecution.RestApiGwThrottlingRateOriginalValue }}'
        RestApiGwThrottlingBurst: '{{ PrepareRollbackOfPreviousExecution.RestApiGwThrottlingBurstOriginalValue }}'
        ValidateQuotaLimits: False
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def execute_boto3_with_backoff(delegate: Callable[[Any], dict], **kwargs) -> dict:
            """
            Executes the given delegate with apigateway client parameter, handles TooManyRequestsException using
            exponential backoff algorithm with random jitter
            :param delegate: The delegate to execute (with boto3 function)
            :keyword args:
                retries: Number of maximum backoff retries
                max_interval: Maximum backoff interval in seconds
                base_time: Backoff base time
            :return: The output of the given function
            """
            backoff_retries: int = kwargs.get('retries', 15)
            backoff_max_interval: int = kwargs.get('max_interval', 64)
            backoff_base_time: int = kwargs.get('base_time', 2)
            apigw_client = boto3.client('apigateway')
        
            count = 1
            while count <= backoff_retries:
                try:
                    log.debug(f'Making an API call, attempt: {count} ...')
                    response = delegate(apigw_client)
                    assert_https_status_code_200(response, 'Failed to perform API call')
                    log.debug('API call performed successfully.')
                    return response
                except ClientError as error:
                    if error.response['Error']['Code'] == 'TooManyRequestsException':
                        interval: float = min(backoff_base_time * 2 ** count + round(uniform(-2, 2), 2), backoff_max_interval)
                        log.warning(f'TooManyRequestsException, slow it down with delay {interval} seconds ...')
                        time.sleep(interval)
                        count += 1
                    else:
                        log.error(error)
                        raise error
        
            raise Exception(f'Failed to perform API call successfully for {count - 1} times.')
        
        

        def get_service_quota(config: object, service_code: str, quota_code: str) -> dict:
            client = boto3.client('service-quotas', config=config)
            response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)
            assert_https_status_code_200(response, f'Failed to perform get_service_quota with '
                                                   f'ServiceCode: {service_code} and QuotaCode: {quota_code}')
            return response
        
        

        def update_usage_plan(usage_plan_id: str, patch_operations: list, retries: int = 15) -> dict:
            return execute_boto3_with_backoff(
                delegate=lambda x: x.update_usage_plan(
                    usagePlanId=usage_plan_id,
                    patchOperations=patch_operations
                ),
                retries=retries
            )
        
        

        def wait_throttling_config_updated(events: dict, context: dict) -> None:
            expected_rate_limit: int = int(events['RestApiGwThrottlingRate'])
            expected_burst_limit: int = int(events['RestApiGwThrottlingBurst'])
            max_retries: int = events.get('MaxRetries', 40)
            timeout: int = events.get('Timeout', 15)
            while max_retries > 0:
                actual_throttling_config = get_throttling_config(events, None)
                actual_rate_limit = actual_throttling_config['RateLimit']
                actual_burst_limit = actual_throttling_config['BurstLimit']
                if actual_rate_limit == expected_rate_limit and actual_burst_limit == expected_burst_limit:
                    return
                log.info(f'Waiting for expected values: [RateLimit: {expected_rate_limit}, BurstLimit: {expected_burst_limit}],'
                         f' actual values: [RateLimit: {actual_rate_limit}, BurstLimit: {actual_burst_limit}]')
                max_retries -= 1
                time.sleep(timeout)
        
            raise TimeoutError('Error to wait for throttling config update. Maximum timeout exceeded!')
        
        

        def get_throttling_config(events: dict, context: dict) -> dict:
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId in events')
        
            if 'RestApiGwStageName' in events and events['RestApiGwStageName']:
                if 'RestApiGwId' not in events:
                    raise KeyError('Requires RestApiGwId in events')
                if not events['RestApiGwId']:
                    raise KeyError('RestApiGwId should not be empty')
        
            usage_plan_id: str = events['RestApiGwUsagePlanId']
            gateway_id: str = events.get('RestApiGwId')
            stage_name: str = events.get('RestApiGwStageName')
            resource_path: str = events.get('RestApiGwResourcePath', '*')
            http_method: str = events.get('RestApiGwHttpMethod', '*')
        
            # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution
            if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):
                gateway_id = stage_name = None
            resource_path = '*' if resource_path.startswith('{{') else resource_path
            http_method = '*' if http_method.startswith('{{') else http_method
        
            config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigateway', config=config)
            usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)
            assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')
        
            if stage_name:
                stage_found = False
                for stage in usage_plan['apiStages']:
                    if stage['apiId'] == gateway_id and stage['stage'] == stage_name:
                        stage_found = True
                        if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:
                            rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']
                            burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']
                        else:
                            rate_limit: float = usage_plan['throttle']['rateLimit']
                            burst_limit: int = usage_plan['throttle']['burstLimit']
                if not stage_found:
                    raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')
            else:
                rate_limit: float = usage_plan['throttle']['rateLimit']
                burst_limit: int = usage_plan['throttle']['burstLimit']
        
            return {'RateLimit': int(rate_limit),
                    'BurstLimit': burst_limit,
                    'QuotaLimit': usage_plan['quota']['limit'],
                    'QuotaPeriod': usage_plan['quota']['period']}
        
        

        def set_throttling_config(events: dict, context: dict) -> dict:
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId in events')
        
            if 'RestApiGwThrottlingRate' not in events:
                raise KeyError('Requires RestApiGwThrottlingRate in events')
        
            if 'RestApiGwThrottlingBurst' not in events:
                raise KeyError('Requires RestApiGwThrottlingBurst in events')
        
            if 'RestApiGwStageName' in events and events['RestApiGwStageName']:
                if 'RestApiGwId' not in events:
                    raise KeyError('Requires RestApiGwId in events')
                if not events['RestApiGwId']:
                    raise KeyError('RestApiGwId should not be empty')
        
            usage_plan_id: str = events['RestApiGwUsagePlanId']
            new_rate_limit: float = float(events['RestApiGwThrottlingRate'])
            new_burst_limit: int = int(events['RestApiGwThrottlingBurst'])
            gateway_id: str = events.get('RestApiGwId')
            stage_name: str = events.get('RestApiGwStageName')
            resource_path: str = events.get('RestApiGwResourcePath', '*')
            http_method: str = events.get('RestApiGwHttpMethod', '*')
            validate_quota_limits: bool = events.get('ValidateQuotaLimits', True)
        
            output: dict = {}
            quota_rate_limit_code: str = 'L-8A5B8E43'
            quota_burst_limit_code: str = 'L-CDF5615A'
            patch_operations: list = [
                {
                    'op': 'replace',
                    'path': '/throttle/rateLimit',
                    'value': str(new_rate_limit)
                },
                {
                    'op': 'replace',
                    'path': '/throttle/burstLimit',
                    'value': str(new_burst_limit)
                }
            ]
        
            # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution
            if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):
                gateway_id = stage_name = None
            resource_path = '*' if resource_path.startswith('{{') else resource_path
            http_method = '*' if http_method.startswith('{{') else http_method
        
            boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
        
            if validate_quota_limits:
                quota_rate_limit: float = get_service_quota(
                    boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']
                quota_burst_limit: float = get_service_quota(
                    boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']
        
                if new_rate_limit > quota_rate_limit:
                    raise ValueError(f'Given value of RestApiGwThrottlingRate: {new_rate_limit}, can not be more than '
                                     f'service quota Throttle rate: {quota_rate_limit}')
        
                if new_burst_limit > quota_burst_limit:
                    raise ValueError(f'Given value of RestApiGwThrottlingBurst: {new_burst_limit}, can not be more than '
                                     f'service quota Throttle burst rate: {quota_burst_limit}')
            if stage_name:
                path: str = f'/apiStages/{gateway_id}:{stage_name}/throttle/{resource_path}/{http_method}'
                patch_operations[0]['path'], patch_operations[1]['path'] = f'{path}/rateLimit', f'{path}/burstLimit'
                updated_usage_plan = update_usage_plan(usage_plan_id, patch_operations)
        
                for stage in updated_usage_plan['apiStages']:
                    if stage['apiId'] == gateway_id and stage['stage'] == stage_name:
                        output['RateLimit'] = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']
                        output['BurstLimit'] = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']
            else:
                updated_usage_plan = update_usage_plan(usage_plan_id, patch_operations)
                output['RateLimit'] = updated_usage_plan['throttle']['rateLimit']
                output['BurstLimit'] = updated_usage_plan['throttle']['burstLimit']
        
            output['RateLimit'] = int(output['RateLimit'])
            wait_throttling_config_updated(events, None)
        
            return output
        
        

    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time.
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ApiGw4xxAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]

  - name: BackupThrottlingConfiguration
    description: Backup original throttling settings for rollback
    action: aws:executeScript
    outputs:
      - Name: RestApiGwThrottlingRateOriginalValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: RestApiGwThrottlingBurstOriginalValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: get_throttling_config
      InputPayload:
        RestApiGwUsagePlanId: '{{ RestApiGwUsagePlanId }}'
        RestApiGwId: '{{ RestApiGwId }}'
        RestApiGwStageName: '{{ RestApiGwStageName }}'
        RestApiGwResourcePath: '{{ RestApiGwResourcePath }}'
        RestApiGwHttpMethod: '{{ RestApiGwHttpMethod }}'
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def get_throttling_config(events: dict, context: dict) -> dict:
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId in events')
        
            if 'RestApiGwStageName' in events and events['RestApiGwStageName']:
                if 'RestApiGwId' not in events:
                    raise KeyError('Requires RestApiGwId in events')
                if not events['RestApiGwId']:
                    raise KeyError('RestApiGwId should not be empty')
        
            usage_plan_id: str = events['RestApiGwUsagePlanId']
            gateway_id: str = events.get('RestApiGwId')
            stage_name: str = events.get('RestApiGwStageName')
            resource_path: str = events.get('RestApiGwResourcePath', '*')
            http_method: str = events.get('RestApiGwHttpMethod', '*')
        
            # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution
            if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):
                gateway_id = stage_name = None
            resource_path = '*' if resource_path.startswith('{{') else resource_path
            http_method = '*' if http_method.startswith('{{') else http_method
        
            config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigateway', config=config)
            usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)
            assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')
        
            if stage_name:
                stage_found = False
                for stage in usage_plan['apiStages']:
                    if stage['apiId'] == gateway_id and stage['stage'] == stage_name:
                        stage_found = True
                        if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:
                            rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']
                            burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']
                        else:
                            rate_limit: float = usage_plan['throttle']['rateLimit']
                            burst_limit: int = usage_plan['throttle']['burstLimit']
                if not stage_found:
                    raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')
            else:
                rate_limit: float = usage_plan['throttle']['rateLimit']
                burst_limit: int = usage_plan['throttle']['burstLimit']
        
            return {'RateLimit': int(rate_limit),
                    'BurstLimit': burst_limit,
                    'QuotaLimit': usage_plan['quota']['limit'],
                    'QuotaPeriod': usage_plan['quota']['period']}
        
        


  - name: SetThrottlingConfiguration
    description: |-
      Update throttling configuratiuon for REST API Gateway. If provided, settings are updated only for the
      specified stage, path and method
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    action: aws:executeScript
    outputs:
      - Name: RestApiGwThrottlingRateNewValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: RestApiGwThrottlingBurstNewValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: set_throttling_config
      InputPayload:
        RestApiGwUsagePlanId: '{{ RestApiGwUsagePlanId }}'
        RestApiGwId: '{{ RestApiGwId }}'
        RestApiGwStageName: '{{ RestApiGwStageName }}'
        RestApiGwResourcePath: '{{ RestApiGwResourcePath }}'
        RestApiGwHttpMethod: '{{ RestApiGwHttpMethod }}'
        RestApiGwThrottlingRate: '{{ RestApiGwThrottlingRate }}'
        RestApiGwThrottlingBurst: '{{ RestApiGwThrottlingBurst }}'
        ValidateQuotaLimits: False
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def execute_boto3_with_backoff(delegate: Callable[[Any], dict], **kwargs) -> dict:
            """
            Executes the given delegate with apigateway client parameter, handles TooManyRequestsException using
            exponential backoff algorithm with random jitter
            :param delegate: The delegate to execute (with boto3 function)
            :keyword args:
                retries: Number of maximum backoff retries
                max_interval: Maximum backoff interval in seconds
                base_time: Backoff base time
            :return: The output of the given function
            """
            backoff_retries: int = kwargs.get('retries', 15)
            backoff_max_interval: int = kwargs.get('max_interval', 64)
            backoff_base_time: int = kwargs.get('base_time', 2)
            apigw_client = boto3.client('apigateway')
        
            count = 1
            while count <= backoff_retries:
                try:
                    log.debug(f'Making an API call, attempt: {count} ...')
                    response = delegate(apigw_client)
                    assert_https_status_code_200(response, 'Failed to perform API call')
                    log.debug('API call performed successfully.')
                    return response
                except ClientError as error:
                    if error.response['Error']['Code'] == 'TooManyRequestsException':
                        interval: float = min(backoff_base_time * 2 ** count + round(uniform(-2, 2), 2), backoff_max_interval)
                        log.warning(f'TooManyRequestsException, slow it down with delay {interval} seconds ...')
                        time.sleep(interval)
                        count += 1
                    else:
                        log.error(error)
                        raise error
        
            raise Exception(f'Failed to perform API call successfully for {count - 1} times.')
        
        

        def get_service_quota(config: object, service_code: str, quota_code: str) -> dict:
            client = boto3.client('service-quotas', config=config)
            response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)
            assert_https_status_code_200(response, f'Failed to perform get_service_quota with '
                                                   f'ServiceCode: {service_code} and QuotaCode: {quota_code}')
            return response
        
        

        def update_usage_plan(usage_plan_id: str, patch_operations: list, retries: int = 15) -> dict:
            return execute_boto3_with_backoff(
                delegate=lambda x: x.update_usage_plan(
                    usagePlanId=usage_plan_id,
                    patchOperations=patch_operations
                ),
                retries=retries
            )
        
        

        def wait_throttling_config_updated(events: dict, context: dict) -> None:
            expected_rate_limit: int = int(events['RestApiGwThrottlingRate'])
            expected_burst_limit: int = int(events['RestApiGwThrottlingBurst'])
            max_retries: int = events.get('MaxRetries', 40)
            timeout: int = events.get('Timeout', 15)
            while max_retries > 0:
                actual_throttling_config = get_throttling_config(events, None)
                actual_rate_limit = actual_throttling_config['RateLimit']
                actual_burst_limit = actual_throttling_config['BurstLimit']
                if actual_rate_limit == expected_rate_limit and actual_burst_limit == expected_burst_limit:
                    return
                log.info(f'Waiting for expected values: [RateLimit: {expected_rate_limit}, BurstLimit: {expected_burst_limit}],'
                         f' actual values: [RateLimit: {actual_rate_limit}, BurstLimit: {actual_burst_limit}]')
                max_retries -= 1
                time.sleep(timeout)
        
            raise TimeoutError('Error to wait for throttling config update. Maximum timeout exceeded!')
        
        

        def get_throttling_config(events: dict, context: dict) -> dict:
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId in events')
        
            if 'RestApiGwStageName' in events and events['RestApiGwStageName']:
                if 'RestApiGwId' not in events:
                    raise KeyError('Requires RestApiGwId in events')
                if not events['RestApiGwId']:
                    raise KeyError('RestApiGwId should not be empty')
        
            usage_plan_id: str = events['RestApiGwUsagePlanId']
            gateway_id: str = events.get('RestApiGwId')
            stage_name: str = events.get('RestApiGwStageName')
            resource_path: str = events.get('RestApiGwResourcePath', '*')
            http_method: str = events.get('RestApiGwHttpMethod', '*')
        
            # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution
            if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):
                gateway_id = stage_name = None
            resource_path = '*' if resource_path.startswith('{{') else resource_path
            http_method = '*' if http_method.startswith('{{') else http_method
        
            config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigateway', config=config)
            usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)
            assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')
        
            if stage_name:
                stage_found = False
                for stage in usage_plan['apiStages']:
                    if stage['apiId'] == gateway_id and stage['stage'] == stage_name:
                        stage_found = True
                        if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:
                            rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']
                            burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']
                        else:
                            rate_limit: float = usage_plan['throttle']['rateLimit']
                            burst_limit: int = usage_plan['throttle']['burstLimit']
                if not stage_found:
                    raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')
            else:
                rate_limit: float = usage_plan['throttle']['rateLimit']
                burst_limit: int = usage_plan['throttle']['burstLimit']
        
            return {'RateLimit': int(rate_limit),
                    'BurstLimit': burst_limit,
                    'QuotaLimit': usage_plan['quota']['limit'],
                    'QuotaPeriod': usage_plan['quota']['period']}
        
        

        def set_throttling_config(events: dict, context: dict) -> dict:
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId in events')
        
            if 'RestApiGwThrottlingRate' not in events:
                raise KeyError('Requires RestApiGwThrottlingRate in events')
        
            if 'RestApiGwThrottlingBurst' not in events:
                raise KeyError('Requires RestApiGwThrottlingBurst in events')
        
            if 'RestApiGwStageName' in events and events['RestApiGwStageName']:
                if 'RestApiGwId' not in events:
                    raise KeyError('Requires RestApiGwId in events')
                if not events['RestApiGwId']:
                    raise KeyError('RestApiGwId should not be empty')
        
            usage_plan_id: str = events['RestApiGwUsagePlanId']
            new_rate_limit: float = float(events['RestApiGwThrottlingRate'])
            new_burst_limit: int = int(events['RestApiGwThrottlingBurst'])
            gateway_id: str = events.get('RestApiGwId')
            stage_name: str = events.get('RestApiGwStageName')
            resource_path: str = events.get('RestApiGwResourcePath', '*')
            http_method: str = events.get('RestApiGwHttpMethod', '*')
            validate_quota_limits: bool = events.get('ValidateQuotaLimits', True)
        
            output: dict = {}
            quota_rate_limit_code: str = 'L-8A5B8E43'
            quota_burst_limit_code: str = 'L-CDF5615A'
            patch_operations: list = [
                {
                    'op': 'replace',
                    'path': '/throttle/rateLimit',
                    'value': str(new_rate_limit)
                },
                {
                    'op': 'replace',
                    'path': '/throttle/burstLimit',
                    'value': str(new_burst_limit)
                }
            ]
        
            # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution
            if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):
                gateway_id = stage_name = None
            resource_path = '*' if resource_path.startswith('{{') else resource_path
            http_method = '*' if http_method.startswith('{{') else http_method
        
            boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
        
            if validate_quota_limits:
                quota_rate_limit: float = get_service_quota(
                    boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']
                quota_burst_limit: float = get_service_quota(
                    boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']
        
                if new_rate_limit > quota_rate_limit:
                    raise ValueError(f'Given value of RestApiGwThrottlingRate: {new_rate_limit}, can not be more than '
                                     f'service quota Throttle rate: {quota_rate_limit}')
        
                if new_burst_limit > quota_burst_limit:
                    raise ValueError(f'Given value of RestApiGwThrottlingBurst: {new_burst_limit}, can not be more than '
                                     f'service quota Throttle burst rate: {quota_burst_limit}')
            if stage_name:
                path: str = f'/apiStages/{gateway_id}:{stage_name}/throttle/{resource_path}/{http_method}'
                patch_operations[0]['path'], patch_operations[1]['path'] = f'{path}/rateLimit', f'{path}/burstLimit'
                updated_usage_plan = update_usage_plan(usage_plan_id, patch_operations)
        
                for stage in updated_usage_plan['apiStages']:
                    if stage['apiId'] == gateway_id and stage['stage'] == stage_name:
                        output['RateLimit'] = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']
                        output['BurstLimit'] = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']
            else:
                updated_usage_plan = update_usage_plan(usage_plan_id, patch_operations)
                output['RateLimit'] = updated_usage_plan['throttle']['rateLimit']
                output['BurstLimit'] = updated_usage_plan['throttle']['burstLimit']
        
            output['RateLimit'] = int(output['RateLimit'])
            wait_throttling_config_updated(events, None)
        
            return output
        
        


  - name: AssertAlarmToBeRed
    description: Wait for expected alarm to be red after failure is injected
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ApiGw4xxAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]

  - name: RollbackCurrentExecution
    description: Restore original throttling configuratiuon for the REST API Gateway
    maxAttempts: 5
    onCancel: step:TriggerRollback
    action: aws:executeScript
    outputs:
      - Name: RestApiGwThrottlingRateRestoredValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: RestApiGwThrottlingBurstRestoredValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: set_throttling_config
      InputPayload:
        RestApiGwUsagePlanId: '{{ RestApiGwUsagePlanId }}'
        RestApiGwId: '{{ RestApiGwId }}'
        RestApiGwStageName: '{{ RestApiGwStageName }}'
        RestApiGwResourcePath: '{{ RestApiGwResourcePath }}'
        RestApiGwHttpMethod: '{{ RestApiGwHttpMethod }}'
        RestApiGwThrottlingRate: '{{ BackupThrottlingConfiguration.RestApiGwThrottlingRateOriginalValue }}'
        RestApiGwThrottlingBurst: '{{ BackupThrottlingConfiguration.RestApiGwThrottlingBurstOriginalValue }}'
        ValidateQuotaLimits: False
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def execute_boto3_with_backoff(delegate: Callable[[Any], dict], **kwargs) -> dict:
            """
            Executes the given delegate with apigateway client parameter, handles TooManyRequestsException using
            exponential backoff algorithm with random jitter
            :param delegate: The delegate to execute (with boto3 function)
            :keyword args:
                retries: Number of maximum backoff retries
                max_interval: Maximum backoff interval in seconds
                base_time: Backoff base time
            :return: The output of the given function
            """
            backoff_retries: int = kwargs.get('retries', 15)
            backoff_max_interval: int = kwargs.get('max_interval', 64)
            backoff_base_time: int = kwargs.get('base_time', 2)
            apigw_client = boto3.client('apigateway')
        
            count = 1
            while count <= backoff_retries:
                try:
                    log.debug(f'Making an API call, attempt: {count} ...')
                    response = delegate(apigw_client)
                    assert_https_status_code_200(response, 'Failed to perform API call')
                    log.debug('API call performed successfully.')
                    return response
                except ClientError as error:
                    if error.response['Error']['Code'] == 'TooManyRequestsException':
                        interval: float = min(backoff_base_time * 2 ** count + round(uniform(-2, 2), 2), backoff_max_interval)
                        log.warning(f'TooManyRequestsException, slow it down with delay {interval} seconds ...')
                        time.sleep(interval)
                        count += 1
                    else:
                        log.error(error)
                        raise error
        
            raise Exception(f'Failed to perform API call successfully for {count - 1} times.')
        
        

        def get_service_quota(config: object, service_code: str, quota_code: str) -> dict:
            client = boto3.client('service-quotas', config=config)
            response = client.get_service_quota(ServiceCode=service_code, QuotaCode=quota_code)
            assert_https_status_code_200(response, f'Failed to perform get_service_quota with '
                                                   f'ServiceCode: {service_code} and QuotaCode: {quota_code}')
            return response
        
        

        def update_usage_plan(usage_plan_id: str, patch_operations: list, retries: int = 15) -> dict:
            return execute_boto3_with_backoff(
                delegate=lambda x: x.update_usage_plan(
                    usagePlanId=usage_plan_id,
                    patchOperations=patch_operations
                ),
                retries=retries
            )
        
        

        def wait_throttling_config_updated(events: dict, context: dict) -> None:
            expected_rate_limit: int = int(events['RestApiGwThrottlingRate'])
            expected_burst_limit: int = int(events['RestApiGwThrottlingBurst'])
            max_retries: int = events.get('MaxRetries', 40)
            timeout: int = events.get('Timeout', 15)
            while max_retries > 0:
                actual_throttling_config = get_throttling_config(events, None)
                actual_rate_limit = actual_throttling_config['RateLimit']
                actual_burst_limit = actual_throttling_config['BurstLimit']
                if actual_rate_limit == expected_rate_limit and actual_burst_limit == expected_burst_limit:
                    return
                log.info(f'Waiting for expected values: [RateLimit: {expected_rate_limit}, BurstLimit: {expected_burst_limit}],'
                         f' actual values: [RateLimit: {actual_rate_limit}, BurstLimit: {actual_burst_limit}]')
                max_retries -= 1
                time.sleep(timeout)
        
            raise TimeoutError('Error to wait for throttling config update. Maximum timeout exceeded!')
        
        

        def get_throttling_config(events: dict, context: dict) -> dict:
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId in events')
        
            if 'RestApiGwStageName' in events and events['RestApiGwStageName']:
                if 'RestApiGwId' not in events:
                    raise KeyError('Requires RestApiGwId in events')
                if not events['RestApiGwId']:
                    raise KeyError('RestApiGwId should not be empty')
        
            usage_plan_id: str = events['RestApiGwUsagePlanId']
            gateway_id: str = events.get('RestApiGwId')
            stage_name: str = events.get('RestApiGwStageName')
            resource_path: str = events.get('RestApiGwResourcePath', '*')
            http_method: str = events.get('RestApiGwHttpMethod', '*')
        
            # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution
            if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):
                gateway_id = stage_name = None
            resource_path = '*' if resource_path.startswith('{{') else resource_path
            http_method = '*' if http_method.startswith('{{') else http_method
        
            config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigateway', config=config)
            usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)
            assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')
        
            if stage_name:
                stage_found = False
                for stage in usage_plan['apiStages']:
                    if stage['apiId'] == gateway_id and stage['stage'] == stage_name:
                        stage_found = True
                        if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:
                            rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']
                            burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']
                        else:
                            rate_limit: float = usage_plan['throttle']['rateLimit']
                            burst_limit: int = usage_plan['throttle']['burstLimit']
                if not stage_found:
                    raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')
            else:
                rate_limit: float = usage_plan['throttle']['rateLimit']
                burst_limit: int = usage_plan['throttle']['burstLimit']
        
            return {'RateLimit': int(rate_limit),
                    'BurstLimit': burst_limit,
                    'QuotaLimit': usage_plan['quota']['limit'],
                    'QuotaPeriod': usage_plan['quota']['period']}
        
        

        def set_throttling_config(events: dict, context: dict) -> dict:
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId in events')
        
            if 'RestApiGwThrottlingRate' not in events:
                raise KeyError('Requires RestApiGwThrottlingRate in events')
        
            if 'RestApiGwThrottlingBurst' not in events:
                raise KeyError('Requires RestApiGwThrottlingBurst in events')
        
            if 'RestApiGwStageName' in events and events['RestApiGwStageName']:
                if 'RestApiGwId' not in events:
                    raise KeyError('Requires RestApiGwId in events')
                if not events['RestApiGwId']:
                    raise KeyError('RestApiGwId should not be empty')
        
            usage_plan_id: str = events['RestApiGwUsagePlanId']
            new_rate_limit: float = float(events['RestApiGwThrottlingRate'])
            new_burst_limit: int = int(events['RestApiGwThrottlingBurst'])
            gateway_id: str = events.get('RestApiGwId')
            stage_name: str = events.get('RestApiGwStageName')
            resource_path: str = events.get('RestApiGwResourcePath', '*')
            http_method: str = events.get('RestApiGwHttpMethod', '*')
            validate_quota_limits: bool = events.get('ValidateQuotaLimits', True)
        
            output: dict = {}
            quota_rate_limit_code: str = 'L-8A5B8E43'
            quota_burst_limit_code: str = 'L-CDF5615A'
            patch_operations: list = [
                {
                    'op': 'replace',
                    'path': '/throttle/rateLimit',
                    'value': str(new_rate_limit)
                },
                {
                    'op': 'replace',
                    'path': '/throttle/burstLimit',
                    'value': str(new_burst_limit)
                }
            ]
        
            # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution
            if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):
                gateway_id = stage_name = None
            resource_path = '*' if resource_path.startswith('{{') else resource_path
            http_method = '*' if http_method.startswith('{{') else http_method
        
            boto3_config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
        
            if validate_quota_limits:
                quota_rate_limit: float = get_service_quota(
                    boto3_config, 'apigateway', quota_rate_limit_code)['Quota']['Value']
                quota_burst_limit: float = get_service_quota(
                    boto3_config, 'apigateway', quota_burst_limit_code)['Quota']['Value']
        
                if new_rate_limit > quota_rate_limit:
                    raise ValueError(f'Given value of RestApiGwThrottlingRate: {new_rate_limit}, can not be more than '
                                     f'service quota Throttle rate: {quota_rate_limit}')
        
                if new_burst_limit > quota_burst_limit:
                    raise ValueError(f'Given value of RestApiGwThrottlingBurst: {new_burst_limit}, can not be more than '
                                     f'service quota Throttle burst rate: {quota_burst_limit}')
            if stage_name:
                path: str = f'/apiStages/{gateway_id}:{stage_name}/throttle/{resource_path}/{http_method}'
                patch_operations[0]['path'], patch_operations[1]['path'] = f'{path}/rateLimit', f'{path}/burstLimit'
                updated_usage_plan = update_usage_plan(usage_plan_id, patch_operations)
        
                for stage in updated_usage_plan['apiStages']:
                    if stage['apiId'] == gateway_id and stage['stage'] == stage_name:
                        output['RateLimit'] = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']
                        output['BurstLimit'] = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']
            else:
                updated_usage_plan = update_usage_plan(usage_plan_id, patch_operations)
                output['RateLimit'] = updated_usage_plan['throttle']['rateLimit']
                output['BurstLimit'] = updated_usage_plan['throttle']['burstLimit']
        
            output['RateLimit'] = int(output['RateLimit'])
            wait_throttling_config_updated(events, None)
        
            return output
        
        


  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ApiGw4xxAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true

  - name: TriggerRollback
    description: This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def start_rollback_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
        
            # Get parameters for current execution and add IsRollback and PreviousExecutionId
            response_parameters = response['AutomationExecution']['Parameters']
            response_parameters['IsRollback'] = ['true']
            response_parameters['PreviousExecutionId'] = [events['ExecutionId']]
        
            rollback_execution_response = ssm.start_automation_execution(
                DocumentName=response['AutomationExecution']['DocumentName'],
                DocumentVersion=response['AutomationExecution']['DocumentVersion'],
                Parameters=response_parameters
            )
            output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']
            return output
        
        

    isEnd: true
