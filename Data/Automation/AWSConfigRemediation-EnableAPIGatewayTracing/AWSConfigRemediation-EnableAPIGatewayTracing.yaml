schemaVersion: "0.3"
description: |
   ### Document name - AWSConfigRemediation-EnableApiGatewayTracing

   ## What does this document do?
   This document enables tracing on an Amazon API Gateway Stage using the [UpdateStage](https://docs.aws.amazon.com/apigateway/api-reference/link-relation/stage-update/) API.
   Please note, AWS Config is required to be enabled in this region for this document to work as it requires the resource ID recorded by the AWS Config service.

   ## Input Parameters
   * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
   * StageArn: (Required) The Amazon API Gateway Stage ARN.

   ## Output Parameters
   * EnableTracingAndVerify.Output: Success message or failure exception.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@/-]+$
  StageArn:
    type: String
    description: (Required) The Amazon API Gateway Stage ARN.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:apigateway:[a-z0-9-]+::/restapis/[a-z0-9]+/stages/[\w]+

outputs:
  - EnableTracingAndVerify.Output
mainSteps:
  -
    name: EnableTracingAndVerify
    action: "aws:executeScript"
    timeoutSeconds: 600
    isEnd: true
    description: |
      ## EnableTracingAndVerify
      Enables tracing on the given Amazon API Gateway stage and verifies.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        StageArn: "{{ StageArn }}"

      Script: |-
        import boto3
        import botocore
        import re

        def handler(event, context):
            config_client = boto3.client("config")
            apigateway_client = boto3.client("apigateway")
            stage_id = event["StageArn"]
            rest_api_id = ""

            stage_response = config_client.get_resource_config_history(resourceType="AWS::ApiGateway::Stage",
                                                                        resourceId=stage_id, limit=1)
            stage_name = stage_response["configurationItems"][0]["resourceName"]
            rest_api_arn = stage_response["configurationItems"][0]["relationships"][0]["resourceId"]
            rest_api_arn_pattern = "^arn:.*:/restapis/(.*)"
            rest_api_match = re.match(rest_api_arn_pattern, rest_api_arn)
            if not rest_api_match:
                raise Exception("GIVEN AMAZON API GATEWAY STAGE ID IS NOT ASSOCIATED WITH ANY REST API ID.")
            rest_api_id = rest_api_match.groups()[0]

            # Enables tracing to the given Amazon API Gateway stage.
            update_stage_response = apigateway_client.update_stage(stageName=stage_name, restApiId=rest_api_id, patchOperations=[
                {
                    "op": "replace",
                    "path": "/tracingEnabled",
                    "value": "true"
                },
            ])

            # Verifies that the stage tracing has enabled.
            get_stage_response = apigateway_client.get_stage(restApiId=rest_api_id, stageName=stage_name)
            if get_stage_response['tracingEnabled']:
                return {
                    "output": {
                        "message": "Verification of 'Enable Tracing' is successful.",
                        "HTTPResponse": update_stage_response["ResponseMetadata"]
                    }
                }
            error_message = f"VERIFICATION FAILED. API GATEWAY STAGE {stage_name} TRACING NOT ENABLED."
            raise Exception(error_message)

    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: StringMap
	2020-12-18T17:07:05.763000+01:00	YAML	Automation	1	AWSConfigRemediation-EnableAPIGatewayTracing	Active
