# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: 'SOP By AWS ResilienceHub. Scale-up ASG by modifying ASG to use larger instances.
    The SOP will not change from the instance type used, rather will use a larger version from the same type.'
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
outputs:
  - OutputRecoveryTime.RecoveryTime
parameters:
  AutoScalingGroupName:
    type: String
    description: (Required) The Name of the ASG to scale-up
  Dryrun:
    type: Boolean
    default: true
    description: '(Optional) Dryrun indicates a testing run, changes will be rolled back.'
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
mainSteps:
  - name: RecordStartTime
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        def script_handler(events, context):
          from datetime import datetime, timezone
          return datetime.now(timezone.utc).isoformat()
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
  - name: CurrentSetup
    action: 'aws:executeScript'
    outputs:
      - Name: OriginalInstanceType
        Selector: $.Payload.OriginalInstanceType
        Type: String
      - Name: LaunchTemplateVersion
        Selector: $.Payload.LaunchTemplateVersion
        Type: String
      - Name: LaunchTemplateName
        Selector: $.Payload.LaunchTemplateName
        Type: String
      - Name: LaunchConfigurationName
        Selector: $.Payload.LaunchConfigurationName
        Type: String
      - Name: BiggerInstanceType
        Selector: $.Payload.BiggerInstanceType
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_instance_data
      Script: |
        import logging
        import random
        import time
        from math import ceil
        
        import boto3
        from botocore.config import Config
        
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        
        

        def get_instance_data(events, context):
            asg = boto3.client('autoscaling')
            ec2 = boto3.client('ec2')
            describe_asg = asg.describe_auto_scaling_groups(AutoScalingGroupNames=[events['AutoScalingGroupName']])
            if 'MixedInstancesPolicy' in describe_asg['AutoScalingGroups'][0]:
                raise Exception('Cannot run this SOP on ASG that has a MixedInstancesPolicy')
            current_state = get_current_state(ec2, asg, describe_asg)
            bigger_instance_type = get_bigger_instance(current_state['OriginalInstanceType'], ec2)
            return {**current_state, **{'BiggerInstanceType': bigger_instance_type}}
        
        

        def get_current_state(ec2, asg, describe_asg):
            if 'LaunchTemplate' in describe_asg['AutoScalingGroups'][0]:
                launch_template_version = describe_asg['AutoScalingGroups'][0]['LaunchTemplate']['Version']
                launch_template_name = describe_asg['AutoScalingGroups'][0]['LaunchTemplate']['LaunchTemplateName']
                describe_template = ec2.describe_launch_template_versions(
                    LaunchTemplateName=launch_template_name, Versions=[launch_template_version])
                current_instance_type = describe_template['LaunchTemplateVersions'][0]['LaunchTemplateData']['InstanceType']
                return {'OriginalInstanceType': current_instance_type, 'LaunchTemplateVersion': launch_template_version,
                        'LaunchTemplateName': launch_template_name, 'LaunchConfigurationName': ''}
            else:
                launch_config_name = describe_asg['AutoScalingGroups'][0]['LaunchConfigurationName']
                launch_config = asg.describe_launch_configurations(LaunchConfigurationNames=[launch_config_name])
                return {'OriginalInstanceType': launch_config['LaunchConfigurations'][0]['InstanceType'],
                        'LaunchTemplateVersion': '',
                        'LaunchTemplateName': '',
                        'LaunchConfigurationName': launch_config_name}
        
        

        def get_bigger_instance(current_instance_type, ec2):
            instance_type_size = current_instance_type.rsplit(".", 1)
            instance_sizes = ["nano", "micro", "small", "medium", "large", "xlarge", "2xlarge", "3xlarge", "4xlarge",
                              "6xlarge", "8xlarge", "9xlarge", "10xlarge", "12xlarge", "16xlarge", "18xlarge", "24xlarge",
                              "32xlarge", "56xlarge", "112xlarge"]
            bigger_size_start_idx = instance_sizes.index(instance_type_size[1]) + 1
            possible_instance_types = []
            for i in range(len(instance_sizes) - bigger_size_start_idx):
                possible_instance_types.append(instance_type_size[0] + "." + instance_sizes[bigger_size_start_idx + i])
            instance_types_response = ec2.describe_instance_type_offerings(
                Filters=[{'Name': 'instance-type', "Values": [instance_type_size[0] + ".*"]}])
            all_instance_types = [offering['InstanceType'] for offering in instance_types_response['InstanceTypeOfferings']]
            bigger_instances = [candidate for candidate in possible_instance_types if candidate in all_instance_types]
            if bigger_instances:
                return bigger_instances[0]
            else:
                raise Exception("Could not identify bigger instance type than current instance type: " + current_instance_type)
        
        

      InputPayload:
        AutoScalingGroupName: '{{AutoScalingGroupName}}'
    description: Record current set up and gather the larger instance to which we will upgrade the ASG.
  - name: UpgradeInstanceType
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.8
      Handler: update_asg
      Script: |-
        import logging
        import random
        import time
        from math import ceil
        
        import boto3
        from botocore.config import Config
        
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        
        

        def update_asg(events, context):
            asg = boto3.client('autoscaling')
            ec2 = boto3.client('ec2')
            new_instance_type = events['BiggerInstanceType']
            if events['LaunchTemplateName']:
                create_template_response = ec2.create_launch_template_version(
                    LaunchTemplateName=events['LaunchTemplateName'],
                    SourceVersion=events['LaunchTemplateVersion'],
                    LaunchTemplateData={'InstanceType': new_instance_type},
                    VersionDescription="Uses instance type " + new_instance_type)
                new_version = str(create_template_response['LaunchTemplateVersion']['VersionNumber'])
                asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],
                                              LaunchTemplate={'LaunchTemplateName': events['LaunchTemplateName'],
                                                              'Version': new_version})
                return {'LaunchConfigOrTemplate': events['LaunchTemplateName'] + ':' + new_version}
            else:
                describe_asg = asg.describe_auto_scaling_groups(AutoScalingGroupNames=[events['AutoScalingGroupName']])
                describe_launch_config = asg.describe_launch_configurations(
                    LaunchConfigurationNames=[describe_asg['AutoScalingGroups'][0]['LaunchConfigurationName']])
                launch_config = describe_launch_config['LaunchConfigurations'][0]
                launch_config.pop('LaunchConfigurationARN')
                launch_config.pop('CreatedTime')
                launch_config['InstanceType'] = new_instance_type
                launch_config['LaunchConfigurationName'] = launch_config['LaunchConfigurationName'] + 
                    "-" + str(random.randint(1000, 9999))
                asg.create_launch_configuration(**{key: value for (key, value) in launch_config.items() if value != ''})
                asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],
                                              LaunchConfigurationName=launch_config['LaunchConfigurationName'])
                return {'LaunchConfigOrTemplate': launch_config['LaunchConfigurationName']}
        
        

      InputPayload:
        AutoScalingGroupName: '{{ AutoScalingGroupName }}'
        LaunchTemplateName: '{{ CurrentSetup.LaunchTemplateName }}'
        LaunchTemplateVersion: '{{ CurrentSetup.LaunchTemplateVersion }}'
        BiggerInstanceType: '{{ CurrentSetup.BiggerInstanceType }}'
    outputs:
      - Selector: $.Payload.LaunchConfigOrTemplate
        Name: LaunchConfigOrTemplate
        Type: String
    description: 'Upgrade ASG to use the larger instance type. Depending on the configuration of the ASG, this will either upgrade the Launch Template or the Launch Configuration.'
  - name: RefreshInstances
    action: 'aws:executeAwsApi'
    inputs:
      Service: autoscaling
      Api: StartInstanceRefresh
      AutoScalingGroupName: '{{AutoScalingGroupName}}'
    outputs:
      - Selector: $.InstanceRefreshId
        Name: InstanceRefreshId
        Type: String
    description: Refresh instances to upgrade to new instance type
  - name: WaitForRefresh
    action: 'aws:waitForAwsResourceProperty'
    inputs:
      Service: autoscaling
      Api: DescribeInstanceRefreshes
      PropertySelector: '$.InstanceRefreshes[0].Status'
      DesiredValues:
        - Successful
      AutoScalingGroupName: '{{AutoScalingGroupName}}'
      InstanceRefreshIds:
        - '{{RefreshInstances.InstanceRefreshId}}'
    description: Wait for RefreshInstances to complete
  - name: OutputRecoveryTime
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        def script_handler(events, context):
          from datetime import datetime, timezone
          from dateutil import parser
          return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds
      InputPayload:
        StartTime: '{{RecordStartTime.StartTime}}'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
  - name: DryrunBranch
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: EmptyStepForEnd
          Variable: '{{Dryrun}}'
          BooleanEquals: false
        - NextStep: RollBackScaleUpChange
          Variable: '{{Dryrun}}'
          BooleanEquals: true
    description: 'If this is NOT a dryrun, skip to the end. If it is a dryrun, proceed to rollback.'
  - name: RollBackScaleUpChange
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.8
      Handler: rollback_scaleup
      Script: |
        import logging
        import random
        import time
        from math import ceil
        
        import boto3
        from botocore.config import Config
        
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        
        

        def rollback_scaleup(events, context):
            asg = boto3.client('autoscaling')
            ec2 = boto3.client('ec2')
            if events['LaunchTemplateName']:
                name_version = events['LaunchConfigOrTemplate'].rsplit(":", 1)
                asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],
                                              LaunchTemplate={'LaunchTemplateName': events['LaunchTemplateName'],
                                                              'Version': events['LaunchTemplateVersion']})
                ec2.delete_launch_template_versions(LaunchTemplateName=name_version[0], Versions=[name_version[1]])
            else:
                asg.update_auto_scaling_group(AutoScalingGroupName=events['AutoScalingGroupName'],
                                              LaunchConfigurationName=events['LaunchConfigurationName'])
                asg.delete_launch_configuration(LaunchConfigurationName=events['LaunchConfigOrTemplate'])
        
        

      InputPayload:
        AutoScalingGroupName: '{{ AutoScalingGroupName }}'
        LaunchTemplateName: '{{ CurrentSetup.LaunchTemplateName }}'
        LaunchTemplateVersion: '{{ CurrentSetup.LaunchTemplateVersion }}'
        LaunchConfigurationName: '{{ CurrentSetup.LaunchConfigurationName }}'
        LaunchConfigOrTemplate: '{{ UpgradeInstanceType.LaunchConfigOrTemplate }}'
    description: Rollback by updating the ASG to use the previous Launch Template or Launch Configuration
  - name: RefreshInstancesRollback
    action: 'aws:executeAwsApi'
    inputs:
      Service: autoscaling
      Api: StartInstanceRefresh
      AutoScalingGroupName: '{{AutoScalingGroupName}}'
    outputs:
      - Name: RollbackInstanceRefreshId
        Selector: $.InstanceRefreshId
        Type: String
    description: Refresh instances to previous version (perform rollback)
  - name: WaitForRollback
    action: 'aws:waitForAwsResourceProperty'
    inputs:
      Service: autoscaling
      Api: DescribeInstanceRefreshes
      PropertySelector: '$.InstanceRefreshes[0].Status'
      DesiredValues:
        - Successful
      AutoScalingGroupName: '{{AutoScalingGroupName}}'
      InstanceRefreshIds:
        - '{{RefreshInstancesRollback.RollbackInstanceRefreshId}}'
    description: Wait for rollback to complete
  - name: EmptyStepForEnd
    action: 'aws:sleep'
    inputs:
      Duration: PT1S
    description: End
