#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-CreateEFSBackupSOP_2020-10-26

            ## Intent
            Create a backup of a EFS file system before major changes in configuration or deployment

            ## Type
            SOP

            ## Risk
            Low

            ## Requirements
              * EFS file system
              * Backup vault exists to store backup
              * IAM role with [AWSBackupServiceRolePolicyForBackup](https://docs.aws.amazon.com/aws-backup/latest/devguide/iam-service-roles.html) policy
              * All processes that write to EFS file system should be stopped before running SOP to avoid data inconsistency

            ## Permissions required for AutomationAssumeRole
              * elasticfilesystem:DescribeFileSystems
              * backup:StartBackupJob
              * backup:DescribeBackupJob

            ## Supports Rollback
            No

            ## Cancellation behavior
            Fail

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) FileSystemId
              * type: String
              * description: ID of the EFS file system

            ### (Required) BackupVaultName
              * type: String
              * description: The name of a logical container where backups are stored

            ### (Required) BackupJobIamRoleArn
              * type: String
              * description: IAM role ARN with policy [AWSBackupServiceRolePolicyForBackup](https://docs.aws.amazon.com/aws-backup/latest/devguide/iam-service-roles.html) used to create the target recovery point

            ## Details
            The document creates AWS Backup job to backup the specified file system and waits for its completion.

            ## Steps executed in normal flow
              * RecordStartTime
              * GetFileSystemArn
              * CreateBackupJob
              * WaitForBackupJobCompletion
              * OutputRecoveryTime

            ## Outputs
            ### CreateBackupJob.RecoveryPointArn
              * type: String
              * description: ARN of the created Recovery Point

            ### CreateBackupJob.BackupJobId
              * type: String
              * description: Create backup job ID

            ### OutputRecoveryTime.RecoveryTime
              * type: Integer
              * description: SOP execution time in seconds
schemaVersion: "0.3"
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  FileSystemId:
    type: String
    description: (Required) ID of the EFS file system
  BackupVaultName:
    type: String
    description: (Required) The name of a logical container where backups are stored
  BackupJobIamRoleArn:
    type: String
    description: (Required) IAM role ARN with policy AWSBackupServiceRolePolicyForBackup used to create the target recovery point
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf
outputs:
  - CreateBackupJob.RecoveryPointArn
  - CreateBackupJob.BackupJobId
  - OutputRecoveryTime.RecoveryTime
mainSteps:
  - name: RecordStartTime
    description: Start recording execution time
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def start_time(events, context):
            return datetime.now(timezone.utc).isoformat()
        
        


  - name: GetFileSystemArn
    description: Get ARN of the file system using provided ID
    action: 'aws:executeAwsApi'
    outputs:
      - Name: FileSystemArn
        Selector: '$.FileSystems[0].FileSystemArn'
        Type: String
    inputs:
      Service: efs
      Api: DescribeFileSystems
      FileSystemId: '{{ FileSystemId }}'

  - name: CreateBackupJob
    description: Create backup job for the specified file system
    action: 'aws:executeAwsApi'
    outputs:
      - Name: BackupJobId
        Selector: '$.BackupJobId'
        Type: String
      - Name: RecoveryPointArn
        Selector: '$.RecoveryPointArn'
        Type: String
    inputs:
      Service: backup
      Api: startBackupJob
      BackupVaultName: '{{ BackupVaultName }}'
      ResourceArn: '{{ GetFileSystemArn.FileSystemArn }}'
      IamRoleArn: '{{ BackupJobIamRoleArn }}'
      IdempotencyToken: '{{ global:DATE_TIME }}'

  - name: WaitForBackupJobCompletion
    description: Wait until backup job is completed
    action: 'aws:waitForAwsResourceProperty'
    maxAttempts: 10
    timeoutSeconds: 60
    inputs:
      Service: backup
      Api: DescribeBackupJob
      BackupJobId: '{{ CreateBackupJob.BackupJobId }}'
      PropertySelector: '$.State'
      DesiredValues: ['COMPLETED']

  - name: OutputRecoveryTime
    description: Calculate execution time
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: '$.Payload'
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: recovery_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def recovery_time(events, context):
            return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds
        
        

      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'

