schemaVersion: "0.3"
description: |
   ### Document Name - AWSConfigRemediation-DeleteUnusedVPCNetworkACL.

   ## What does this document do?
   This document deletes an unused Amazon VPC Network ACL i.e., a Network ACL that is not associated with a subnet.

   ## Input Parameters
   * NetworkAclId: (Required) Network ACL ID which needs to be deleted.
   * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

   ## Output Parameters
   * DeleteUnusedVPCNetworkACL.HttpResponse: The standard HTTP response from the DeleteNetworkAcl API call.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+
  NetworkAclId:
    type: String
    description: (Required) Network ACL ID which needs to be deleted.
    allowedPattern: ^acl-[A-Za-z0-9]{17}$

outputs:
  - DeleteUnusedVPCNetworkACL.HttpResponse
mainSteps:
  -
    name: DeleteUnusedVPCNetworkACL
    action: "aws:executeAwsApi"
    description: |
      ## DeleteUnusedVPCNetworkACL
      Delete an unused Amazon VPC Network ACL.
      ## Outputs
      * DeleteUnusedVPCNetworkACL.ResponseMetadata: The standard HTTP response from the DeleteNetworkAcl API call.
    timeoutSeconds: 600
    isEnd: false
    inputs:
      Service: ec2
      Api: DeleteNetworkAcl
      NetworkAclId: "{{ NetworkAclId }}"
    outputs:
      - Name: HttpResponse
        Selector: $
        Type: StringMap

  - name: VerifyVPCNetworkACLDeleted
    action: aws:executeScript
    description: |
      ## VerifyVPCNetworkACLDeleted
        Checks that the VPC Network ACL deleted in the previous step exists.
      ## Outputs
        * Output: Success message or failure Exception.
    isEnd: true
    timeoutSeconds: 600
    inputs:
      Runtime: python3.6
      Handler: handler
      InputPayload:
        NetworkAclId: "{{ NetworkAclId }}"
      Script: |-
        import boto3

        def handler(event, context):
            ec2 = boto3.client('ec2')
            network_acl_id = event['NetworkAclId']

            try:
              ec2.describe_network_acls(NetworkAclIds = [network_acl_id])
              error_message = "VERIFICATION FAILED. THE NETWORKACL {} DELETION UNSUCCESSFUL.".format(network_acl_id)
              raise Exception(error_message)
            except ec2.exceptions.ClientError as error:
              if error.response['Error']['Code'] == 'InvalidNetworkAclID.NotFound':
                return {
                  "output": "Verification of delete VPC Network ACL is successful."
                }
              else:
                raise error
    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: String

