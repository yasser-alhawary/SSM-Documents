description: |
  ### Document name - AWSConfigRemediation-DeleteUnusedEBSVolume

  ## What does this document do?
  This document deletes an unused Amazon EBS volume. If the target EBS volume is in-use, this document does not perform any changes to the AWS account.
  
  ## Input Parameters
  * VolumeId: (Required) The unique ID of the EBS volume.
  * CreateSnapshot: (Optional) Boolean value to determine snapshot creation.
  * AutomationAsssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

  ## Output Parameters
  * ValidateAndCreateEbsSnapshot.Snapshot: Amazon EBS snapshot ID
  * DeleteEbsVolume.Output: The standard HTTP response from the DeleteVolume API.

schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  VolumeId:
    type: String
    description: (Required) The unique ID of the EBS volume.
    allowedPattern: ^vol-[0-9a-f]{17}$
  CreateSnapshot:
    type: Boolean
    description: (Optional) Boolean value to determine snapshot creation.
    default: true
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+$
mainSteps:
- name: ValidateAndCreateEbsSnapshot
  description: |
    ## ValidateAndCreateEbsSnapshot
    Verifies that the EBS volume is not in use and proceeds to create a snapshot based on the CreateSnapshot parameter.
    ## Outputs
    * output: The EBS volume ID and snapshot ID.
  action: aws:executeScript
  onFailure: Abort
  nextStep: BranchOnCreateSnapshot
  isCritical: true
  timeoutSeconds: 600
  maxAttempts: 1
  inputs:
    InputPayload:
      VolumeId: "{{ VolumeId }}"
      CreateSnapshot: "{{ CreateSnapshot }}"
    Script: |
      import boto3
      from botocore.exceptions import ClientError

      ec2_client = boto3.client("ec2")

      def script_handler(event, context):
          volume_id = event.get("VolumeId")
          volume_details = ec2_client.describe_volumes(VolumeIds=[volume_id])["Volumes"][0]
          if volume_details["State"] != "available":
            raise Exception(f"SPECIFIED VOLUME {volume_id} IS NOT IN AVAILABLE STATE")

          snapshot_id, response_metadata = "", ""
          if event.get("CreateSnapshot"):
              try:
                  description = f"Copy of {volume_id}"
                  response = ec2_client.create_snapshot(
                      VolumeId=volume_id, Description=description
                  )
                  snapshot_id = response["SnapshotId"]
                  response_metadata = response["ResponseMetadata"]
              except ClientError as err:
                  raise Exception(f"FAILED TO CREATE EBS SNAPSHOT FOR SPECIFIED VOLUME: {err}")

          output = {"Volume": volume_id, "Snapshot": snapshot_id, "ResponseMetadata": response_metadata}
          return output
    Handler: script_handler
    Runtime: python3.7
  outputs:
  - Name: Snapshot
    Selector: "$.Payload.Snapshot"
    Type: String
  - Name: Volume
    Selector: "$.Payload.Volume"
    Type: String
- name: BranchOnCreateSnapshot
  description: |
    ## BranchOnCreateSnapshot
    Branches based on the CreateSnapshot parameter value.
  action: aws:branch
  onFailure: Abort
  isCritical: true
  maxAttempts: 2
  isEnd: true
  timeoutSeconds: 60
  inputs:
    Choices:
    - Variable: "{{ CreateSnapshot }}"
      BooleanEquals: false
      NextStep: DeleteEbsVolume
    Default: CheckSnapshotIsCreated
- name: CheckSnapshotIsCreated
  description: |
    ## CheckSnapshotIsCreated
    Waits for snapshot to successfully move into completed state.
  action: aws:waitForAwsResourceProperty
  onFailure: step:CleanEbsSnapshotOnFailure
  nextStep: DeleteEbsVolume
  isCritical: true
  timeoutSeconds: 1800
  maxAttempts: 3
  inputs:
    Service: ec2
    Api: DescribeSnapshots
    SnapshotIds:
    - "{{ ValidateAndCreateEbsSnapshot.Snapshot }}"
    PropertySelector: "$.Snapshots..State"
    DesiredValues:
    - completed
- name: CleanEbsSnapshotOnFailure
  description: |
    ## CleanEbsSnapshotOnFailure
    Deletes created snapshot if step CheckSnapshotIsCreated fails.
  action: aws:executeAwsApi
  onFailure: Abort
  isCritical: true
  isEnd: true
  timeoutSeconds: 180
  maxAttempts: 3
  inputs:
    Service: ec2
    Api: DeleteSnapshot
    SnapshotId:
    - "{{ ValidateAndCreateEbsSnapshot.Snapshot }}"
- name: DeleteEbsVolume
  description: |
    ## DeleteEbsVolume
    Deletes the specified EBS Volume.
    ## Outputs
    * Output: The standard HTTP response from the DeleteVolume API.
  action: aws:executeAwsApi
  onFailure: Abort
  isCritical: true
  timeoutSeconds: 180
  maxAttempts: 3
  inputs:
    Service: ec2
    Api: DeleteVolume
    VolumeId: "{{ ValidateAndCreateEbsSnapshot.Volume }}"
  outputs:
    - Name: Output
      Selector: $
      Type: StringMap
- name: VerifyEbsVolumeDeletion
  description: |
    ## VerifyEbsVolumeDeletion
    Verifies that the Amazon EBS volume is deleted in the previous step.
    ## Outputs
    * Output: A success message or failure exception.
  action: aws:executeScript
  onFailure: Abort
  isEnd: true
  timeoutSeconds: 300
  maxAttempts: 3
  inputs:
    InputPayload:
      VolumeID: "{{ ValidateAndCreateEbsSnapshot.Volume }}"
    Handler: script_handler
    Runtime: python3.7
    Script: |
      import boto3
      import botocore

      def script_handler(event, context):
          ec2_client = boto3.client('ec2')
          volume_id = event['VolumeID']
          try:
             waiter = ec2_client.get_waiter('volume_deleted')
             waiter.wait(VolumeIds=[volume_id],WaiterConfig={'Delay': 30, 'MaxAttempts': 10})
             response = ec2_client.describe_volumes(VolumeIds=[volume_id])
          except botocore.exceptions.WaiterError:
             error_message = f"VERIFICATION FAILED. EBS VOLUME {volume_id} DELETION UNSUCCESSFUL."
             raise Exception(error_message)
          except botocore.exceptions.ClientError as e:
             if e.response["Error"]["Code"] == "InvalidVolume.NotFound":
                return {"output": "Verification of 'DeleteEBSVolume' is successful."}
             raise e
  outputs:
    - Name: Output
      Selector: $.Payload.output
      Type: String
outputs:
- ValidateAndCreateEbsSnapshot.Snapshot
- DeleteEbsVolume.Output	2020-12-16T17:05:17.375000+01:00	YAML	Automation	2	AWSConfigRemediation-DeleteUnusedEBSVolume	Active
