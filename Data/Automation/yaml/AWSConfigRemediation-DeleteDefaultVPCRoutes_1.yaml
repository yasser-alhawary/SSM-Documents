schemaVersion: "0.3"
description: |
   ### Document name - AWSConfigRemediation-DeleteDefaultVPCRoutes

   ## What does this document do?
   This Document deletes the default ("0.0.0.0/0", "::/0") routes in an Amazon EC2 VPC Route table using the [DeleteRoute](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteRoute.html) API.

   ## Input Parameters
   * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
   * RouteTableID: (Required) Route Table ID for which default routes need to be deleted.

   ## Output Parameters
   * DeleteRouteAndVerify.Output: Success message or failure exception.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+
  RouteTableID:
    type: String
    description: (Required) The ID of the route table.
    allowedPattern: "^rtb-[a-z0-9]{17}$"
outputs:
  - DeleteRouteAndVerify.Output
mainSteps:
  -
    name: DeleteRouteAndVerify
    action: "aws:executeScript"
    description: |
      ## DeleteRouteAndVerify
      Deletes the default IPv4 and IPv6 routes and verifies that the routes are deleted.
      ## Outputs
      * Output: Success message or failure exception.
    isEnd: true
    timeoutSeconds: 600
    inputs:
      Runtime: python3.6
      Handler: handler
      InputPayload:
        RouteTableID: "{{ RouteTableID }}"
      Script: |-
        import boto3

        INTERNET_CIDR_BLOCK = ["0.0.0.0/0", "::/0"]


        def get_routes(ec2_client, route_table_id):
            desc_route_table = ec2_client.describe_route_tables(RouteTableIds=[route_table_id])
            route_tables = desc_route_table["RouteTables"]
            for route_table in route_tables:
                return route_table["Routes"]


        def verify_default_route_exist(ec2_client, route_table_id):
            routes = get_routes(ec2_client, route_table_id)
            return any(route in INTERNET_CIDR_BLOCK for route in routes)


        def delete_default_routes(ec2_client, route_table_id):
            routes = get_routes(ec2_client, route_table_id)
            response = {
                "IPv6Response": [],
                "IPv4Response": []
            }
            for route in routes:
                dest_cidr_block = (
                    route.get("DestinationCidrBlock")
                    or route.get("DestinationIpv6CidrBlock")
                    or route.get("DestinationIpv4CidrBlock")
                )
                if dest_cidr_block in INTERNET_CIDR_BLOCK:
                    if dest_cidr_block == "::/0":
                        ipv6_delete_response = ec2_client.delete_route(
                            DestinationIpv6CidrBlock=dest_cidr_block,
                            RouteTableId=route_table_id,
                        )
                        response["IPv6Response"].append(ipv6_delete_response)
                    else:
                        ipv4_delete_response = ec2_client.delete_route(
                            DestinationCidrBlock=dest_cidr_block, RouteTableId=route_table_id
                        )
                        response["IPv4Response"].append(ipv4_delete_response)
            return response


        def handler(event, context):
            ec2_client = boto3.client("ec2")
            route_table_id = event["RouteTableID"]
            response = delete_default_routes(ec2_client, route_table_id)

            default_route_exist = verify_default_route_exist(
                ec2_client, route_table_id
            )
            if not response["IPv6Response"] or not response["IPv4Response"]:
                return {
                    "output": {
                        "message": "No Default routes to delete."
                    }
                }
            if not default_route_exist:
                return {
                    "output": {
                        "message": "Default route successfully deleted.",
                        "HTTPResponse": response
                    }
                }
            raise Exception("VERIFICATION FAILED. DEFAULT ROUTE NOT DELETED.")


    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: StringMap

