schemaVersion: "0.3"
description: |
   ### Document name - AWSConfigRemediation-DeleteRDSCluster

   ## What does this document do?
   This document deletes a given Amazon RDS cluster using the [DeleteDBCluster](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DeleteDBCluster.html) API.
   Please note, AWS Config is required to be enabled in this region for this document to work as it requires the resource ID recorded by the AWS Config service.

   ## Input Parameters
   * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
   * DBClusterId: (Required) Amazon RDS cluster resourceId to be deleted.
   * SkipFinalSnapshot: (Optional) A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted.
   * FinalDBSnapshotIdentifier: (Optional) The DB cluster snapshot identifier of the new DB cluster snapshot created when SkipFinalSnapshot is disabled.

   ## Output Parameters
   * DeleteRDSClusterAndVerify.Output: Success message or failure exception.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+
  DBClusterId:
    type: String
    description: (Required) Amazon RDS cluster resourceId to be deleted.
    allowedPattern: ^cluster-[A-Z0-9]{26}$
  SkipFinalSnapshot:
    type: Boolean
    description: (Optional) A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted.
    default: false
    allowedValues:
    - true
    - false
  FinalDBSnapshotIdentifier:
    type: String
    description: (Optional) The DB cluster snapshot identifier of the new DB cluster snapshot created when SkipFinalSnapshot is disabled.
    allowedPattern: ^((?!-)(?!.*--)[a-zA-Z]{1}[A-Za-z0-9-]{1,254}(?<!-))?$
    default: ""

outputs:
  - DeleteRDSClusterAndVerify.Output
mainSteps:
  -
    name: DeleteRDSClusterAndVerify
    action: "aws:executeScript"
    description: |
      ## DeleteRDSClusterAndVerify
      Deletes the DB cluster and verifies that the cluster deleted.
      ## Outputs
      * Output: Success message or failure exception.
    isEnd: true
    timeoutSeconds: 900
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        DBClusterId: "{{ DBClusterId }}"
        SkipFinalSnapshot: "{{ SkipFinalSnapshot }}"
        FinalDBSnapshotIdentifier: "{{ FinalDBSnapshotIdentifier }}"
      Script: |-
        import boto3

        rds_client = boto3.client("rds")
        config_client = boto3.client("config")

        def get_db_cluster_id(db_cluster_id):
            response = config_client.get_resource_config_history(
                resourceType="AWS::RDS::DBCluster", resourceId=db_cluster_id, limit=1
            )
            return response["configurationItems"][0]["resourceName"]

        def describe_rds_cluster(db_cluster_id):
            return rds_client.describe_db_clusters(DBClusterIdentifier=db_cluster_id)

        def delete_rds_cluster(db_cluster_id, desc_rds_cluster, snapshot_identifier):
            db_cluster_members = desc_rds_cluster["DBClusters"][0]["DBClusterMembers"]
            for db_cluster_member in db_cluster_members:
                delete_db_cluster_member = rds_client.delete_db_instance(
                    DBInstanceIdentifier=db_cluster_member["DBInstanceIdentifier"]
                )
            if snapshot_identifier:
                delete_db_cluster = rds_client.delete_db_cluster(
                    DBClusterIdentifier=db_cluster_id,
                    FinalDBSnapshotIdentifier=snapshot_identifier,
                )
            else:
                delete_db_cluster = rds_client.delete_db_cluster(
                    DBClusterIdentifier=db_cluster_id,
                    SkipFinalSnapshot=True,
                )
            return {"HTTPResponse": delete_db_cluster["ResponseMetadata"]}

        def verify_db_cluster_deleted(db_cluster_id, cluster_snapshot_identifier):
            if cluster_snapshot_identifier:
                rds_cluster_snapshot_waiter = rds_client.get_waiter(
                    "db_cluster_snapshot_available"
                )
                rds_cluster_snapshot_waiter.wait(
                    DBClusterSnapshotIdentifier=cluster_snapshot_identifier
                )
            else:
                rds_instance_deleted_waiter = rds_client.get_waiter(
                    "db_instance_deleted"
                )
                rds_instance_deleted_waiter.wait(
                    Filters=[{"Name":"db-cluster-id", "Values":[db_cluster_id]}]
                )
            response = describe_rds_cluster(db_cluster_id)
            if (
                response["DBClusters"][0]["Status"] == "deleting"
                or response["DBClusters"][0]["Status"] == "backing-up"
            ):
                return True
            return False

        def handler(event, context):
            db_resource_id = event["DBClusterId"]
            db_cluster_id = get_db_cluster_id(db_resource_id)
            desc_rds_cluster = describe_rds_cluster(db_cluster_id)
            if event["SkipFinalSnapshot"]:
                snapshot_identifier = ""
            else:
                snapshot_identifier = event.get("FinalDBSnapshotIdentifier") or db_resource_id
            delete_rds_cluster_response = delete_rds_cluster(
                db_cluster_id, desc_rds_cluster, snapshot_identifier
            )
            db_cluster_status = verify_db_cluster_deleted(
                db_cluster_id, snapshot_identifier
            )
            if db_cluster_status:
                output_data = {
                    "output": {
                        "Message": "Verification of DeleteRDSCluster is successful.",
                        "HTTPResponse": delete_rds_cluster_response["HTTPResponse"],
                    }
                }
                if snapshot_identifier:
                    output_data["output"]["FinalDBSnapshotIdentifier"] = snapshot_identifier
                return output_data
            raise Exception("VERIFICATION FAILED. AMAZON RDS CLUSTER NOT DELETED.")

    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: StringMap
	2020-12-29T17:08:13.216000+01:00	YAML	Automation	1	AWSConfigRemediation-DeleteRDSCluster	Active
