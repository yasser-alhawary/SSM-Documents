schemaVersion: "0.3"
description: |
  ### Document name - AWSConfigRemediation-EnforceHttpsOnEsDomain

  ## What does this document do?
  This document enables `EnforceHTTPS` on a given Amazon Elasticsearch service domain using the [UpdateElasticsearchDomainConfig](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-api.html#es-configuration-api-actions-updateelasticsearchdomainconfig) API.

  ## Input Parameters
  * DomainName: (Required) The name of the Amazon Elasticsearch service domain.
  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

  ## Output Parameters
  * UpdateElasticsearchDomainConfigAndVerify.Output: Success message or failure exception.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  DomainName:
    type: String
    description: (Required) The name of the Amazon Elasticsearch service domain.
    allowedPattern: (\d{12}/)?[a-z0-9-]{3,28}
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+
outputs:
  - UpdateElasticsearchDomainConfigAndVerify.Output
mainSteps:
  - name: UpdateElasticsearchDomainConfigAndVerify
    action: "aws:executeScript"
    description: |
      ## UpdateElasticsearchDomainConfigAndVerify
      Makes UpdateElasticsearchDomainConfig API call using domain name to enable `EnforceHTTPS` on Amazon Elasticsearch service domain and verifies its state.
      ## Outputs
      * Output: Success message or failure exception.
    timeoutSeconds: 600
    inputs:
      Runtime: python3.6
      Handler: handler
      InputPayload:
        DomainName: "{{ DomainName }}"
      Script: |-
        import boto3
        import re

        def update_enforce_https(es_client, domain_name):
            return es_client.update_elasticsearch_domain_config(
                DomainName=domain_name, DomainEndpointOptions={"EnforceHTTPS": True}
            )

        def verify_es_domain_enforce_https_status(es_client, domain_name):
            describe_elasticsearch_domain_response = es_client.describe_elasticsearch_domain(
                DomainName=domain_name
            )
            if describe_elasticsearch_domain_response["DomainStatus"]["DomainEndpointOptions"]["EnforceHTTPS"]:
                return True
            return False

        def handler(event, context):
            es_client = boto3.client("es")
            domain_name = event["DomainName"]
            domain_pattern = r"(\d{12}/)?[a-z0-9-]{3,28}"
            if re.match(domain_pattern, domain_name):
                domain_name = domain_name.split("/")[-1]
            update_elasticsearch_domain_response = update_enforce_https(es_client, domain_name)['ResponseMetadata']
            enforce_https_status = verify_es_domain_enforce_https_status(es_client, domain_name)
            if enforce_https_status:
                return {
                    "output": {
                        "message": "Verification of EnforceHTTPS on Amazon Elasticsearch service domain is successful.",
                        "HTTPResponse": update_elasticsearch_domain_response,
                    }
                }
            raise Exception(
                "VERIFICATION OF ENFORCEHTTPS ON AMAZON ELASTICSEARCH SERVICE DOMAIN FAILED."
            )
    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: StringMap	2020-12-07T23:10:12.828000+01:00	YAML	Automation	1	AWSConfigRemediation-EnforceHttpsOnEsDomain	Active
