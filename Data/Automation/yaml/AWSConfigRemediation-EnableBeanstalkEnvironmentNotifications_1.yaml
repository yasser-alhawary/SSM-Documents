schemaVersion: "0.3"
description: |
  ### Document name - AWSConfigRemediation-EnableBeanstalkEnvironmentNotifications

  ## What does this document do?
  This runbook enables notifications on a given AWS Elastic Beanstalk environment using the [UpdateEnvironment](https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_UpdateEnvironment.html) API.

  ## Input Parameters
  * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
  * EnvironmentId: (Required) The ID of the Elastic Beanstalk environment that you want to enable notifications for.
  * TopicArn: (Required) The ARN of the Amazon Simple Notification Service (Amazon SNS) topic you want to send notifications to.

  ## Output Parameters
  * EnableNotifications.EnableNotificationsResponse: The standard HTTP response from the UpdateEnvironment API.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@/-]+$
  EnvironmentId:
    type: String
    description: (Required) The ID of the Elastic Beanstalk environment that you want to enable notifications for.
    allowedPattern: "^e-[a-z0-9]*$"
  TopicArn:
    type: String
    description: (Required) The ARN of the Amazon Simple Notification Service (Amazon SNS) topic you want to send notifications to.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:sns:([a-z]{2}-[a-z]+-\d{1}):\d{12}:[\w+.-]+$

outputs:
  - EnableNotifications.EnableNotificationsResponse
mainSteps:
  - name: EnableNotifications
    action: "aws:executeAwsApi"
    description: |
      ## EnableNotifications
      Enables notifications for the Elastic Beanstalk environment you specify in the EnvironmentId parameter.
      ## Outputs
      * EnableNotificationsResponse: The standard HTTP response from the UpdateEnvironment API.
    timeoutSeconds: 600
    isEnd: false
    inputs:
      Service: elasticbeanstalk
      Api: UpdateEnvironment
      EnvironmentId: "{{ EnvironmentId }}"
      OptionSettings:
        - Namespace: aws:elasticbeanstalk:sns:topics
          OptionName: "Notification Topic ARN"
          Value: "{{ TopicArn }}"
    outputs:
      - Name: EnableNotificationsResponse
        Selector: $
        Type: StringMap

  - name: WaitForEnvironmentAvailability
    action: aws:waitForAwsResourceProperty
    description: |
      ## WaitForEnvironmentAvailability
      Waits for the status of the environment to change to Ready.
    timeoutSeconds: 600
    isEnd: false
    inputs:
      Service: elasticbeanstalk
      Api: DescribeEnvironments
      EnvironmentIds:
        - "{{ EnvironmentId }}"
      PropertySelector: $.Environments[0].Status
      DesiredValues:
        - "Ready"

  - name: VerifyNotificationsEnabled
    action: "aws:executeScript"
    description: |
      ## VerifyNotificationsEnabled
      Verifies notifications have been enabled for the Elastic Beanstalk environment.
      ## Outputs
      * Output: The standard HTTP response from the DescribeEnvironments API.
    isEnd: true
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        EnvironmentId: "{{ EnvironmentId }}"
        TopicArn: "{{ TopicArn }}"
      Script: |-
        import boto3

        def is_notifications_enabled(elasticbeanstalk_client, environment_id, topic_arn):
          environment_list = elasticbeanstalk_client.describe_environments(
              EnvironmentIds=[environment_id]
          )
          environment_name = environment_list["Environments"][0]["EnvironmentName"]
          application_name = environment_list["Environments"][0]["ApplicationName"]

          describe_configuration_settings_response = (
              elasticbeanstalk_client.describe_configuration_settings(
                  ApplicationName=application_name, EnvironmentName=environment_name
              )
          )
          for option in describe_configuration_settings_response["ConfigurationSettings"][0]["OptionSettings"]:
              if (
                  option["Namespace"] == "aws:elasticbeanstalk:sns:topics"
                  and option["OptionName"] == "Notification Topic ARN"
                  and option["Value"] == topic_arn
              ):
                  return True
          return False

        def handler(event, context):
          elasticbeanstalk_client = boto3.client("elasticbeanstalk")
          environment_id = event["EnvironmentId"]
          topic_arn = event["TopicArn"]
          if is_notifications_enabled(elasticbeanstalk_client, environment_id, topic_arn):
              return {
                  "Message": "Verification of enable notifications for the AWS Elastic Beanstalk environment ID {} is successful.".format(environment_id)
              }
          raise Exception(
              "VERIFICATION FAILED. NOTIFICATIONS NOT ENABLED FOR AWS ELASTIC BEANSTALK ENVIRONMENT: {}.".format(environment_id)
          )
    outputs:
      - Name: Output
        Selector: $.Payload
        Type: StringMap	2021-04-22T17:05:58.864000+02:00	YAML	Automation	1	AWSConfigRemediation-EnableBeanstalkEnvironmentNotifications	Active
