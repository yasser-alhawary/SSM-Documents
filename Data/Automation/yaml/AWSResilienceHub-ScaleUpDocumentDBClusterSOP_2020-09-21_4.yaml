#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-ScaleUpDocumentDBClusterSOP_2020-09-21

            ## Intent
            Scale up Amazon Document DB cluster.

            ## Type
            SOP

            ## Risk
            High

            ## Requirements
              * A Document DB cluster in "available" state with at least one DB instance in "available" state.

            ## Permissions required for AutomationAssumeRole
              * rds:CreateDBInstance
              * rds:DescribeDBClusters
              * rds:DescribeDBInstances

            ## Cancellation behavior
            Fail

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above.

            ### (Required) DBClusterIdentifier
              * type: String
              * description: Amazon Document DB cluster identifier.

            ### (Required) NumberOfInstancesToCreate
            * type: Integer
            * description: The number of DB instances to create. Min: 1. Max: 5.

            ### (Optional) DBInstanceClass
              * type: String
              * description: The class of new DB instances.

            ## Details
            Note that each new instance will have identifier that consists of cluster identifier followed by dash and random alphanumeric string.

            ## Steps executed in normal flow
              * RecordStartTime
              * VerifyDBClusterAvailableStatusBeforeModification
              * ValidateInput
              * GetDBClusterEngine
              * GetCurrentDBInstanceClass
              * ScaleUpDocDbCLuster
              * WaitForInstancesAvailableStatus
              * OutputRecoveryTime

            ## Outputs
            ### OutputRecoveryTime.RecoveryTime
              * type: String
              * description: overall recovery time for scaling up Amazon Document DB cluster.

schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - OutputRecoveryTime.RecoveryTime

parameters:
  DBClusterIdentifier:
    type: String
    description: (Required) Amazon Document DB cluster identifier.
    allowedPattern: "[a-zA-Z0-9_.-]+"
  DBInstanceClass:
    type: String
    description: (Optional) The class of new DB instances.
    default: current
  NumberOfInstancesToCreate:
    type: Integer
    description: (Optional) The number of DB instances to create. Min 1. Max 5.
    default: 1
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
mainSteps:
  - name: RecordStartTime
    description: Start recording execution time
    action: "aws:executeScript"
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def start_time(events, context):
            return datetime.now(timezone.utc).isoformat()
        
        



  - name: VerifyDBClusterAvailableStatusBeforeModification
    description: On this step check, if the cluster is in "available" state.
    action: aws:assertAwsResourceProperty
    onFailure: Abort
    inputs:
      Service: docdb
      Api: DescribeDBClusters
      DBClusterIdentifier: '{{ DBClusterIdentifier }}'
      PropertySelector: "$.DBClusters[0].Status"
      DesiredValues:
        - "available"

  - name: ValidateInput
    description: On this step check, if the input parameter is valid.
    action: 'aws:executeScript'
    onFailure: Abort
    inputs:
      Runtime: python3.8
      Handler: verify_number_is_in_inclusive_range
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def check_required_params(required_params, events):
            """
            Check for required parameters in events. Allow empty, None or 0 values.
            """
            for key in required_params:
                if key not in events:
                    raise KeyError(f'Requires {key} in events')
        
        

        def verify_number_is_in_inclusive_range(events, context):
            """
            Check that NumberOfInstancesToCreate is within a defined range.
            The range is inclusive: [RangeMin, RangeMax]
            """
            required_params = ['NumberOfInstancesToCreate', 'RangeMin', 'RangeMax']
            check_required_params(required_params, events)
        
            try:
                number = int(events['NumberOfInstancesToCreate'])
                range_min = int(events['RangeMin'])
                range_max = int(events['RangeMax'])
            except Exception:
                raise ValueError("Input parameters should be integers")
            else:
                if range_min <= number <= range_max:
                    return True
                else:
                    raise AssertionError(
                        f"Number of desired instances should be within [{range_min}, {range_max}], but found {number}")
        
        

      InputPayload:
        NumberOfInstancesToCreate: '{{ NumberOfInstancesToCreate }}'
        RangeMin: 1
        RangeMax: 5

  - name: GetDBClusterEngine
    description: On this step retrieve Amazon Document DB cluster "Engine" value.
    action: 'aws:executeAwsApi'
    outputs:
      - Name: Engine
        Selector: $.DBClusters[0].Engine
        Type: String
    inputs:
      Service: docdb
      Api: DescribeDBClusters
      Filters:
        - Name: "db-cluster-id"
          Values:
            - '{{ DBClusterIdentifier }}'

  - name: GetCurrentDBInstanceClass
    description: >-
                On this step retrieve DB instance "InstanceClass" value.
                Either use provided input value or (if input value is "current") use current DB instance InstanceClass.
    action: 'aws:executeScript'
    outputs:
      - Name: DBInstanceClass
        Selector: $.Payload.DBInstanceClass
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_current_db_instance_class
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def check_required_params(required_params, events):
            """
            Check for required parameters in events.
            """
            for key in required_params:
                if not events.get(key):
                    raise KeyError(f'Requires {key} in events')
        
        

        def get_current_db_instance_class(events, context):
            """
            Determine the currently used instance class if not explicitly provided.
            """
            required_params = ['DBClusterIdentifier', 'DBInstanceClass']
            check_required_params(required_params, events)
        
            if events['DBInstanceClass'] != 'current':
                return {'DBInstanceClass': events['DBInstanceClass']}
        
            docdb = boto3.client('docdb')
            paginator = docdb.get_paginator('describe_db_instances')
            page_iterator = paginator.paginate(
                Filters=[{"Name": "db-cluster-id", "Values": [events['DBClusterIdentifier']]}]
            )
            filtered_iterator = page_iterator.search("sort_by(DBInstances, &to_string(InstanceCreateTime))[-1]")
            filtered_instances = list(filtered_iterator)
            if not filtered_instances:
                raise Exception(
                    f"No instances found for cluster {events['DBClusterIdentifier']}")
            else:
                return {'DBInstanceClass': filtered_instances[0]['DBInstanceClass']}
        
        

      InputPayload:
        DBInstanceClass: '{{ DBInstanceClass }}'
        DBClusterIdentifier: '{{ DBClusterIdentifier }}'

  - name: ScaleUpDocDbCLuster
    description: >-
                On this step create new instances with provided Engine, InstanceClass in the cluster.
                Each new instance will have identifier that consists of cluster identifier followed by dash and random alphanumeric string.
    action: 'aws:executeScript'
    outputs:
      - Name: DBNewInstancesIdentifiers
        Selector: $.Payload.DBInstancesIdentifiers
        Type: StringList
    inputs:
      Runtime: python3.8
      Handler: scale_up_cluster
      Script: |-
        import logging
        import random
        import time
        import uuid
        from concurrent.futures import ThreadPoolExecutor
        from datetime import datetime
        from operator import itemgetter
        from typing import List
        
        import boto3
        from botocore.config import Config
        
        RESTORED_CLUSTER_SUFFIX_FORMAT = '%m-%d-%Y-%H-%M-%S'
        
        if len(logging.getLogger().handlers) > 0:
            # The Lambda environment pre-configures a handler logging to stderr. If a handler is already configured,
            # `.basicConfig` does not execute. Thus we set the level directly.
            logging.getLogger().setLevel(logging.INFO)
        else:
            logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        

        def check_required_params(required_params, events):
            """
            Check for required parameters in events.
            """
            for key in required_params:
                if not events.get(key):
                    raise KeyError(f'Requires {key} in events')
        
        

        def create_new_instance_random_az(instance_params):
            """
            Create a new instance with provided Identifier, Engine and InstanceClass in specified cluster.
            List of parameters doesn't include AZ.
            """
            docdb = boto3.client('docdb')
            response = docdb.create_db_instance(
                DBInstanceIdentifier=instance_params['DBInstanceIdentifier'],
                DBInstanceClass=instance_params['DBInstanceClass'],
                Engine=instance_params['Engine'],
                DBClusterIdentifier=instance_params['DBClusterIdentifier']
            )
            return response['DBInstance']['DBInstanceIdentifier']
        
        

        def scale_up_cluster(events, context):
            """
            Add new instances to the cluster.
            The amount of instances to add == events['NumberOfInstancesToCreate'].
            """
            required_params = [
                'NumberOfInstancesToCreate',
                'DBClusterIdentifier',
                'DBInstanceClass',
                'DBClusterEngine'
            ]
            check_required_params(required_params, events)
        
            amount = int(events['NumberOfInstancesToCreate'])
            identifiers = []
            for _ in range(amount):
                rnd = str(uuid.uuid4()).split('-')[-1]
                identifier = f"{events['DBClusterIdentifier']}-{rnd}"
                new_event = {
                    'DBClusterIdentifier': events['DBClusterIdentifier'],
                    'DBInstanceIdentifier': identifier,
                    'DBInstanceClass': events['DBInstanceClass'],
                    'Engine': events['DBClusterEngine'],
                }
                create_new_instance_random_az(new_event)
                identifiers.append(identifier)
        
            return {'DBInstancesIdentifiers': identifiers}
        
        

      InputPayload:
        NumberOfInstancesToCreate: '{{ NumberOfInstancesToCreate }}'
        DBClusterIdentifier: '{{ DBClusterIdentifier }}'
        DBInstanceClass: '{{ GetCurrentDBInstanceClass.DBInstanceClass }}'
        DBClusterEngine: '{{ GetDBClusterEngine.Engine }}'

  - name: WaitForInstancesAvailableStatus
    description: On this step wait for instances provided in previous step are in "available" state.
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    onFailure: Abort
    inputs:
      Service: docdb
      Api: DescribeDBInstances
      Filters:
        - Name: "db-cluster-id"
          Values:
            - '{{ DBClusterIdentifier }}'
        - Name: "db-instance-id"
          Values:
            - '{{ ScaleUpDocDbCLuster.DBNewInstancesIdentifiers }}'
      PropertySelector: "$.DBInstances..DBInstanceStatus"
      DesiredValues:
          - "available"

  - name: OutputRecoveryTime
    description: Calculate execution time
    action: "aws:executeScript"
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: recovery_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def recovery_time(events, context):
            return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds
        
        

      InputPayload:
        StartTime: "{{ RecordStartTime.StartTime }}"
    isEnd: true

