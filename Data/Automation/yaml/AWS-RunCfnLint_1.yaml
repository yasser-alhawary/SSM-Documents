description: |
  ### Document name - AWS-RunCfnLint

  ## What does this document do?
  This document uses a [CloudFormation Linter](https://github.com/aws-cloudformation/cfn-python-lint) (cfn-python-lint) to validate YAML and JSON templates against the AWS CloudFormation resource specification. The AWS-RunCfnLint document performs additional checks, such as ensuring that valid values have been entered for resource properties. If validation is not successful, the RunCfnLintAgainstTemplate step fails and the linter tool's output is provided in an error message. This Document is using cfn-lint 0.24.4.

  ## Input Parameters
  * TemplateS3BucketName: (Required) The name of the Amazon S3 bucket that contains the CloudFormation template.
  * TemplateFileName: (Required) The name, or key, of the template file in the S3 bucket.
  * FormatFlag: (Optional) Value to pass to the --format parameter to specify the output format.
    * Allowed Values: Default | quiet | parseable | json
    * Default: Default
  * RegionsFlag: (Optional) Values to pass to the for --regions parameter to test the template against specified AWS Regions.
    * Example: us-east-1,us-west-1
  * IgnoreChecksFlag: (Optional) IDs of rules to pass to the --ignore-checks parameter. These rules are not checked.
    * Example: E1001,E1003,W7001
  * IncludeChecksFlag: (Optional) IDs of rules to pass to the --include-checks parameter. These rules are checked.
    * Example: E1001,E1003,W7001
  * ConfigureRuleFlag: (Optional) Configuration options for a rule to pass to the --configure-rule parameter.
    * Example: E2001:strict=false,E3012:strict=false
  * InfoFlag: (Optional) Option for the --info parameter. Include the option to enable additional logging information about the template processing.
    * Default: False
  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.

  ## Output parameters
  * RunCfnLintAgainstTemplate.output: The stdout from the cfn-python-lint tool.

schemaVersion: '0.3'
assumeRole: '{{AutomationAssumeRole}}'
parameters:
  TemplateS3BucketName:
    type: String
    description: (Required) The name of the Amazon S3 bucket that contains the CloudFormation template.
  TemplateFileName:
    type: String
    description: (Required) The name, or key, of the template file in the S3 bucket.
  FormatFlag:
    type: String
    description: (Optional) Value to pass to the --format parameter to specify the output format.
    default: Default
    allowedValues:
      - Default
      - quiet
      - parseable
      - json
  RegionsFlag:
    type: StringList
    description: (Optional) Values to pass to the for --regions parameter to test the template against specified AWS Regions. e.g. us-east-1,us-west-1
    default: []
  IgnoreChecksFlag:
    type: StringList
    description: (Optional) IDs of rules to pass to the --ignore-checks parameter. These rules are not checked. e.g. E1001,E1003,W7001
    default: []
  IncludeChecksFlag:
    type: StringList
    description: (Optional) IDs of rules to pass to the --include-checks parameter. These rules are checked. e.g. E1001,E1003,W7001
    default: []
  ConfigureRuleFlag:
    type: StringList
    description: (Optional) Configuration options for a rule to pass to the --configure-rule parameter. e.g. E2001:strict=false,E3012:strict=false
    default: []
  InfoFlag:
    type: Boolean
    description: (Optional) Option for the --info parameter. Include the option to enable additional logging information about the template processing.
    default: false
  AutomationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
outputs:
  - RunCfnLintAgainstTemplate.output
mainSteps:
- name: RunCfnLintAgainstTemplate
  action: aws:executeScript
  onFailure: Abort
  isCritical: true
  timeoutSeconds: 500
  description: |
    ## RunCfnLintAgainstTemplate
    Runs the cfn-python-lint tool against the provided CloudFormation template.
    ## Outputs
    * output: The stdout from the cfn-python-lint tool.
  inputs:
    Runtime: python3.8
    Handler: cfnlint_handler
    Attachment: cfnlint_attachment.zip
    InputPayload:
        s3Bucket: '{{TemplateS3BucketName}}'
        templateFileName: '{{TemplateFileName}}'
        FormatFlag: '{{FormatFlag}}'
        RegionsFlag: '{{RegionsFlag}}'
        IgnoreChecksFlag: '{{IgnoreChecksFlag}}'
        IncludeChecksFlag: '{{IncludeChecksFlag}}'
        ConfigureRuleFlag: '{{ConfigureRuleFlag}}'
        InfoFlag: '{{InfoFlag}}'
    Script: |
      import json
      import os
      import boto3
      import sys
      import subprocess

      def execute_command(command, shell=False):
        if not shell:
            cmd = command.split(" ")
        else:
            cmd = command
        p = subprocess.Popen(cmd, shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        return out.decode("utf-8"), err.decode("utf-8")

      def get_download_folder():
        return os.getcwd()

      def download_template(s3_bucket, s3_key):
        s3_path_head, file_name = os.path.split(s3_key)
        download_path = os.path.join("/tmp/",file_name)
        s3 = boto3.client('s3')
        s3.download_file(s3_bucket, s3_key, download_path)
        return download_path

      def get_flag_options(event):
        flags = ''
        if event['FormatFlag'] != 'Default':
          flags += ' -f ' + event['FormatFlag']
        if event['RegionsFlag']:
          flags += ' -r ' + ','.join(event['RegionsFlag'])
        if event['IgnoreChecksFlag']:
          flags += ' -i ' + ','.join(event['IgnoreChecksFlag'])
        if event['IncludeChecksFlag']:
          flags += ' -c ' + ','.join(event['IncludeChecksFlag'])
        if event['ConfigureRuleFlag']:
          flags += ' -x ' + ','.join(event['ConfigureRuleFlag'])
        if event['InfoFlag']:
          flags += ' -I'
        return flags

      def cfnlint_handler(event, context):
        s3_bucket = event['s3Bucket']
        s3_key = event['templateFileName']

        attachment_path = get_download_folder()
        cfn_lint_path = os.path.join(attachment_path, "bin/cfn-lint")

        template_path = download_template(s3_bucket, s3_key)

        cmd = "python3 " + cfn_lint_path + " -t " + template_path
        flags = get_flag_options(event)
        cmd += flags
        out, err = execute_command(cmd, False)
        if err != "":
          raise Exception('ERROR IN EXECUTION CFN-PYTHON-LINT', err)
        if len(out)<5:
          out = "VALID TEMPLATE"
        else:
          raise Exception('INVALID TEMPLATE', out)
        return {
          'output': json.dumps(out)
        }
  outputs:
    - Name: output
      Selector: $.Payload.output
      Type: String
files:
  cfnlint_attachment.zip:
    checksums:
      sha256: d7862f459f4b261c106c4af784d50ddb7a2b6340869b51f87e3a293943fe2106
    size: 13961311
	2022-06-22T19:11:05.870000+02:00	YAML	Automation	1	AWS-RunCfnLint	Active
ATTACHMENTSCONTENT	d7862f459f4b261c106c4af784d50ddb7a2b6340869b51f87e3a293943fe2106	Sha256	cfnlint_attachment.zip	13961311	https://aws-ssm-document-attachments-us-east-1.s3.us-east-1.amazonaws.com/b8e/458218037161/Automation/AWS-RunCfnLint%21c8398647-7553-4b74-949a-a3de405d2a74/2/cfnlint_attachment.zip?x-attachment-size=13961311&x-requester-accountId=341329434541&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIAD3Cb2FBY57%2F53%2FPpeqtyvR%2BGRv2JjPsB2rJDDYkia4AiAHswL3fjovkZD5uk1hodDheT8JySij4mo%2BrQs5MBkqhirSBAgvEAMaDDE4NzM0MDc2OTQ4NSIMWAd9qpXHnO1Fo7whKq8EzL1apV%2B33KszApbgVVZjL%2FfyAkJHtGiO7yszNmq%2BiMFFnhpwDf6nb9Twq%2F%2F2To5KoeISUcxBoe8PxE9fjATmqJ%2BrrJv%2FTwdjwFgUhzjmWNRJ8uPZAITFdFo1bZKsOMf2FVvWLnEmBmlJx47zYAU6em0AIPAB%2FHf3eclgidLkf%2BJunWKChpTYGnfHMcsW1vH0%2FPkI1NAZkm5WaiYiwsmXFCfz87seHGyZPg9qECWCVGDoMsfpKef%2FpCBDnBtb471MOfL0fjvxuqgHZV%2F9yHvQkobz7dRRLbHolhtx31qxSHubFT94SKjZ1Uxg9z1yb18KL7tle0wC7nj2WDG%2FSMAMB6w2VP30kQ%2FZfUe0thDTklEvFVA1%2FjqABLfo20A%2FEuA4HZ90ezICXeG28VGPNcdGJgKBQJc2L%2BOMUtyCa%2B04KTbeX3Hgpl409SEUrqtTHAEx8zcYHIyexo2xO%2B2wEnmkXqljLU%2FFvKLk%2Bu%2BACXvAtBWJjZXG23fJNKUaJfZPk2uGyLfbvMh36jgYMTeYdNjON%2BWpSe%2FGVLQbkCJwFBAttGJrtg4j3tOkZTS1UUdqGtLkjPVRUgNgcMBUiBhcGu2RU%2BWaG%2BqwgvGftqmgK1amOljOUPuz0oNjyoldUTBrAVONItigxmDgryGN24SWNb10u5Xpg%2B4pMcoKFAXuuTtSKZoJG0XV0rQszNyrQzP9QmQsdg1DS80%2F9lovA5e9X0DzHwHWQk%2FGs0YmaN7Gq%2Fx6QzCB0MmXBjqqAd1kzbH9kPXqFxb3JCNxcHzNYULhKlEW0wQaXqUX5c2Pbpse6A2hExTQ73x7oyb29KpurjujGek0CzKcTjDOaIPEIib5pNiYkpcVnpAv1i9iYIR4%2BjY5Px6rwu%2FGfzsSoHznDH1oT6VXDhz4V9RFdPhoJMVAxwYTPEKjI%2BBSil5xAO%2BeDGnDZtWnqYSjH4dP7JKkzXjvY8nLS2ETEUbxyRVQBqC89SmPdV%2Bp&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20220809T145952Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=ASIASXHTBJDGSA3JRI4A%2F20220809%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=12e310a98222fe8541148b8de299d8f6dd12c39685d9af4fa2400ab4d01225a0
