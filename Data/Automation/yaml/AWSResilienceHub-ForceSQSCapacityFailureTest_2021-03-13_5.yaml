#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-ForceSQSCapacityFailureTest_2021-03-13

            ## Intent
            Test SQS behaviour after sending a message close to maximum allowed size. Wait for alarm for metric SentMessageSize to trigger when message size is higher than threshold which should be slightly less than 256kb

            ## Type
            TEST

            ## Risk
            Medium

            ## Requirements:
              * SQS queue
              * Amazon CloudWatch alarm is setup for [SentMessageSize](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Should trigger when size of sent messages is above threshold, which should be slightly less than 256kb

            ## Permissions required for AutomationAssumeRole
              * cloudwatch:DescribeAlarms
              * sqs:SendMessage
              * sqs:ReceiveMessage
              * sqs:DeleteMessage
              * ssm:GetParameters
              * ssm:GetAutomationExecution
              * ssm:StartAutomationExecution
              * iam:PassRole

            ##### In case queues are encrypted with a KMS key
              * kms:GenerateDataKey
              * kms:Decrypt
              * kms:Encrypt

            ## Supports Rollback
            Yes. The document removes message which triggers the alarm

            ## Cancellation behavior
            The document removes message which triggers the alarm

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) QueueUrl
              * type: String
              * description: The URL of the SQS queue

            ### (Required) SentMessageSizeAlarmName
              * type: String
              * description: Amazon CloudWatch alarm for [SentMessageSize](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Should trigger when queue has messages higher than threshold that is slightly less than 256kb

            ### (Optional) IsRollback
              * type: String
              * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
              * default: false

            ### (Optional) PreviousExecutionId
              * type: String
              * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up

            ## Details
            The document injects failure by sending a message with a size above threshold of the specified alarm.
            In case of issues users should manually remove the message.

            ## Steps executed in normal flow
              * CheckIsRollback
              * GetBelowAlarmThreshold
              * SendCapacitySuccessMessage
              * AssertAlarmToBeGreenBeforeTest
              * GetAboveAlarmThreshold
              * SendCapacityFailureMessage
              * AssertAlarmToBeRed
              * RollbackCurrentExecution
              * RemoveSuccessMessage
              * RemoveFailureMessage
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * CheckIsRollback
              * GetInputsFromPreviousExecution
              * AssertInputsFromPreviousExecution
              * PrepareRemoveOfSuccessMessage
              * RemovePreviousExecutionSuccessMessage
              * PrepareRemoveOfFailureMessage
              * RemovePreviousExecutionFailureMessage

            ## Outputs
            None
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  QueueUrl:
    type: String
    description: (Required) The Url of the queue
  SentMessageSizeAlarmName:
    type: String
    description: (Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test.
  IsRollback:
    type: String
    description: (Optional) Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
    default: 'false'
  PreviousExecutionId:
    type: String
    description: (Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up
    default: ''

mainSteps:
  - name: CheckIsRollback
    description: Check if document should be executed in rollback mode
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default:
        GetBelowAlarmThreshold

  - name: GetInputsFromPreviousExecution
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: QueueUrl
        Selector: '$.Payload.QueueUrl[0]'
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_inputs_from_ssm_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events:
                raise KeyError('Requires ExecutionId')
        
            if not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            response_parameters = response['AutomationExecution']['Parameters']
            # TODO DIG-853
            for parameter in response_parameters:
                output[parameter] = response_parameters[parameter]
        
            return output
        
        


  - name: AssertInputsFromPreviousExecution
    description: Validate that rollback is executed with the same input
    action: aws:branch
    inputs:
      Choices:
        - NextStep: PrepareRemoveOfSuccessMessage
          Variable: '{{ GetInputsFromPreviousExecution.QueueUrl }}'
          StringEquals: '{{ QueueUrl }}'
    isEnd: true

  - name: PrepareRemoveOfSuccessMessage
    description: Get message id of the injected success message
    action: aws:executeScript
    outputs:
      - Name: MessageId
        Selector: $.Payload.MessageId[0]
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'SendCapacitySuccessMessage'
        ResponseField: 'MessageId'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def get_output_from_ssm_step_execution(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:
                raise KeyError('Requires ExecutionId, StepName and ResponseField in events')
        
            ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            for step in ssm_response['AutomationExecution']['StepExecutions']:
                if step['StepName'] == events['StepName']:
                    response_fields = events['ResponseField'].split(',')
                    output = {}
                    for response_field in response_fields:
                        if response_field in step['Outputs']:
                            # Sets values in string type regardless of what is the original value type. In order to set
                            # values with original types please use 'get_typed_output_from_ssm_step_execution'.
                            output[response_field] = step['Outputs'][response_field]
                        else:
                            """
                            By default SSM ignores empty values when encodes API outputs to JSON. It may result in
                            a situation when an empty value is a valid value but step output completely misses it.
                            Usually happens with SQS queue policies, default policy is returned by API as an empty value
                            and executeApi step output ignores it. As a result, further steps in rollback execution will fail.
                            Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string
                            represents a default sqs policy
                            """
                            output[response_field] = ['']
                    return output
        
            # Could not find step name
            raise Exception('Can not find step name % in ssm execution response', events['StepName'])
        
        


  - name: RemovePreviousExecutionSuccessMessage
    description: Delete injected success message
    action: aws:executeScript
    inputs:
      Runtime: python3.8
      Handler: delete_message_by_id
      InputPayload:
        QueueUrl: '{{QueueUrl}}'
        MessageId: '{{PrepareRemoveOfSuccessMessage.MessageId}}'
        TimeOut: '300'
      Script: |-
        import json
        import logging
        import time
        import uuid
        import boto3
        import random
        from datetime import datetime
        from typing import List, Callable, Optional
        from botocore.exceptions import ClientError
        from botocore.config import Config
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def get_message_receipt_handle(queue_url: str, message_id: str, timeout: int):
            """
            Loop through all messages on SQS queue, find message by ID and return its ReceiptHandle
            :param queue_url The URL of the queue
            :param message_id The message ID
            :param timeout Max time to wait until message found
            :return ReceiptHandle of the message
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            start = datetime.now()
        
            while True:
                response = sqs_client.receive_message(
                    QueueUrl=queue_url,
                    MaxNumberOfMessages=10
                )
        
                if 'Messages' in response and len(response['Messages']):
                    for message in response['Messages']:
                        if message['MessageId'] == message_id:
                            return message['ReceiptHandle']
        
                if (datetime.now() - start).total_seconds() > timeout:
                    raise Exception(f'Message {message_id} not found before timeout')
        
        

        def delete_message_by_id(event, context):
            """
            Delete message by its ID
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            queue_url = event['QueueUrl']
            message_id = event['MessageId']
            timeout = int(event.get('TimeOut', 100))
            receipt_handle = get_message_receipt_handle(queue_url, message_id, timeout)
            response = sqs_client.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)
            return response
        
        


  - name: PrepareRemoveOfFailureMessage
    description: Get message id of the injected failure message
    action: aws:executeScript
    outputs:
      - Name: MessageId
        Selector: $.Payload.MessageId[0]
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'SendCapacityFailureMessage'
        ResponseField: 'MessageId'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        

        def get_output_from_ssm_step_execution(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:
                raise KeyError('Requires ExecutionId, StepName and ResponseField in events')
        
            ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            for step in ssm_response['AutomationExecution']['StepExecutions']:
                if step['StepName'] == events['StepName']:
                    response_fields = events['ResponseField'].split(',')
                    output = {}
                    for response_field in response_fields:
                        if response_field in step['Outputs']:
                            # Sets values in string type regardless of what is the original value type. In order to set
                            # values with original types please use 'get_typed_output_from_ssm_step_execution'.
                            output[response_field] = step['Outputs'][response_field]
                        else:
                            """
                            By default SSM ignores empty values when encodes API outputs to JSON. It may result in
                            a situation when an empty value is a valid value but step output completely misses it.
                            Usually happens with SQS queue policies, default policy is returned by API as an empty value
                            and executeApi step output ignores it. As a result, further steps in rollback execution will fail.
                            Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string
                            represents a default sqs policy
                            """
                            output[response_field] = ['']
                    return output
        
            # Could not find step name
            raise Exception('Can not find step name % in ssm execution response', events['StepName'])
        
        


  - name: RemovePreviousExecutionFailureMessage
    description: Delete injected message
    action: aws:executeScript
    inputs:
      Runtime: python3.8
      Handler: delete_message_by_id
      InputPayload:
        QueueUrl: '{{QueueUrl}}'
        MessageId: '{{PrepareRemoveOfFailureMessage.MessageId}}'
        TimeOut: '300'
      Script: |-
        import json
        import logging
        import time
        import uuid
        import boto3
        import random
        from datetime import datetime
        from typing import List, Callable, Optional
        from botocore.exceptions import ClientError
        from botocore.config import Config
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def get_message_receipt_handle(queue_url: str, message_id: str, timeout: int):
            """
            Loop through all messages on SQS queue, find message by ID and return its ReceiptHandle
            :param queue_url The URL of the queue
            :param message_id The message ID
            :param timeout Max time to wait until message found
            :return ReceiptHandle of the message
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            start = datetime.now()
        
            while True:
                response = sqs_client.receive_message(
                    QueueUrl=queue_url,
                    MaxNumberOfMessages=10
                )
        
                if 'Messages' in response and len(response['Messages']):
                    for message in response['Messages']:
                        if message['MessageId'] == message_id:
                            return message['ReceiptHandle']
        
                if (datetime.now() - start).total_seconds() > timeout:
                    raise Exception(f'Message {message_id} not found before timeout')
        
        

        def delete_message_by_id(event, context):
            """
            Delete message by its ID
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            queue_url = event['QueueUrl']
            message_id = event['MessageId']
            timeout = int(event.get('TimeOut', 100))
            receipt_handle = get_message_receipt_handle(queue_url, message_id, timeout)
            response = sqs_client.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)
            return response
        
        

    isEnd: true

  - name: GetBelowAlarmThreshold
    description: Get the provided alarm's threshold that to set message size below the threshold
    action: aws:executeScript
    outputs:
      - Name: SizeBelowThreshold
        Selector: $.Payload.ValueBelowThreshold
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: get_metric_alarm_threshold_values
      InputPayload:
        AlarmName: '{{SentMessageSizeAlarmName}}'
      Script: |-
        import boto3
        import logging
        import time
        from botocore.config import Config
        from datetime import datetime, timedelta
        from typing import Any, Callable, Iterator, List
        
        boto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
        
        PUT_METRIC_ALARM_PARAMS = ['AlarmName', 'AlarmDescription', 'ActionsEnabled', 'OKActions',
                                   'AlarmActions', 'InsufficientDataActions', 'MetricName', 'Namespace', 'Statistic',
                                   'ExtendedStatistic',
                                   'Dimensions', 'Period', 'Unit', 'EvaluationPeriods', 'DatapointsToAlarm',
                                   'Threshold', 'ComparisonOperator', 'TreatMissingData', 'EvaluateLowSampleCountPercentile',
                                   'Metrics', 'Tags', 'ThresholdMetricId']
        
        

        def get_metric_alarm_threshold_values(event, context):
            """
            Get alarm threshold and return values above and below
            """
            alarm_name = event['AlarmName']
            cw = boto3.client('cloudwatch', config=boto3_config)
            response = cw.describe_alarms(
                AlarmNames=[alarm_name],
                AlarmTypes=['MetricAlarm']
            )
            metric_alarms = response.get('MetricAlarms')
            if not metric_alarms:
                raise Exception("MetricAlarm [{}] does not exist.".format(alarm_name))
            threshold = metric_alarms[0]['Threshold']
            if threshold == 0:
                raise Exception("MetricAlarm [{}] has no threshold set.".format(alarm_name))
        
            value_above_threshold = threshold + 1
            value_below_threshold = threshold - 1
        
            return {
                'Threshold': int(threshold),
                'ValueAboveThreshold': int(value_above_threshold),
                'ValueBelowThreshold': int(value_below_threshold)
            }


  - name: SendCapacitySuccessMessage
    description: Send message to queue with a payload size than the provided alarm's threshold
    action: aws:executeScript
    onFailure: 'step:RollbackCurrentExecution'
    onCancel: 'step:TriggerRollback'
    outputs:
      - Name: MessageId
        Selector: $.Payload.MessageId
        Type: String
    inputs:
      Runtime: python3.8
      Handler: send_message_of_size
      InputPayload:
        QueueUrl: '{{QueueUrl}}'
        MessageSize: '{{GetBelowAlarmThreshold.SizeBelowThreshold}}'
        MessageDeduplicationId: '{{global:DATE_TIME}}'
      Script: |-
        import json
        import logging
        import time
        import uuid
        import boto3
        import random
        from datetime import datetime
        from typing import List, Callable, Optional
        from botocore.exceptions import ClientError
        from botocore.config import Config
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def send_message_of_size(events, context):
            """
            Sends a message of given size in bytes. Character u'a' is equal to one byte
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            queue_url = events['QueueUrl']
            message_size = events['MessageSize']
            message_body = 'a' * message_size
        
            is_fifo = queue_url[-5:] == '.fifo'
            if is_fifo:
                message_deduplication_id = events['MessageDeduplicationId']
                message_group_id = 'awsresiliencehub-capacity-failure-test'
                response = sqs_client.send_message(
                    QueueUrl=queue_url,
                    MessageBody=message_body,
                    MessageGroupId=message_group_id,
                    MessageDeduplicationId=message_deduplication_id
                )
            else:
                response = sqs_client.send_message(
                    QueueUrl=queue_url,
                    MessageBody=message_body
                )
            return response
        
        



  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SentMessageSizeAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]

  - name: GetAboveAlarmThreshold
    description: Get the provided alarm's threshold that to set message size higher than the threshold
    action: aws:executeScript
    outputs:
      - Name: SizeAboveThreshold
        Selector: $.Payload.ValueAboveThreshold
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: get_metric_alarm_threshold_values
      InputPayload:
        AlarmName: '{{SentMessageSizeAlarmName}}'
      Script: |-
        import boto3
        import logging
        import time
        from botocore.config import Config
        from datetime import datetime, timedelta
        from typing import Any, Callable, Iterator, List
        
        boto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
        
        PUT_METRIC_ALARM_PARAMS = ['AlarmName', 'AlarmDescription', 'ActionsEnabled', 'OKActions',
                                   'AlarmActions', 'InsufficientDataActions', 'MetricName', 'Namespace', 'Statistic',
                                   'ExtendedStatistic',
                                   'Dimensions', 'Period', 'Unit', 'EvaluationPeriods', 'DatapointsToAlarm',
                                   'Threshold', 'ComparisonOperator', 'TreatMissingData', 'EvaluateLowSampleCountPercentile',
                                   'Metrics', 'Tags', 'ThresholdMetricId']
        
        

        def get_metric_alarm_threshold_values(event, context):
            """
            Get alarm threshold and return values above and below
            """
            alarm_name = event['AlarmName']
            cw = boto3.client('cloudwatch', config=boto3_config)
            response = cw.describe_alarms(
                AlarmNames=[alarm_name],
                AlarmTypes=['MetricAlarm']
            )
            metric_alarms = response.get('MetricAlarms')
            if not metric_alarms:
                raise Exception("MetricAlarm [{}] does not exist.".format(alarm_name))
            threshold = metric_alarms[0]['Threshold']
            if threshold == 0:
                raise Exception("MetricAlarm [{}] has no threshold set.".format(alarm_name))
        
            value_above_threshold = threshold + 1
            value_below_threshold = threshold - 1
        
            return {
                'Threshold': int(threshold),
                'ValueAboveThreshold': int(value_above_threshold),
                'ValueBelowThreshold': int(value_below_threshold)
            }


  - name: SendCapacityFailureMessage
    description: Send message to queue with a payload size bigger than the provided alarm's threshold
    action: aws:executeScript
    onFailure: 'step:RollbackCurrentExecution'
    onCancel: 'step:TriggerRollback'
    outputs:
      - Name: MessageId
        Selector: $.Payload.MessageId
        Type: String
    inputs:
      Runtime: python3.8
      Handler: send_message_of_size
      InputPayload:
        QueueUrl: '{{QueueUrl}}'
        MessageSize: '{{GetAboveAlarmThreshold.SizeAboveThreshold}}'
        MessageDeduplicationId: '{{global:DATE_TIME}}'
      Script: |-
        import json
        import logging
        import time
        import uuid
        import boto3
        import random
        from datetime import datetime
        from typing import List, Callable, Optional
        from botocore.exceptions import ClientError
        from botocore.config import Config
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def send_message_of_size(events, context):
            """
            Sends a message of given size in bytes. Character u'a' is equal to one byte
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            queue_url = events['QueueUrl']
            message_size = events['MessageSize']
            message_body = 'a' * message_size
        
            is_fifo = queue_url[-5:] == '.fifo'
            if is_fifo:
                message_deduplication_id = events['MessageDeduplicationId']
                message_group_id = 'awsresiliencehub-capacity-failure-test'
                response = sqs_client.send_message(
                    QueueUrl=queue_url,
                    MessageBody=message_body,
                    MessageGroupId=message_group_id,
                    MessageDeduplicationId=message_deduplication_id
                )
            else:
                response = sqs_client.send_message(
                    QueueUrl=queue_url,
                    MessageBody=message_body
                )
            return response
        
        


  - name: AssertAlarmToBeRed
    description: Wait for expected alarm to be red after failure is injected
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    onFailure: 'step:RollbackCurrentExecution'
    onCancel: 'step:TriggerRollback'
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SentMessageSizeAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]

  - name: RollbackCurrentExecution
    description: Revert queue policy to initial state
    action: aws:sleep
    inputs:
      Duration: PT01S
    onCancel: 'step:TriggerRollback'

  - name: RemoveSuccessMessage
    description: Delete injected success message
    action: aws:executeScript
    onCancel: 'step:TriggerRollback'
    inputs:
      Runtime: python3.8
      Handler: delete_message_by_id
      InputPayload:
        QueueUrl: '{{QueueUrl}}'
        MessageId: '{{SendCapacitySuccessMessage.MessageId}}'
        TimeOut: '300'
      Script: |-
        import json
        import logging
        import time
        import uuid
        import boto3
        import random
        from datetime import datetime
        from typing import List, Callable, Optional
        from botocore.exceptions import ClientError
        from botocore.config import Config
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def get_message_receipt_handle(queue_url: str, message_id: str, timeout: int):
            """
            Loop through all messages on SQS queue, find message by ID and return its ReceiptHandle
            :param queue_url The URL of the queue
            :param message_id The message ID
            :param timeout Max time to wait until message found
            :return ReceiptHandle of the message
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            start = datetime.now()
        
            while True:
                response = sqs_client.receive_message(
                    QueueUrl=queue_url,
                    MaxNumberOfMessages=10
                )
        
                if 'Messages' in response and len(response['Messages']):
                    for message in response['Messages']:
                        if message['MessageId'] == message_id:
                            return message['ReceiptHandle']
        
                if (datetime.now() - start).total_seconds() > timeout:
                    raise Exception(f'Message {message_id} not found before timeout')
        
        

        def delete_message_by_id(event, context):
            """
            Delete message by its ID
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            queue_url = event['QueueUrl']
            message_id = event['MessageId']
            timeout = int(event.get('TimeOut', 100))
            receipt_handle = get_message_receipt_handle(queue_url, message_id, timeout)
            response = sqs_client.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)
            return response
        
        


  - name: RemoveFailureMessage
    description: Delete injected failure message
    action: aws:executeScript
    onCancel: 'step:TriggerRollback'
    inputs:
      Runtime: python3.8
      Handler: delete_message_by_id
      InputPayload:
        QueueUrl: '{{QueueUrl}}'
        MessageId: '{{SendCapacityFailureMessage.MessageId}}'
        TimeOut: '300'
      Script: |-
        import json
        import logging
        import time
        import uuid
        import boto3
        import random
        from datetime import datetime
        from typing import List, Callable, Optional
        from botocore.exceptions import ClientError
        from botocore.config import Config
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def get_message_receipt_handle(queue_url: str, message_id: str, timeout: int):
            """
            Loop through all messages on SQS queue, find message by ID and return its ReceiptHandle
            :param queue_url The URL of the queue
            :param message_id The message ID
            :param timeout Max time to wait until message found
            :return ReceiptHandle of the message
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            start = datetime.now()
        
            while True:
                response = sqs_client.receive_message(
                    QueueUrl=queue_url,
                    MaxNumberOfMessages=10
                )
        
                if 'Messages' in response and len(response['Messages']):
                    for message in response['Messages']:
                        if message['MessageId'] == message_id:
                            return message['ReceiptHandle']
        
                if (datetime.now() - start).total_seconds() > timeout:
                    raise Exception(f'Message {message_id} not found before timeout')
        
        

        def delete_message_by_id(event, context):
            """
            Delete message by its ID
            """
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            queue_url = event['QueueUrl']
            message_id = event['MessageId']
            timeout = int(event.get('TimeOut', 100))
            receipt_handle = get_message_receipt_handle(queue_url, message_id, timeout)
            response = sqs_client.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)
            return response
        
        


  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SentMessageSizeAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK",  "INSUFFICIENT_DATA" ]
    isEnd: true
  - name: TriggerRollback
    description: This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def start_rollback_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
        
            # Get parameters for current execution and add IsRollback and PreviousExecutionId
            response_parameters = response['AutomationExecution']['Parameters']
            response_parameters['IsRollback'] = ['true']
            response_parameters['PreviousExecutionId'] = [events['ExecutionId']]
        
            rollback_execution_response = ssm.start_automation_execution(
                DocumentName=response['AutomationExecution']['DocumentName'],
                DocumentVersion=response['AutomationExecution']['DocumentVersion'],
                Parameters=response_parameters
            )
            output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']
            return output
        
        

    isEnd: true

