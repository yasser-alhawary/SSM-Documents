schemaVersion: "0.3"
description: |
   ### Document Name - AWSConfigRemediation-DeleteUnusedIAMPolicy

   ## What does this document do?
   This runbook deletes an AWS Identity and Access Management (IAM) policy that is not attached to any IAM users, groups, or roles using the [DeletePolicy](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeletePolicy.html) and [DeletePolicyVersion](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeletePolicyVersion.html) APIs.

   ## Input Parameters
   * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
   * IAMResourceId: (Required) The resource identifier of the IAM policy that you want to delete.

   ## Output Parameters
   * DeleteUnusedIAMPolicy.Output - Success message and HTTP response metadata or failure exception.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+$
  IAMResourceId:
    type: String
    description: (Required) IAM resource unique identifier for the IAM Policy.
    allowedPattern: ^[\w+=,.@_-]{1,128}$
outputs:
  - DeleteUnusedIAMPolicyAndVerify.Output
mainSteps:
  - name: DeleteUnusedIAMPolicyAndVerify
    action: aws:executeScript
    timeoutSeconds: 600
    isEnd: true
    description: |
      ## DeleteUnusedIAMPolicyAndVerify
      Deletes the policy you specify in the IAMResourceId parameter, and verifies the policy was deleted.
      ## Outputs
      * Output: Success message and HTTP response metadata or failure exception.
    inputs:
      Runtime: python3.6
      Handler: delete_policy_handler
      InputPayload:
        IAMResourceId: "{{ IAMResourceId }}"
      Script: |-
        import boto3


        iam_client = boto3.client("iam")
        config_client = boto3.client("config")


        def is_policy_deleted(policy_arn):
          try:
            iam_client.get_policy(PolicyArn=policy_arn)
            error_message = "VERIFICATION FAILED. IAM POLICY {} NOT DELETED".format(policy_arn)
            raise Exception(error_message)
          except iam_client.exceptions.NoSuchEntityException:
            return True
          return False

        def get_policy_arn(resource_id):
          response = config_client.get_resource_config_history(
            resourceType='AWS::IAM::Policy',
            resourceId=resource_id
          )
          resource_name = response.get("configurationItems")[0].get("arn")
          return resource_name

        def delete_policy_handler(event, context):
          iam_resource_id = event.get("IAMResourceId")
          policy_arn = get_policy_arn(iam_resource_id)
          
          policy_usage = iam_client.list_entities_for_policy(
            PolicyArn=policy_arn
          )
          if policy_usage.get("PolicyGroups") or policy_usage.get("PolicyUsers") or policy_usage.get("PolicyRoles"):
            error_message = "IAM POLICY {} STILL IN USE. CANNOT DELETE A POLICY ATTACHED TO ENTITIES.".format(policy_arn)
            raise Exception(error_message)
          policy_versions = iam_client.list_policy_versions(
            PolicyArn=policy_arn
          )
          for policy_version in policy_versions.get("Versions"):
            if not policy_version.get("IsDefaultVersion"):
              iam_client.delete_policy_version(PolicyArn=policy_arn,VersionId=policy_version.get("VersionId"))
          response = iam_client.delete_policy(PolicyArn=policy_arn)
          if not is_policy_deleted(policy_arn):
            raise Exception(f"VERIFICATION FAILED. IAM POLICY {policy_arn} NOT DELETED.")
          return {
            "output": "IAM Policy deleted successfully.",
            "http_response": response
          }
    outputs:
      - Name: Output
        Selector: $.Payload
        Type: StringMap
