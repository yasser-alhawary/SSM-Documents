#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Scale up an ec2 to the successor instance type"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - OutputRecoveryTime.RecoveryTime
  - CalculateTargetType.TargetInstanceType

parameters:
  EC2InstanceIdentifier:
    type: String
    allowedPattern: "^i-[a-z0-9]{8,17}$"
    description: (Required) EC2InstanceIdentifier
  EC2InstanceTargetInstanceType:
    type: String
    description: (Optional) EC2InstanceTargetInstanceType
    default: ''
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
mainSteps:
  - name: RecordStartTime
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def start_time(events, context):
            return datetime.now(timezone.utc).isoformat()
        
        


  - name: AssertInstanceInAvailableState
    action: aws:assertAwsResourceProperty
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstanceStatus
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
      IncludeAllInstances: true
      PropertySelector: "$.InstanceStatuses..InstanceState.Name"
      DesiredValues:
        - "running"
        - "stopped"
  - name: DescribeEC2Instance
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstances
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
    outputs:
      - Selector: $.Reservations[0].Instances[0].InstanceType
        Name: InstanceType
        Type: String
  - name: CalculateTargetType
    description: Calculates the target instance type
    action: 'aws:executeScript'
    outputs:
      - Name: OriginalInstanceType
        Selector: $.Payload.OriginalInstanceType
        Type: String
      - Name: TargetInstanceType
        Selector: $.Payload.TargetInstanceType
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_bigger_instance
      Script: |
        import boto3
        from botocore.config import Config
        
        

        def get_bigger_instance(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ec2 = boto3.client('ec2', config=config)
            requested_instance_type = events["RequestInstanceType"] or ""
            if requested_instance_type:
                instance_types_response = ec2.describe_instance_type_offerings(
                    Filters=[{'Name': 'instance-type', "Values": [requested_instance_type]}])
                if instance_types_response:
                    return {**{'TargetInstanceType': requested_instance_type}}
                else:
                    raise Exception("Requested instance type is not valid: " + requested_instance_type)
        
            current_instance_type = events["CurrentInstanceType"]
            instance_type_size = current_instance_type.rsplit(".", 1)
            instance_sizes = ["nano", "micro", "small", "medium", "large", "xlarge", "2xlarge", "3xlarge", "4xlarge",
                              "6xlarge", "8xlarge", "9xlarge", "10xlarge", "12xlarge", "16xlarge", "18xlarge", "24xlarge",
                              "32xlarge", "56xlarge", "112xlarge"]
            bigger_size_start_idx = instance_sizes.index(instance_type_size[1]) + 1
            possible_instance_types = []
            for i in range(len(instance_sizes) - bigger_size_start_idx):
                possible_instance_types.append(instance_type_size[0] + "." + instance_sizes[bigger_size_start_idx + i])
            instance_types_response = ec2.describe_instance_type_offerings(
                MaxResults=1000,
                Filters=[{'Name': 'instance-type', "Values": [instance_type_size[0] + ".*"]}])
            all_instance_types = [offering['InstanceType'] for offering in instance_types_response['InstanceTypeOfferings']]
            bigger_instances = [candidate for candidate in possible_instance_types if candidate in all_instance_types]
            if bigger_instances:
                return {**{'OriginalInstanceType': current_instance_type}, **{'TargetInstanceType': bigger_instances[0]}}
            else:
                raise Exception("Could not identify bigger instance type than current instance type: " + current_instance_type)

      InputPayload:
        RequestInstanceType: '{{ EC2InstanceTargetInstanceType }}'
        CurrentInstanceType: '{{ DescribeEC2Instance.InstanceType }}'
  - name: StopEC2Instance
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: StopInstances
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
  - name: ValidateInstanceIsStopped
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 900
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstanceStatus
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
      IncludeAllInstances: true
      PropertySelector: "$.InstanceStatuses..InstanceState.Name"
      DesiredValues:
        - "stopped"
  - name: ModifyInstanceAttribute
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: ModifyInstanceAttribute
      InstanceId: "{{ EC2InstanceIdentifier }}"
      InstanceType:
        Value: "{{ CalculateTargetType.TargetInstanceType }}"
    outputs:
      - Selector: $.InstanceType
        Name: InstanceType
        Type: String
  - name: StartEC2Instance
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: StartInstances
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
  - name: ValidateInstanceIsAvailable
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 900
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstanceStatus
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
      PropertySelector: "$.InstanceStatuses..InstanceState.Name"
      DesiredValues:
        - "running"
  - name: AssertInstanceType
    action: aws:assertAwsResourceProperty
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstances
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
      PropertySelector: "$.Reservations[0].Instances[0].InstanceType"
      DesiredValues:
        - "{{ CalculateTargetType.TargetInstanceType }}"
  - name: OutputRecoveryTime
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: recovery_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def recovery_time(events, context):
            return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds
        
        

      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'

