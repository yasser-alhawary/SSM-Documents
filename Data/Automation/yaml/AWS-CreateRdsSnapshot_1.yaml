#
# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
description: Creates an RDS Snapshot for an RDS instance. This automation does not support encrypted snapshots.
schemaVersion: '0.3'
assumeRole: "{{AutomationAssumeRole}}"
parameters:
  DBInstanceIdentifier:
    type: String
    description: (Required) The DBInstanceId ID of the RDS Instance to create Snapshot from.
  DBSnapshotIdentifier:
    type: String
    description: (Optional) The DBSnapshotIdentifier ID of the RDS snapshot to create.
    default: ''
  InstanceTags:
    type: String
    default: ''
    description: (Optional) Tags to create for instance.
  SnapshotTags:
    type: String
    default: ''
    description: (Optional) Tags to create for snapshot.
  AutomationAssumeRole:
    type: String
    default: ''
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
mainSteps:
  - name: createRDSSnapshot
    action: aws:executeScript
    description: Creates the RDS snapshot and returns the snapshot ID.
    outputs:
      - Name: SnapshotId
        Selector: $.Payload.snapshot_id
        Type: String
    inputs:
      Runtime: python3.8
      Handler: handler
      InputPayload:
        DBInstanceIdentifier: '{{DBInstanceIdentifier}}'
        DBSnapshotIdentifier: '{{DBSnapshotIdentifier}}'
        InstanceTags: '{{InstanceTags}}'
        SnapshotTags: '{{SnapshotTags}}'
      Script: |-
        import json
        import re
        from datetime import datetime
        import boto3

        DB_INSTANCE_ID = "DBInstanceIdentifier"
        INSTANCE_TAGS = "InstanceTags"
        SNAPSHOT_ARN = "DBSnapshotArn"
        SNAPSHOT_ID = "DBSnapshotIdentifier"
        SNAPSHOT_TAGS = "SnapshotTags"

        PH_DATE = "date"
        PH_DATETIME = "datetime"
        PH_EXECUTION_ID = "execution-id"
        PH_INSTANCE_ID = "db-instance-id"
        PH_SNAPSHOT_ID = "db-snapshot-id"
        PH_TIME = "time"

        PH_TAG_VAL_STR = "{{{}}}"
        TAG_SHORTCUT_EXPR = "Key=(.+),\s*Value=(.*)"


        def parse_tags(tags_str):
            if re.match("({};?)+".format(TAG_SHORTCUT_EXPR), tags_str):
                matches = [re.match(TAG_SHORTCUT_EXPR, t.strip()) for t in tags_str.split(";")]
                return [{"Key": m.group(1), "Value": m.group(2) if m.lastindex > 1 else ""} for m in matches]
            else:
                return json.loads(tags_str)


        def build_tags(tag_str, context, tag_vars=None):
            if tag_str == "":
                return []

            placeholders = tag_data(ctx=context, tag_vars=tag_vars)
            tags = parse_tags(tag_str)

            for tag in tags:
                value = tag.get("Value")
                for p in placeholders:
                    value = value.replace(PH_TAG_VAL_STR.format(p), str(placeholders[p]))
                tag["Value"] = value
            return tags


        def template_string(s, context, str_vars=None):
            result = s
            data = tag_data(ctx=context, tag_vars=str_vars)
            for p in data:
                result = result.replace(PH_TAG_VAL_STR.format(p), str(data[p]))
            return result


        def tag_data(ctx, tag_vars):
            def clean(s):
                return s.replace(":", "").replace("-", "").replace("T", "")

            dt = datetime.now().replace(microsecond=0)
            data = {
                PH_DATETIME: clean(dt.isoformat()),
                PH_DATE: clean(dt.date().isoformat()),
                PH_TIME: clean(dt.time().isoformat()),
                PH_EXECUTION_ID: ctx.get('automation:EXECUTION_ID')
            }

            if tag_vars is not None:
                for t in tag_vars:
                    data[t] = tag_vars[t]

            return data


        def handler(event, context):
            client = boto3.client('rds')

            inst_id = event[DB_INSTANCE_ID]
            snapshot_str = event.get(SNAPSHOT_ID, "").strip()
            if snapshot_str == "":
                snapshot_str = "{db-instance-id}-{datetime}"

            tag_vars = {
                PH_INSTANCE_ID: inst_id,
                SNAPSHOT_ID: ""
            }

            # snapshot name
            snapshot_id = template_string(snapshot_str, context, tag_vars)

            args = {
                DB_INSTANCE_ID: inst_id,
                SNAPSHOT_ID: snapshot_id
            }

            response = client.create_db_snapshot(**args)

            snapshot_arn = response["DBSnapshot"]["DBSnapshotArn"]

            # snapshot tags
            snapshot_tag_str = event.get(SNAPSHOT_TAGS, "")
            if len(snapshot_tag_str) > 0:
                snapshot_tags = build_tags(snapshot_tag_str, context, tag_vars)
                if len(snapshot_tags) > 0:
                    client.add_tags_to_resource(ResourceName=snapshot_arn, Tags=snapshot_tags)

            # instance tags
            instance_tag_str = event.get(INSTANCE_TAGS, "")
            if len(instance_tag_str) > 0:
                tag_vars[PH_SNAPSHOT_ID] = snapshot_id
                instance_tags = build_tags(instance_tag_str, context, tag_vars)
                if len(instance_tags) > 0:
                    db_arn = ":".join(snapshot_arn.split(":")[0:5]) + ":db:" + inst_id
                    client.add_tags_to_resource(ResourceName=db_arn, Tags=instance_tags)

            return {'snapshot_id' : snapshot_id}
  - name: verifyRDSSnapshot
    action: 'aws:executeScript'
    description: Checks that the snapshot created in the previous step exists.
    isEnd: true
    timeoutSeconds: 500
    inputs:
      Runtime: python3.8
      Handler: handler
      InputPayload:
        DBSnapshotId: '{{createRDSSnapshot.SnapshotId}}'
      Script: |-
        import boto3
        import time

        def handler(event, context):
            rds_client = boto3.client('rds')
            snapshot_id = event["DBSnapshotId"]

            while True:
                try:
                    snapshots = rds_client.describe_db_snapshots(DBSnapshotIdentifier=snapshot_id).get("DBSnapshots", [{}])
                    if snapshots[0].get("Status", "") == "available":
                        return
                    time.sleep(6)

                except Exception as e:
                    raise e
outputs:
  - 'createRDSSnapshot.SnapshotId'
	2022-06-22T19:08:39.811000+02:00	YAML	Automation	1	AWS-CreateRdsSnapshot	Active
