#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-RestoreS3BucketFromBackupSOP_2020-09-21

            ## Intent
            Restore an S3 bucket from a backup bucket

            ## Type
            SOP

            ## Risk
            Small

            ## Requirements
              * Backup S3 bucket to restore files from it to the target bucket
              * Target S3 bucket

            ## Depends on
            AWSResilienceHub-CleanS3BucketUtil_2020-03-03

            ## Permissions required for AutomationAssumeRole
              * s3:PutObject
              * s3:GetObject
              * s3:ListBucket
              * s3:ListObjectVersions
              * s3:ListBucketVersions
              * s3:DeleteObject
              * s3:DeleteObject*
              * SNS:Publish
              * ssm:StartAutomationExecution
              * ssm:GetAutomationExecution
              * iam:PassRole

            ##### Permissions required in case KMS encryption is used
              * kms:GenerateDataKey
              * kms:Decrypt
              * kms:Encrypt

            ## Supports Rollback
            No

            ## Cancellation behavior
            Fail

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) S3BackupBucketName
              * type: String
              * description: The S3 backup bucket name to copy files from it to the S3 restore bucket

            ### (Required) S3BucketToRestoreName
              * type: String
              * description: The S3 bucket name to restore files from the S3 backup bucket

            ### (Required) SNSTopicARNForManualApproval
              * type: String
              * description: The ARN of the SNS Topic where a user will receive the notification about the manual approval of restore bucket clean-up if some files exist there

            ### (Required) IAMPrincipalForManualApproval
              * type: String
              * description: ARN of AWS authenticated principal who are able to either approve or reject the clean-up of restore bucket if there are some. Can be either an AWS Identity and Access Management (IAM) user name or IAM user ARN or IAM role ARN or IAM assume role user ARN

            ### (Optional) ApproveCleanRestoreBucketAutomatically
              * type: Boolean
              * description: If true, approve cleaning of the restore bucket automatically if files exist there. Otherwise, give user a chance to decide
              * default: false

            ## Details
            The document checks if target bucket has any files, requests approval to clean target bucket if necessary,
            cleans target bucket and copies files from backup bucket to target bucket.

            ## Steps executed in normal flow
              * RecordStartTime
              * CheckExistenceOfObjectsInRestoreBucket
              * CleanOrRestoreBranch
              * ApproveCleanRestoreBucketOrCancel
              * CleanRestoreBucket
              * RestoreFromBackup
              * OutputRecoveryTime

            ## Outputs
            ### CleanRestoreBucket.NumberOfDeletedObjects
              * type: String
              * description: Number of objects deleted from target bucket before restore

            ### RestoreFromBackup.RecoveryTimeSeconds
              * type: String
              * description: Time in seconds taken by copying files only

            ### RestoreFromBackup.RestoredFilesNumber
              * type: String
              * description: Number of restored files

            ### OutputRecoveryTime.RecoveryTime
              * type: String
              * description: SOP execution time in seconds
schemaVersion: "0.3"
assumeRole: "{{AutomationAssumeRole}}"
parameters:
  S3BackupBucketName:
    type: String
    description: (Required) The S3 backup bucket name to copy files from it to the S3 restore bucket.
  S3BucketToRestoreName:
    type: String
    description: (Required) The S3 bucket name to restore files from the S3 backup bucket.
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  SNSTopicARNForManualApproval:
    type: String
    description: |-
      (Required) The ARN of the SNS Topic where a user will receive the notification
      about the manual approval of restore bucket clean-up if some files exist there.
  IAMPrincipalForManualApproval:
    type: String
    description: |-
      (Required) ARN of AWS authenticated principal who are able to either approve or reject the clean-up of restore bucket if there are some files.
      Can be either an AWS Identity and Access Management (IAM) user name or IAM user ARN or IAM role ARN or IAM assume role user ARN
  ApproveCleanRestoreBucketAutomatically:
    type: Boolean
    description: |-
      (Optional) If it is true, approve cleaning of the restore bucket automatically if files exist there.
      Otherwise, give a user a chance to decide. It is false by default.
    default: false
outputs:
  - "OutputRecoveryTime.RecoveryTime"
  - "CleanRestoreBucket.NumberOfDeletedObjects"
  - "RestoreFromBackup.RecoveryTimeSeconds"
  - "RestoreFromBackup.RestoredFilesNumber"
mainSteps:
  - name: RecordStartTime
    description: Start recording execution time
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def start_time(events, context):
            return datetime.now(timezone.utc).isoformat()
        
        


  - name: CheckExistenceOfObjectsInRestoreBucket
    description: Check if there are already any files in restore bucket and output their amount
    action: aws:executeScript
    outputs:
      - Name: "NumberOfObjectsExistInRestoreBucket"
        Selector: "$.Payload.NumberOfObjectsExistInRestoreBucket"
        Type: "String"
      - Name: "AreObjectsExistInRestoreBucket"
        Selector: "$.Payload.AreObjectsExistInRestoreBucket"
        Type: "Boolean"
    inputs:
      Runtime: "python3.7"
      Handler: "check_existence_of_objects_in_bucket"
      InputPayload:
        S3BucketToRestoreName: "{{S3BucketToRestoreName}}"
      Script: |-
        import boto3
        from datetime import datetime
        from botocore.config import Config
        
        


        def check_existence_of_objects_in_bucket(events, context):
            """
            Check existence of versioned and deleted objects in bucket
            :return: Number of objects exist in restore bucket
            """
            if 'S3BucketToRestoreName' not in events:
                raise KeyError('Requires S3BucketToRestoreName  in events')
        
            s3_bucket_to_restore_name = events['S3BucketToRestoreName']
        
            print(f'Sending the list_object_versions request fore the {s3_bucket_to_restore_name} bucket...')
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            response: dict = boto3.client('s3', config=config).list_object_versions(Bucket=s3_bucket_to_restore_name)
            print(f'The response from the list_object_versions: {response}')
        
            versions: dict = response.get('Versions')
            delete_markers: dict = response.get('DeleteMarkers')
        
            number_of_objects_exist_in_restore_bucket = 0
            if versions:
                number_of_objects_exist_in_restore_bucket += len(versions)
            if delete_markers:
                number_of_objects_exist_in_restore_bucket += len(delete_markers)
        
            print(f'The number of existing objects in restore bucket is {number_of_objects_exist_in_restore_bucket}')
        
            return {'NumberOfObjectsExistInRestoreBucket': str(number_of_objects_exist_in_restore_bucket),
                    "AreObjectsExistInRestoreBucket": False if number_of_objects_exist_in_restore_bucket == 0 else True}
        
        

  - name: CleanOrRestoreBranch
    description: Check if there are any files to clean and if approve is required
    action: aws:branch
    inputs:
      Choices:
        - And:
            - Variable: "{{ApproveCleanRestoreBucketAutomatically}}"
              BooleanEquals: false
            - Variable: "{{CheckExistenceOfObjectsInRestoreBucket.AreObjectsExistInRestoreBucket}}"
              BooleanEquals: true
          NextStep: ApproveCleanRestoreBucketOrCancel
        - And:
            - Variable: "{{ApproveCleanRestoreBucketAutomatically}}"
              BooleanEquals: true
            - Variable: "{{CheckExistenceOfObjectsInRestoreBucket.AreObjectsExistInRestoreBucket}}"
              BooleanEquals: true
          NextStep: CleanRestoreBucket
      Default: RestoreFromBackup
  - name: ApproveCleanRestoreBucketOrCancel
    description: Request approve from user to clean target bucket
    action: aws:approve
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      NotificationArn: "{{SNSTopicARNForManualApproval}}"
      Message: Do you agree to clean up the {{S3BucketToRestoreName}} bucket before the restore process? There {{CheckExistenceOfObjectsInRestoreBucket.NumberOfObjectsExistInRestoreBucket}} file(-s) exist.
      MinRequiredApprovals: 1
      Approvers:
        - "{{IAMPrincipalForManualApproval}}"
  - name: CleanRestoreBucket
    description: Clean target bucket
    action: aws:executeAutomation
    inputs:
      DocumentName: AWSResilienceHub-CleanS3BucketUtil_2020-03-03
      RuntimeParameters:
        AutomationAssumeRole: '{{AutomationAssumeRole}}'
        S3BucketNameToClean: '{{S3BucketToRestoreName}}'
    outputs:
      - Name: "NumberOfDeletedObjects"
        Selector: "$.NumberOfDeletedObjects"
        Type: "String"
  - name: RestoreFromBackup
    description: Restore by copying files from source bucket to target bucket
    action: aws:executeScript
    outputs:
      - Name: "RestoredFilesNumber"
        Selector: "$.Payload.RestoredFilesNumber"
        Type: "Integer"
      - Name: "RecoveryTimeSeconds"
        Selector: "$.Payload.RecoveryTimeSeconds"
        Type: "String"
    inputs:
      Runtime: "python3.7"
      Handler: "restore_from_backup"
      InputPayload:
        S3BackupBucketName: "{{S3BackupBucketName}}"
        S3BucketToRestoreName: "{{S3BucketToRestoreName}}"
      Script: |-
        import boto3
        from datetime import datetime
        from botocore.config import Config
        
        


        def restore_from_backup(events, context):
            """
            Restore objects from backup bucket
            :return: Copied files number, recovery time seconds
            """
            if 'S3BucketToRestoreName' not in events or 'S3BackupBucketName' not in events:
                raise KeyError('Requires S3BucketToRestoreName and S3BackupBucketName in events')
        
            start = datetime.utcnow()
        
            s3_backup_bucket_name = events['S3BackupBucketName']
            s3_bucket_to_restore_name = events['S3BucketToRestoreName']
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            s3_client = boto3.client('s3', config=config)
            paginator = s3_client.get_paginator('list_objects_v2')
            pages = paginator.paginate(Bucket=s3_backup_bucket_name)
        
            print(f'Starting to copy files from the {s3_backup_bucket_name} bucket '
                  f'to the {s3_bucket_to_restore_name} bucket...')
        
            copied_count = 0
            for page in pages:
                print(f'The response from the list_objects_v2: {page}')
                if 'Contents' in page:
                    for content in page["Contents"]:
                        print(f'Copying the file {content["Key"]}...')
        
                        copy_source = {
                            'Bucket': s3_backup_bucket_name,
                            'Key': content["Key"]
                        }
                        s3_client.copy(copy_source, s3_bucket_to_restore_name, content["Key"])
        
                        print(f'The file {content["Key"]} was successfully copied')
        
                        copied_count += 1
        
            print(f'The file number of copied files is {copied_count}')
        
            return {'CopiedFilesNumber': copied_count, 'RecoveryTimeSeconds': str((datetime.utcnow() - start).total_seconds())}
        
        


  - name: OutputRecoveryTime
    description: Calculate execution time
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.8
      Handler: recovery_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def recovery_time(events, context):
            return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds
        
        

      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'

