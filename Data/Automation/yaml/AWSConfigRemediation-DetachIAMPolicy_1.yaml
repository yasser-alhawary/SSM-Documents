schemaVersion: "0.3"
description: |
   ### Document Name - AWSConfigRemediation-DetachIAMPolicy

   ## What does this document do?
   This document detaches an AWS IAM Policy using the [DetachGroupPolicy](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DetachGroupPolicy.html), [DetachRolePolicy](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DetachRolePolicy.html) and [DetachUserPolicy](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DetachUserPolicy.html) APIs.

   ## Input Parameters
   * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
   * IAMResourceId: (Required) IAM resource unique identifier for the IAM Policy.

   ## Output Parameters
   * DetachIAMPolicy.Output - Success message and HTTP response metadata or failure exception.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+$
  IAMResourceId:
    type: String
    description: (Required) IAM resource unique identifier for the IAM Policy.
    allowedPattern: ^[\w+=,.@_-]{1,128}$
outputs:
  - DetachIAMPolicyAndVerify.Output
mainSteps:
  - name: DetachIAMPolicyAndVerify
    action: aws:executeScript
    timeoutSeconds: 600
    isEnd: true
    description: |
      ## DetachIAMPolicyAndVerify
      Detaches the specified managed policy from every IAM entity it is currently attached and verifies it was properly detached.
      ## Outputs
      * Output: Success message and HTTP response metadata or failure exception.
    inputs:
      Runtime: python3.6
      Handler: detach_policy_handler
      InputPayload:
        IAMResourceId: "{{ IAMResourceId }}"
      Script: |-
        import boto3


        iam_client = boto3.client("iam")
        config_client = boto3.client("config")

        responses = {}
        responses["DetachGroupPolicyResponses"] = []
        responses["DetachUserPolicyResponses"] = []
        responses["DetachRolePolicyResponses"] = []

        def get_policy_arn(resource_id):
          response = config_client.get_resource_config_history(
            resourceType='AWS::IAM::Policy',
            resourceId=resource_id
          )
          policy_arn = response.get("configurationItems")[0].get("arn")
          return policy_arn

        def detach_policy_handler(event, context):
          iam_resource_id = event.get("IAMResourceId")
          policy_arn = get_policy_arn(iam_resource_id)

          policy_usage = iam_client.list_entities_for_policy(
            PolicyArn=policy_arn
          )
          for group in policy_usage.get("PolicyGroups"):
            responses["DetachGroupPolicyResponses"].append({"GroupName": group.get("GroupName"), "Response": iam_client.detach_group_policy(GroupName=group.get("GroupName"), PolicyArn=policy_arn)})
          for user in policy_usage.get("PolicyUsers"):
            responses["DetachUserPolicyResponses"].append({"UserName": user.get("UserName"), "Response": iam_client.detach_user_policy(UserName=user.get("UserName"), PolicyArn=policy_arn)})
          for role in policy_usage.get("PolicyRoles"):
            responses["DetachRolePolicyResponses"].append({"RoleName": role.get("RoleName"), "Response": iam_client.detach_role_policy(RoleName=role.get("RoleName"), PolicyArn=policy_arn)})

          current_policy_usage = iam_client.list_entities_for_policy(
            PolicyArn=policy_arn
          )

          if current_policy_usage.get("PolicyGroups") or current_policy_usage.get("PolicyUsers") or current_policy_usage.get("PolicyRoles"):
            error_message = "IAM POLICY {} STILL IN USE.".format(policy_arn)
            raise Exception(error_message)

          return {
            "output": "IAM Policy detached successfully.",
            "http_response": responses
          }
    outputs:
      - Name: Output
        Selector: $.Payload
        Type: StringMap	2020-12-07T23:08:53.746000+01:00	YAML	Automation	1	AWSConfigRemediation-DetachIAMPolicy	Active
