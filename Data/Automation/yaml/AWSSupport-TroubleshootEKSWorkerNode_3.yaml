---
schemaVersion: "0.3"
description: "# AWSSupport-TroubleshootEKSWorkerNode\n\n----\n\nThe *AWSSupport-TroubleshootEKSWorkerNode*\
  \ runbook is designed to help troubleshooting EKS worker node that [failed to join\
  \ an EKS cluster](https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html#worker-node-fail).\
  \ This automation runbook checks both EKS cluster configuration and worker node\
  \ and validates the following:\n\n- Node tags are applied.\n- Worker node Instance\
  \ type is supported. \n- Network communication between worker node and Cluster API\
  \ server is allowed. \n- Node [IAM Role and Policies](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html).\n\
  - Cluster [IAM role and Policies](https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html).\n\
  - VPC Endpoints for [private Clusters](https://docs.aws.amazon.com/eks/latest/userguide/private-clusters.html).\
  \ \n- Worker node [AMI version](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html).\
  \ \n- VPC DHCP optionset. \n- Kubelet, container runtime.\n\n\n### Prerequisites:\n\
  \n* To check Kubelet status and container runtime, EC2 instance must be an online\
  \ managed instance(connected with AWS Systems Manager). If your EC2 instance is\
  \ not an online managed instance, only this step of the test will be skipped, however\
  \ all other checks will be executed.\n\n### Disclaimer:\n\n* This runbook doesn't\
  \ make any changes to your EKS cluster or your worker node.\n* This runbook doesn't\
  \ support worker nodes running Windows or Bottlerocket Operating Systems.\n\n###\
  \ Workflow Specifications:\n\n This workflow uses AWS Systems Manager Automation\
  \ and takes in the following parameters:\n\n- **ClusterName** - **(Required)**:\
  \ The EKS cluster name. \n- **WorkerID** - **(Required)** : Worker node that failed\
  \ to join the EKS cluster.\n- **AutomationAssumeRole** - **(Optional)** The IAM\
  \ role which AWS Systems Manager will assume to execute this automation. This role\
  \ must allow these IAM actions:\n\n        - iam:GetRole\n        - iam:GetInstanceProfile\n\
  \        - iam:ListAttachedRolePolicies\n        - ec2:DescribeDhcpOptions\n   \
  \     - ec2:DescribeNatGateways\n        - ec2:DescribeSecurityGroups\n        -\
  \ ec2:DescribeImages\n        - ec2:DescribeNetworkInterfaces\n        - ec2:DescribeVpcs\n\
  \        - ec2:DescribeVpcEndpoints\n        - ec2:DescribeSubnets\n        - ec2:DescribeNetworkAcls\n\
  \        - ec2:DescribeInstanceStatus\n        - ec2:DescribeInstances\n       \
  \ - ec2:DescribeRouteTables\n        - ec2:DescribeVpcAttribute\n        - ec2:DescribeInstanceAttribute\n\
  \        - eks:DescribeCluster\n        - ssm:DescribeInstanceInformation\n    \
  \    - ssm:ListCommandInvocations\n        - ssm:ListCommands\n        - ssm:SendCommand\n\
  \n\n\nPlease visit the documentation on [Automation Setup](https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-setup.html)\
  \ for more information."
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    default: ""
    type: "String"
    description: "(Optional) IAM role which AWS Systems Manager will assume to execute\
      \ this automation. For more information, visit - https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-setup.html"
    allowedPattern: "^$|^arn:aws:iam::[0-9]*:role/[/\\w+=,.@-]+$"
  ClusterName:
    type: "String"
    description: "(Required) The name of the EKS cluster"
    allowedPattern: "[-a-zA-Z0-9]{1,100}$"
  WorkerID:
    type: "String"
    description: "(Required) The EC2 instance ID for the Worker node which failed\
      \ to join the cluster"
    default: ""
    allowedPattern: "^i-[a-z0-9]{8,17}$"
mainSteps:
- name: "validateIfClusterExistsAndActive"
  action: "aws:assertAwsResourceProperty"
  isCritical: true
  timeoutSeconds: 30
  maxAttempts: 3
  inputs:
    Service: "eks"
    Api: "DescribeCluster"
    name: "{{ClusterName}}"
    PropertySelector: "$.cluster.status"
    DesiredValues:
    - "ACTIVE"
- name: "validateIfInstanceExistsAndRunning"
  action: "aws:assertAwsResourceProperty"
  isCritical: true
  timeoutSeconds: 30
  maxAttempts: 3
  inputs:
    Service: "ec2"
    Api: "DescribeInstanceStatus"
    InstanceIds:
    - "{{WorkerID}}"
    PropertySelector: "$.InstanceStatuses[0].InstanceState.Name"
    DesiredValues:
    - "running"
- name: "TroubleshootWorkerNode"
  action: "aws:executeScript"
  isCritical: true
  inputs:
    Runtime: "python3.7"
    InputPayload:
      ClusterName: "{{ClusterName}}"
      WorkerID: "{{WorkerID}}"
    Handler: "script_handler"
    Script: "# Copyright 2022 Amazon.com, Inc. and its affiliates. All Rights Reserved.\n\
      # SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n# Licensed under\
      \ the Amazon Software License (the \"License\").\n# You may not use this file\
      \ except in compliance with the License.\n# A copy of the License is located\
      \ at\n#   http://aws.amazon.com/asl/\n# or in the \"license\" file accompanying\
      \ this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES\
      \ OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for\
      \ the specific language governing\n# permissions and limitations under the License.\n\
      \nfrom base.node import Node\nfrom base.cluster import Cluster\nfrom base.messages\
      \ import Messages\nfrom case import cluster_enis\nfrom case import ClusterSec_check\n\
      from case import cp_iam_role\nfrom case import dhcp_options\nfrom case import\
      \ iam_role_check\nfrom case import node_tags\nfrom case import node_ami\nfrom\
      \ case import cluster_public_endpoint_access\nfrom case import vpc_dns\nfrom\
      \ case import node_cni\nfrom case import instancetype\nfrom case import nacls_basic_rules\n\
      from case import sts_endpoint\nfrom case import node_iam_role\nfrom case import\
      \ public_subnet_IP\nfrom case import s3_endpoint_route\nfrom case import userdata\n\
      from case import verifyNat\nfrom case import vpc_endpoint_check\nfrom case import\
      \ node_sg_outbound\nfrom case import outposts_check\nfrom case import sw_daemons\n\
      from case import imds_check\n\ndef script_handler(events, context):\n\n    worker_node_id\
      \ = events['WorkerID']\n    cluster_name = events['ClusterName']\n\n    messages\
      \ = Messages()\n\n    cluster = Cluster(cluster_name)\n    node = Node(worker_node_id)\n\
      \n    if not cluster.isActive:\n        messages.render('I0',\n            \
      \            'ERROR',\n                        messages.generalMessages['clusterNotActive'],\n\
      \                        cluster_name=cluster_name)\n    else:\n        messages.render('I0',\n\
      \                        'NODASH',\n                        messages.generalMessages['clusterActive'],\n\
      \                        cluster_name=cluster_name)\n        if node.IsTerminated:\n\
      \            messages.render('I0',\n                            'ERROR',\n \
      \                           messages.nodeMessages['terminatedInstance'],\n \
      \                           node_id=worker_node_id)\n        else:\n       \
      \     messages.render('I2',\n                            'NODASH',\n       \
      \                     messages.clusterMessages['checkingClusterSG'])\n     \
      \       if ClusterSec_check.ClusterSecuritygroup(node.privateIpAddress,\n  \
      \                                                   node.securityGroupIDs,\n\
      \                                                     cluster.clusterSecurityGroup):\n\
      \                messages.render('I3',\n                                'INFO',\n\
      \                                messages.clusterMessages['clusterSGOK'], cluster_sg=cluster.clusterSecurityGroup)\n\
      \            else:\n                messages.render('I3',\n                \
      \                'ERROR',\n                                messages.clusterMessages['clusterSGNOK'],\
      \ cluster_sg=cluster.clusterSecurityGroup)\n            messages.render('I2',\n\
      \                            'NODASH',\n                            messages.networkMessages['checkingDHCP'])\n\
      \            if dhcp_options.dhcp_options_check(node.InstanceVpc):\n       \
      \         messages.render('I3',\n                                'INFO',\n \
      \                               messages.networkMessages['dhcpOK'])\n      \
      \      else:\n                messages.render('I3',\n                      \
      \          'ERROR',\n                                messages.networkMessages['dhcpNOK'])\n\
      \n            messages.render('I2',\n                            'NODASH',\n\
      \                            messages.clusterMessages['checkingServiceRole'],\n\
      \                            cluster_role=cluster.roleArn)\n            cp_iam_role.check_cluster_role(cluster.roleArn,\n\
      \                                           cluster_name,\n                \
      \                           messages)\n                \n            messages.render('I2',\n\
      \                            'NODASH',\n                            messages.networkMessages['checkingClusterENIs'])\n\
      \            cluster_enis.execute_checks(cluster, messages)\n            if\
      \ cluster.isOnlyPublic:\n                cluster_public_endpoint_access.execute_checks(node,\
      \ cluster, messages)\n            \n            messages.render('I2',\n    \
      \                        'NODASH',\n                            messages.networkMessages['checkingVpcDNS'])\n\
      \            vpc_dns.check_vpc_attributes(cluster.vpcId, messages)\n\n##############worker\
      \ node checks#############\n            messages.render('I0',\n            \
      \                'NODASH',\n                            messages.generalMessages['thinSeperator'])\n\
      \            messages.render('I0',\n                            'NODASH',\n\
      \                            messages.nodeMessages['instanceStateOK'],\n   \
      \                         node_id=worker_node_id)\n            messages.render('I2',\n\
      \                            'NODASH',\n                            messages.nodeMessages['checkingInstanceFamily'])\n\
      \            if instancetype.validateInstanceType(node.InstanceType):\n    \
      \            messages.render('I3',\n                                'INFO',\n\
      \                                messages.nodeMessages['instanceFamilyOK'],\n\
      \                                instance_family=node.InstanceType)\n      \
      \      else:\n                messages.render('I3',\n                      \
      \          'ERROR',\n                                messages.nodeMessages['instanceFamilyNOK'],\n\
      \                                instance_family=node.InstanceType)\n      \
      \      messages.render('I2',\n                            'NODASH',\n      \
      \                      messages.nodeMessages['checkingInstanceNetworking'])\n\
      \            if node.IsPrivate:\n                messages.render('I3',\n   \
      \                             'INFO',\n                                messages.nodeMessages['privateInstance'],\n\
      \                                nat_gateway=node.NatGatway)\n             \
      \   isNatPublic = verifyNat.verify_nat(node.NatGatway, node.InstanceVpc)\n \
      \               if not isNatPublic:\n                    messages.render('I4',\n\
      \                                    'ERROR',\n                            \
      \        messages.nodeMessages['privateNAT'],\n                            \
      \        nat_gateway=node.NatGatway)\n                else:\n              \
      \      messages.render('I4',\n                                    'INFO2',\n\
      \                                    messages.nodeMessages['natOK'],\n     \
      \                               nat_gateway=node.NatGatway)\n            elif\
      \ node.IsPublic:\n                messages.render('I3',\n                  \
      \              'INFO',\n                                messages.nodeMessages['publicInstance'],\n\
      \                                internet_gateway=node.InternetGateway)\n  \
      \              if node.PublicIpAddress:\n                    messages.render('I4',\n\
      \                                    'INFO2',\n                            \
      \        messages.nodeMessages['instanceWithPublicIP'],\n                  \
      \                  public_ip=node.PublicIpAddress)\n                else:\n\
      \                   messages.render('I4',\n                                \
      \    'ERROR',\n                                    messages.nodeMessages['instanceWithoutPublicIP'])\n\
      \n                if public_subnet_IP.is_public_ip_map(node.InstanceSubnet):\n\
      \                    messages.render('I4',\n                               \
      \     'INFO2',\n                                    messages.nodeMessages['instanceAutoAssignIP'],\n\
      \                                    instance_subnet=node.instance_subnet_id)\n\
      \                else:\n                    messages.render('I4',\n        \
      \                            'ERROR',\n                                    messages.nodeMessages['instanceNoAutoAssingIP'],\n\
      \                                    instance_subnet=node.instance_subnet_id)\n\
      \            else:\n                messages.render('I3',\n                \
      \                'INFO',\n                                messages.nodeMessages['privateInstanceVPCEndpoint'])\n\
      \                messages.render('I3',\n                                'INFO',\n\
      \                                messages.networkMessages['checkingVPCE'])\n\
      \                vpc_endpoint_check.vpce_all_checks(node.Region,\n         \
      \                                          node.InstanceVpc,\n             \
      \                                      node.InstanceSubnet,\n              \
      \                                     node.privateIpAddress,\n             \
      \                                      node.securityGroupIDs,\n            \
      \                                       messages)\n                s3_endpoint_route.check_s3_endpoints(node,\
      \ messages)\n            \n            messages.render('I2',\n             \
      \               'NODASH',\n                            messages.nodeMessages['checkingInstanceProfile'])\n\
      \            if node.Instanceprofile:\n                messages.render('I3',\n\
      \                                'INFO',\n                                messages.nodeMessages['displayInstanceProfile'],\n\
      \                                node_id=node.name,\n                      \
      \          instance_profile=node.Instanceprofile)\n                if iam_role_check.iam_role_check(node.IAMRole):\n\
      \                    messages.render('I4',\n                               \
      \     'INFO2',\n                                    messages.nodeMessages['instanceProfileOK'],\n\
      \                                    instance_role=node.IAMRole)\n         \
      \       else:\n                    messages.render('I4',\n                 \
      \                   'ERROR',\n                                    messages.nodeMessages['instanceProfilePath'],\n\
      \                                    instance_role= node.IAMRole)\n        \
      \        checkTrustRelationship = node_iam_role.check_trust_relationship(\n\
      \                    node.role_name\n                )\n                checkIAMPolicy\
      \ = node_iam_role.check_instance_role(node.role_name)\n                if not\
      \ checkIAMPolicy[0]:\n                    messages.render('I4',\n          \
      \                          'ERROR',\n                                    messages.nodeMessages['instanceIAMPolicyNOK'],\n\
      \                                    instance_role=node.IAMRole,\n         \
      \                           node=worker_node_id,\n                         \
      \           policy=str(checkIAMPolicy[1]))\n                else:\n        \
      \            messages.render('I4',\n                                    'INFO2',\n\
      \                                    messages.nodeMessages['instanceIAMPolicyOK'],\n\
      \                                    instance_role=node.IAMRole)\n         \
      \       if checkTrustRelationship:\n                    messages.render('I4',\n\
      \                                    'INFO2',\n                            \
      \        messages.nodeMessages['instanceProfileThrustOK'],\n               \
      \                     instance_role=node.IAMRole)\n                else:\n \
      \                   messages.render('I4',\n                                \
      \    'ERROR',\n                                    messages.nodeMessages['instanceProfileThrustNOK'],\n\
      \                                    instance_role=node.IAMRole)\n         \
      \   else:\n                messages.render('I3',\n                         \
      \       'ERROR',\n                                messages.nodeMessages['instanceProfileNOK'])\n\
      \n            messages.render('I2',\n                            'NODASH',\n\
      \                            messages.nodeMessages['checkingUserData'])\n  \
      \          if userdata.check_userdata(node.UserData,\n                     \
      \                  cluster_name):\n                messages.render('I3',\n \
      \                               'INFO',\n                                messages.nodeMessages['userDataOK'])\n\
      \            else:\n                messages.render('I3',\n                \
      \                'ERROR',\n                                messages.nodeMessages['userDataNOK'])\n\
      \n            node_tags.execute_checks(node, cluster, messages)\n          \
      \  node_ami.execute_checks(node, cluster, messages)\n            node_cni.execute_checks(node,\
      \ messages)\n            node_sg_outbound.execute_checks(node, messages)\n \
      \           outposts_check.execute_checks(node,messages)\n\n            messages.render('I2',\n\
      \                            'NODASH',\n                            messages.networkMessages['checkingNACL'])\n\
      \            nacls_basic_rules.execute_checks(node, cluster, messages)\n\n \
      \           messages.render('I2',\n                                'NODASH',\n\
      \                                messages.nodeMessages['CheckingStsEndpoint'])\n\
      \            if sts_endpoint.check_sts_endpoint(node.Region):\n            \
      \    messages.render('I3',\n                                'INFO',\n      \
      \                          messages.nodeMessages['CorrectSTSendpoint'], region=node.Region)\n\
      \            else:\n                messages.render('I3',\n                \
      \                'ERROR',\n                                messages.nodeMessages['MissingSTSendpoint'],\
      \ region=node.Region)\n            messages.render('I2',\n                 \
      \           'NODASH',\n                            messages.nodeMessages['checkingImdsEndpoint'])\n\
      \            if imds_check.imds_check(node):\n                messages.render('I3',\n\
      \                                'INFO',\n                                messages.nodeMessages['ImdsEndpointEnabled'])\n\
      \            else:\n                messages.render('I3',\n                \
      \                'ERROR',\n                                messages.nodeMessages['ImdsEndpointDisabled'])\n\
      \            messages.render('I2',\n                            'NODASH',\n\
      \                                messages.nodeMessages['checkingSSMAgent'])\n\
      \            if sw_daemons.ssm_agent_check(node.name):\n                messages.render('I3',\n\
      \                                'INFO',\n                                messages.nodeMessages['ssmAgentReachable'])\n\
      \                if sw_daemons.check_containerd(node.name):\n              \
      \      messages.render('I4',\n                                    'INFO2',\n\
      \                                    messages.nodeMessages['daemonRunning'],\
      \ daemon_name='containerd')\n                else:\n                    messages.render('I4',\n\
      \                                    'ERROR',\n                            \
      \        messages.nodeMessages['daemonNotRunning'], daemon_name='containerd')\n\
      \                if float(cluster.version) < 1.23 :\n                    if\
      \ sw_daemons.check_docker(node.name):\n                        messages.render('I4',\n\
      \                                        'INFO2',\n                        \
      \                messages.nodeMessages['daemonRunning'], daemon_name='docker')\n\
      \                    else:\n                        messages.render('I4',\n\
      \                                        'ERROR',\n                        \
      \                messages.nodeMessages['daemonNotRunning'], daemon_name='docker')\n\
      \                if sw_daemons.check_kubelet(node.name):\n                 \
      \   messages.render('I4',\n                                    'INFO2',\n  \
      \                                  messages.nodeMessages['daemonRunning'], daemon_name='kubelet')\n\
      \                else:\n                    messages.render('I4',\n        \
      \                            'ERROR',\n                                    messages.nodeMessages['daemonNotRunning'],\
      \ daemon_name='kubelet')\n            else:\n                messages.render('I3',\n\
      \                                'WARNING',\n                              \
      \  messages.nodeMessages['ssmAgentNotReachable'])                  \n      \
      \                  \n            messages.render('I0',\n                   \
      \         'NODASH',\n                            messages.generalMessages['thickSeparator'])\n\
      \    messages.render('I0',\n                    'NODASH',\n                \
      \    messages.generalMessages['executionComplete'])\n    \n    return {\n  \
      \      'Message': messages.bufferPrettify()\n    }\n\n"
    Attachment: "attachment.zip"
  outputs:
  - Name: "Message"
    Selector: "$.Payload.Message"
    Type: "String"
files:
  attachment.zip:
    checksums:
      sha256: "26551d241cb41de61576518a41d8bd8a683a6da1b99c487c1c35623823d78818"
outputs:
- "TroubleshootWorkerNode.Message"
	2022-04-26T13:47:35.318000+02:00	YAML	Automation	3	AWSSupport-TroubleshootEKSWorkerNode	Active
ATTACHMENTSCONTENT	26551d241cb41de61576518a41d8bd8a683a6da1b99c487c1c35623823d78818	Sha256	attachment.zip	41382	https://aws-ssm-document-attachments-us-east-1.s3.us-east-1.amazonaws.com/116/190294270367/Automation/AWSSupport-TroubleshootEKSWorkerNode%212c099143-b68b-4f52-858d-aa4599aec630/3/attachment.zip?x-attachment-size=41382&x-requester-accountId=341329434541&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIEC%2FuDb1JJSu11%2BkHvEB73DWn1r%2BkTReNEmsq08kr2iDAiAj%2F5NTel19oK4SfyX67i8HU3M2UsinscV1gst9Fq74NirSBAgvEAMaDDE4NzM0MDc2OTQ4NSIM7nTogwxrANH%2BZ7FeKq8EeohC0Xs16O2HGvKxQYsSTNlsrFld%2FYWJLyIl7lTqHzQRcx5%2B9HfSPKOVppHL26dUsm1Opk8Qf442gocMRoPU1NxlkkHj1i1rJRJYNQosZdfl0eL9mmnHxwlbweQALuKRhvR0FzehJyjzlKyfHMITsePsFblzMmkbWcK7tgHK4urkioY5HoYUAGhJ3a61yOqUm87ZsEKdAcDIRgt6ZN3u7zJ%2BBz9lWzVk9s3F1E8717hcbJDEmmQaiswz0d8dQpdoihn56MWn5ee94rACcNuwk7HCpuCwpcC%2BgCIzRoVSceI80tT4iqMyXaQ5dVzYW0hMj0ncsKKPFg9EKZinGj49SrkoiX%2BH%2FAkLM03Ijv1uawXOBQeskUX8aDvpGJ5Wi7xJdZijm%2BCMhyzNwkKbkPJri2J1jJrOtiQBJRWg%2BIsq0rbn6lxD4piJ%2B57ZuqILgjwSr07LqwpwBj%2FshVKnsJEf3jdpNORjc%2BNj%2FTUkCo3dnKm2YboDzMCsTtHMm7zqPDSXAudiXLgyq0xAwxWFKeFUdInBe1c45X6M1Kl5%2BhuAn83JOfkMlLRJ7Zk059xBk7Yoj8UCuwm3ZlCOwI%2BVWFjBeTrmSfbFX6vLvZek2L2VZ2o9aAqCheMtiruyaeMXmIG5Luq3wzLaH%2BErT0YzzTT5e%2F6QU8wBjfYGHTSTCA1zeXh25dIW9NV%2BEkq3RwwHD7XArarBvagp9QGUJVwR38wTSOGilNSV%2BCqVPqLp6Q5hSjCCx8mXBjqqATp2P8WXae2F91R0uEjOFaJ4PNg9Type7EyGLCIrDVXfg1SdglGbVXvP0IYOvX44RQxKCoRjQSqcR%2F4vBTMxg28Nq%2BQKxdeSXYEDgaYIUIjXnuTuJUkKAxw7LBGL2jH93IB02zDDTvuqVDlhD0AZds8Lyx8N9O8dk1XbgqNJzLIJk8r6E13ShGYoRMbFL%2BhgXB1iw8GaxX6Odjh88AfiP%2B6dK4NadzxLApcN&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20220809T150745Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Credential=ASIASXHTBJDGTLJSCKER%2F20220809%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=e662a666d10e5f914cdbcbb3cfa4ce49807326f45d11cb8c22dcc5826e92de70
