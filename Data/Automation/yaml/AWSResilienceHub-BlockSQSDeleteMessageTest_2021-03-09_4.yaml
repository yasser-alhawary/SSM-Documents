#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-BlockSQSDeleteMessageTest_2021-03-09

            ## Intent
            Test behavior when messages are not deleted from a specific queue. Adds deny policy to delete messages from queue and waits for ApproximateAgeOfOldestMessage metric alarm to indicate messages not being deleted and remain in the queue for a time higher than the average time to process

            ## Type
            TEST

            ## Risk
            High

            ## Requirements:
              * SQS queue
              * Amazon CloudWatch alarm is setup for [ApproximateAgeOfOldestMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Threshold age should be higher than average time to process message on this queue

            ## Permissions required for AutomationAssumeRole
              * cloudwatch:DescribeAlarms
              * sqs:GetQueueAttributes
              * sqs:SetQueueAttributes
              * ssm:GetParameters
              * ssm:GetAutomationExecution
              * ssm:StartAutomationExecution
              * iam:PassRole

            ## Supports Rollback
            Yes. The document returns the queue policy to its initial state

            ## Cancellation behavior
            The document returns the queue policy to its initial state

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) QueueUrl
              * type: String
              * description: The URL of the SQS queue

            ### (Required) SQSUserErrorAlarmName
              * type: String
              * description: Amazon CloudWatch alarm for [ApproximateAgeOfOldestMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Maximum age should be higher than average time to process message on this queue

            ### (Optional) IsRollback
              * type: String
              * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
              * default: false

            ### (Optional) PreviousExecutionId
              * type: String
              * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up

            ## Details
            The document injects failure by adding a deny delete message policy to the queue. In case of issues users
            should manually remove the deny delete message policy.

            ## Steps executed in normal flow
              * CheckIsRollback
              * AssertAlarmToBeGreenBeforeTest
              * BackupCurrentExecution
              * GetPolicyWithDenyOnDeleteMessageAction
              * UpdatePolicy
              * AssertAlarmToBeRed
              * RollbackCurrentExecution
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * CheckIsRollback
              * GetInputsFromPreviousExecution
              * AssertInputsFromPreviousExecution
              * PrepareRollbackOfPreviousExecution
              * RollbackPreviousExecution

            ## Outputs
            None
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  QueueUrl:
    type: String
    description: (Required) The URL of the queue
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  SQSUserErrorAlarmName:
    type: String
    description: (Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test.
  IsRollback:
    type: String
    description: >-
      (Optional) Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up
    default: ''
mainSteps:
  - name: CheckIsRollback
    description: Check if document should be executed in rollback mode
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default: AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: QueueUrl
        Selector: '$.Payload.QueueUrl[0]'
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_inputs_from_ssm_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events:
                raise KeyError('Requires ExecutionId')
        
            if not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            response_parameters = response['AutomationExecution']['Parameters']
            # TODO DIG-853
            for parameter in response_parameters:
                output[parameter] = response_parameters[parameter]
        
            return output
        
        


  - name: AssertInputsFromPreviousExecution
    description: Validate that rollback is executed with the same input
    action: aws:branch
    inputs:
      Choices:
        - NextStep: PrepareRollbackOfPreviousExecution
          Variable: '{{ GetInputsFromPreviousExecution.QueueUrl }}'
          StringEquals: '{{ QueueUrl }}'
    isEnd: true

  - name: PrepareRollbackOfPreviousExecution
    description: Get initial queue policy from previous execution
    action: aws:executeScript
    outputs:
      - Name: Policy
        Selector: $.Payload.Policy[0]
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'BackupCurrentExecution'
        ResponseField: 'Policy'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_output_from_ssm_step_execution(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:
                raise KeyError('Requires ExecutionId, StepName and ResponseField in events')
        
            ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            for step in ssm_response['AutomationExecution']['StepExecutions']:
                if step['StepName'] == events['StepName']:
                    response_fields = events['ResponseField'].split(',')
                    output = {}
                    for response_field in response_fields:
                        if response_field in step['Outputs']:
                            # Sets values in string type regardless of what is the original value type. In order to set
                            # values with original types please use 'get_typed_output_from_ssm_step_execution'.
                            output[response_field] = step['Outputs'][response_field]
                        else:
                            """
                            By default SSM ignores empty values when encodes API outputs to JSON. It may result in
                            a situation when an empty value is a valid value but step output completely misses it.
                            Usually happens with SQS queue policies, default policy is returned by API as an empty value
                            and executeApi step output ignores it. As a result, further steps in rollback execution will fail.
                            Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string
                            represents a default sqs policy
                            """
                            output[response_field] = ['']
                    return output
        
            # Could not find step name
            raise Exception('Can not find step name % in ssm execution response', events['StepName'])
        
        


  - name: RollbackPreviousExecution
    description: Revert queue policy to initial state
    action: aws:executeScript
    inputs:
      Runtime: python3.8
      Handler: revert_sqs_policy
      InputPayload:
        OptionalBackupPolicy: '{{PrepareRollbackOfPreviousExecution.Policy}}'
        QueueUrl: '{{ QueueUrl }}'
      Script: |-
        import json
        import logging
        import time
        import uuid
        import boto3
        import random
        from datetime import datetime
        from typing import List, Callable, Optional
        from botocore.exceptions import ClientError
        from botocore.config import Config
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        


        def revert_sqs_policy(events: dict, context: dict) -> None:
            """
            Revert SQS policy to the initial state by providing the backup policy
            """
            if "QueueUrl" not in events or "OptionalBackupPolicy" not in events:
                raise KeyError("Requires QueueUrl and OptionalBackupPolicy in events")
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            queue_url: str = events.get("QueueUrl")
            optional_backup_policy: str = events.get("OptionalBackupPolicy")
            optional_backup_policy = None if optional_backup_policy.startswith("{{") else optional_backup_policy
            if optional_backup_policy is None:
                sqs_client.set_queue_attributes(QueueUrl=queue_url, Attributes={"Policy": ""})
            else:
                sqs_client.set_queue_attributes(QueueUrl=queue_url, Attributes={"Policy": str(optional_backup_policy)})
        
        

    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SQSUserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: BackupCurrentExecution
    description: Backup initial queue policy for rollback
    action: aws:executeAwsApi
    outputs:
      - Name: Policy
        Selector: '$.Attributes.Policy'
        Type: String
      - Name: QueueArn
        Selector: '$.Attributes.QueueArn'
        Type: String
    inputs:
      Service: sqs
      Api: GetQueueAttributes
      AttributeNames:
        - Policy
        - QueueArn
      QueueUrl: '{{ QueueUrl }}'
  - name: GetPolicyWithDenyOnDeleteMessageAction
    description: Generate queue policy that denies message deletion
    action: aws:executeScript
    outputs:
      - Name: Policy
        Selector: $.Payload.Policy
        Type: String
      - Name: PolicySid
        Selector: $.Payload.PolicySid
        Type: String
      - Name: DenyPolicyStatementSid
        Selector: $.Payload.DenyPolicyStatementSid
        Type: String
    inputs:
      Runtime: python3.8
      Handler: add_deny_in_sqs_policy
      InputPayload:
        SourcePolicy: '{{BackupCurrentExecution.Policy}}'
        ActionsToDeny:
          - "sqs:DeleteMessage"
        Resource: '{{BackupCurrentExecution.QueueArn}}'
      Script: |-
        import json
        import logging
        import time
        import uuid
        import boto3
        import random
        from datetime import datetime
        from typing import List, Callable, Optional
        from botocore.exceptions import ClientError
        from botocore.config import Config
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        


        def add_deny_in_sqs_policy(events: dict, context: dict) -> dict:
            """
            Add deny policy statement(-s) to the SQS policy whether it is empty or not
            :return: updated SQS policy with deny
            """
            if "ActionsToDeny" not in events or "Resource" not in events or "SourcePolicy" not in events:
                raise KeyError("Requires ActionsToDeny and Resource and SourcePolicy in events")
        
            actions_to_deny: List = events.get("ActionsToDeny")
            resource: str = events.get("Resource")
            source_policy: str = events.get("SourcePolicy")
            source_policy = None if source_policy.startswith("{{") else source_policy
        
            deny_policy_statement_id: str = f"DenyPolicyStatement-{uuid.uuid4()}"
            deny_policy_statement: dict = {
                "Effect": "Deny",
                "Sid": deny_policy_statement_id,
                "Principal": "*",
                "Action": actions_to_deny,
                "Resource": resource,
            }
        
            if source_policy is None:
                policy_id: str = f"DenyPolicy-{uuid.uuid4()}"
                sqs_policy: dict = {
                    "Version": "2012-10-17",
                    "Id": policy_id,
                    "Statement": [deny_policy_statement]
                }
                return {"Policy": json.dumps(sqs_policy),
                        "PolicySid": policy_id,
                        "DenyPolicyStatementSid": deny_policy_statement_id}
            else:
                source_policy: dict = json.loads(source_policy)
                statement: List = source_policy.get("Statement")
                if statement is None or len(statement) == 0:
                    raise KeyError("Requires not empty Statement in SQS Policy")
                statement.append(deny_policy_statement)
                return {"Policy": json.dumps(source_policy),
                        "PolicySid": source_policy.get("Id"),
                        "DenyPolicyStatementSid": deny_policy_statement_id}
        
        

  - name: UpdatePolicy
    description: Set queue policy to the generated one
    action: aws:executeAwsApi
    inputs:
      Service: sqs
      Api: SetQueueAttributes
      QueueUrl: '{{ QueueUrl }}'
      Attributes:
        Policy: '{{ GetPolicyWithDenyOnDeleteMessageAction.Policy }}'
  - name: AssertAlarmToBeRed
    description: Wait for expected alarm to be red after failure is injected
    action: aws:waitForAwsResourceProperty
    # Timeout value here should be less than default timeout of 1200s, to ensure TimedOut status
    timeoutSeconds: 1000
    onFailure: 'step:RollbackCurrentExecution'
    onCancel: 'step:TriggerRollback'
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SQSUserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]
  - name: RollbackCurrentExecution
    description: Revert queue policy to initial state
    action: aws:executeScript
    onCancel: 'step:TriggerRollback'
    inputs:
      Runtime: python3.8
      Handler: revert_sqs_policy
      InputPayload:
        OptionalBackupPolicy: '{{BackupCurrentExecution.Policy}}'
        QueueUrl: '{{ QueueUrl }}'
      Script: |-
        import json
        import logging
        import time
        import uuid
        import boto3
        import random
        from datetime import datetime
        from typing import List, Callable, Optional
        from botocore.exceptions import ClientError
        from botocore.config import Config
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        


        def revert_sqs_policy(events: dict, context: dict) -> None:
            """
            Revert SQS policy to the initial state by providing the backup policy
            """
            if "QueueUrl" not in events or "OptionalBackupPolicy" not in events:
                raise KeyError("Requires QueueUrl and OptionalBackupPolicy in events")
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            sqs_client = boto3.client("sqs", config=config)
            queue_url: str = events.get("QueueUrl")
            optional_backup_policy: str = events.get("OptionalBackupPolicy")
            optional_backup_policy = None if optional_backup_policy.startswith("{{") else optional_backup_policy
            if optional_backup_policy is None:
                sqs_client.set_queue_attributes(QueueUrl=queue_url, Attributes={"Policy": ""})
            else:
                sqs_client.set_queue_attributes(QueueUrl=queue_url, Attributes={"Policy": str(optional_backup_policy)})
        
        

  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SQSUserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true
  - name: TriggerRollback
    description: This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def start_rollback_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
        
            # Get parameters for current execution and add IsRollback and PreviousExecutionId
            response_parameters = response['AutomationExecution']['Parameters']
            response_parameters['IsRollback'] = ['true']
            response_parameters['PreviousExecutionId'] = [events['ExecutionId']]
        
            rollback_execution_response = ssm.start_automation_execution(
                DocumentName=response['AutomationExecution']['DocumentName'],
                DocumentVersion=response['AutomationExecution']['DocumentVersion'],
                Parameters=response_parameters
            )
            output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']
            return output
        
        

    isEnd: true

