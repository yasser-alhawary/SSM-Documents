#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-UpdateHttpWsApiGwVersionSOP_2020-10-26

            ## Intent
            Update HTTP or WS API Gateway Stage deployment version

            ## Type
            SOP

            ## Risk
            Medium

            ## Requirements
              * HTTP or WebSocket API Gateway

            ## Permissions required for AutomationAssumeRole
              * apigateway:GET
              * apigateway:PATCH

            ## Supports Rollback
            No

            ## Cancellation behavior
            Fail

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) HttpWsApiGwId
              * type: String
              * description: The ID of the HTTP or WS API Gateway

            ### (Required) HttpWsStageName
              * type: String
              * description: The stage name of the HTTP or WS API Gateway

            ### (Optional) HttpWsDeploymentId
              * type: String
              * description: The Id of the deployment of the ApiGateway
              * default: ''

            ## Details
            The document validates that auto deployment is turned off for the specified stage and applies the previous
            deployment (by creation date) or the specified deployment on the HTTP or WS API Gateway stage.

            ## Steps executed in normal flow
              * RecordStartTime
              * ValidateStage
              * FindPreviousDeploymentIfNotProvided
              * ApplyDeploymentOnStage
              * OutputRecoveryTime

            ## Outputs
            ### FindPreviousDeploymentIfNotProvided.DeploymentIdOriginalValue
              * type: String
              * description: Deployment Id before update

            ### FindPreviousDeploymentIfNotProvided.DeploymentIdToApply
              * type: String
              * description: Previous deployment Id selected to apply if Id is not specified

            ### ApplyDeploymentOnStage.DeploymentIdNewValue
              * type: String
              * description: Deployment Id after update

            ### OutputRecoveryTime.RecoveryTime
              * type: Integer
              * description: SOP execution time in seconds

schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - OutputRecoveryTime.RecoveryTime
  - FindPreviousDeploymentIfNotProvided.DeploymentIdOriginalValue
  - FindPreviousDeploymentIfNotProvided.DeploymentIdToApply
  - ApplyDeploymentOnStage.DeploymentIdNewValue
parameters:
  HttpWsApiGwId:
    type: String
    description: (Required) The Id of the ApiGateway
  HttpWsStageName:
    type: String
    description: (Required) The stage name of the ApiGateway stage
  HttpWsDeploymentId:
    type: String
    description: (Optional) The Id of the deployment of the ApiGateway
    default: ''
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
mainSteps:
  - name: RecordStartTime
    description: Start recording execution time
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def start_time(events, context):
            return datetime.now(timezone.utc).isoformat()
        
        


  - name: ValidateStage
    description: Validate that AutoDeploy option is turned off for the specified Stage
    action: aws:executeScript
    inputs:
      Runtime: "python3.7"
      Handler: "validate_auto_deploy"
      InputPayload:
        HttpWsApiGwId: '{{ HttpWsApiGwId }}'
        HttpWsStageName: '{{ HttpWsStageName }}'
      Script: |-
        import logging
        
        import boto3
        from botocore.config import Config
        
        log = logging.getLogger()
        log.setLevel(logging.DEBUG)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if not response['ResponseMetadata']['HTTPStatusCode'] == 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def get_stage(gateway_id: str, stage_name: str) -> dict:
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigatewayv2', config=config)
            response = client.get_stage(ApiId=gateway_id, StageName=stage_name)
            assert_https_status_code_200(response, f'Failed to perform get_stage with '
                                                   f'ApiId: {gateway_id} and StageName: {stage_name}')
            return response
        
        

        def validate_auto_deploy(events: dict, context: dict) -> bool:
            """
            Validate that AutoDeploy is turned off for stage StageName
            """
            if 'HttpWsApiGwId' not in events:
                raise KeyError('Requires HttpWsApiGwId in events')
        
            if 'HttpWsStageName' not in events:
                raise KeyError('Requires HttpWsStageName in events')
        
            gateway_id: str = events['HttpWsApiGwId']
            stage_name: str = events['HttpWsStageName']
        
            response = get_stage(gateway_id, stage_name)
        
            if 'AutoDeploy' in response and response['AutoDeploy']:
                raise ValueError('AutoDeploy must be turned off to update deployment manually')
            return True
        
        


  - name: FindPreviousDeploymentIfNotProvided
    description: Find previous deployment by creation date if `HttpWsDeploymentId` not specified
    action: aws:executeScript
    outputs:
      - Name: DeploymentIdOriginalValue
        Selector: "$.Payload.OriginalDeploymentId"
        Type: String
      - Name: DeploymentIdToApply
        Selector: "$.Payload.DeploymentIdToApply"
        Type: String
    inputs:
      Runtime: "python3.7"
      Handler: "find_deployment_id_for_update"
      InputPayload:
        HttpWsApiGwId: '{{ HttpWsApiGwId }}'
        HttpWsStageName: '{{ HttpWsStageName }}'
        HttpWsDeploymentId: '{{ HttpWsDeploymentId }}'
      Script: |-
        import logging
        
        import boto3
        from botocore.config import Config
        
        log = logging.getLogger()
        log.setLevel(logging.DEBUG)
        
        

        def get_stage(gateway_id: str, stage_name: str) -> dict:
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigatewayv2', config=config)
            response = client.get_stage(ApiId=gateway_id, StageName=stage_name)
            assert_https_status_code_200(response, f'Failed to perform get_stage with '
                                                   f'ApiId: {gateway_id} and StageName: {stage_name}')
            return response
        
        

        def get_deployment(gateway_id: str, deployment_id: str) -> dict:
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigatewayv2', config=config)
            response = client.get_deployment(ApiId=gateway_id, DeploymentId=deployment_id)
            assert_https_status_code_200(response, f'Failed to perform get_deployment with '
                                                   f'ApiId: {gateway_id} and DeploymentId: {deployment_id}')
            return response
        
        

        def get_deployments(gateway_id: str, limit: str = '25') -> dict:
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigatewayv2', config=config)
            response = client.get_deployments(ApiId=gateway_id, MaxResults=limit)
            assert_https_status_code_200(response, f'Failed to perform get_deployments with ApiId: {gateway_id}')
            return response
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if not response['ResponseMetadata']['HTTPStatusCode'] == 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def find_deployment_id_for_update(events: dict, context: dict) -> dict:
            """
            Find deployment id for update
            """
            if 'HttpWsApiGwId' not in events:
                raise KeyError('Requires HttpWsApiGwId in events')
        
            if 'HttpWsStageName' not in events:
                raise KeyError('Requires HttpWsStageName in events')
        
            output: dict = {}
            gateway_id: str = events['HttpWsApiGwId']
            stage_name: str = events['HttpWsStageName']
            provided_deployment_id: str = events.get('HttpWsDeploymentId', '')
        
            current_deployment_id = get_stage(gateway_id, stage_name)['DeploymentId']
            output['OriginalDeploymentId'] = current_deployment_id
        
            if provided_deployment_id and provided_deployment_id == current_deployment_id:
                raise ValueError('Provided deployment ID and current deployment ID should not be the same')
        
            if provided_deployment_id:
                output['DeploymentIdToApply'] = get_deployment(gateway_id, provided_deployment_id)['DeploymentId']
                return output
        
            deployment_items = get_deployments(gateway_id, '500')['Items']
            if len(deployment_items) == 1 and deployment_items[0]['DeploymentId'] == current_deployment_id:
                raise ValueError(f'There are no deployments found to apply in ApiGateway ID: {gateway_id}, '
                                 f'except current deployment ID: {current_deployment_id}')
        
            current_deployment_creation_date = get_deployment(gateway_id, current_deployment_id)['CreatedDate']
            deployment_items.sort(key=lambda x: x['CreatedDate'], reverse=True)
            for item in deployment_items:
                if item['CreatedDate'] < current_deployment_creation_date and item['DeploymentId'] != current_deployment_id:
                    output['DeploymentIdToApply'] = item['DeploymentId']
                    return output
        
            raise ValueError(f'Could not find any existing deployment which has createdDate less than current deployment ID: '
                             f'{current_deployment_id}, with createdDate: {current_deployment_creation_date}')
        
        


  - name: ApplyDeploymentOnStage
    description: Apply the specified or previous deployment to stage
    action: aws:executeScript
    outputs:
      - Name: DeploymentIdNewValue
        Selector: "$.Payload.DeploymentIdNewValue"
        Type: "String"
    inputs:
      Runtime: "python3.7"
      Handler: "update_deployment"
      InputPayload:
        HttpWsApiGwId: '{{ HttpWsApiGwId }}'
        HttpWsStageName: '{{ HttpWsStageName }}'
        HttpWsDeploymentId: '{{ FindPreviousDeploymentIfNotProvided.DeploymentIdToApply }}'
      Script: |-
        import logging
        
        import boto3
        from botocore.config import Config
        
        log = logging.getLogger()
        log.setLevel(logging.DEBUG)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if not response['ResponseMetadata']['HTTPStatusCode'] == 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def update_deployment(events: dict, context: dict) -> dict:
            """
            Apply DeploymentId to provided StageName
            """
            if 'HttpWsApiGwId' not in events:
                raise KeyError('Requires HttpWsApiGwId in events')
        
            if 'HttpWsStageName' not in events:
                raise KeyError('Requires HttpWsStageName in events')
        
            if 'HttpWsDeploymentId' not in events:
                raise KeyError('Requires HttpWsDeploymentId in events')
        
            gateway_id: str = events['HttpWsApiGwId']
            stage_name: str = events['HttpWsStageName']
            deployment_id: str = events['HttpWsDeploymentId']
        
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigatewayv2', config=config)
            response = client.update_stage(
                ApiId=gateway_id,
                StageName=stage_name,
                DeploymentId=deployment_id
            )
            assert_https_status_code_200(response, f'Failed to perform update_stage with ApiId: {gateway_id},'
                                                   f' StageName: {stage_name} and DeploymentId: {deployment_id}')
        
            return {'DeploymentIdNewValue': response['DeploymentId'],
                    'StageName': response['StageName']}
        
        


  - name: OutputRecoveryTime
    description: Calculate execution time
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: recovery_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def recovery_time(events, context):
            return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds
        
        

      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'
	2021-11-06T18:27:49.023000+01:00	YAML	Automation	1	AWSResilienceHub-UpdateHttpWsApiGwVersionSOP_2020-10-26	Active
