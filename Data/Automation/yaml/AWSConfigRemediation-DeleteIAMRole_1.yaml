description: |-
  ### Document name - AWSConfigRemediation-DeleteIamRole

  ## What does this document do?
  This document deletes an AWS Identity and Access Management role (IAM role) using the [DeleteRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteRole.html) API.
  Note: This document does not delete the instance profile associated with the role.
        This document does not delete service linked roles.

  ## Input Parameters
  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  * IAMRoleID: (Required) The id of the AWS IAM role to delete.

  ## Output Parameters
  * DeleteIAMRoleAndVerify.Output: The standard HTTP response from the DeleteRole API.
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - DeleteIAMRoleAndVerify.Output
parameters:
  AutomationAssumeRole:
    type: String
    description: The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: '^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+'
  IAMRoleID:
    type: String
    description: The id of the AWS AWS IAM role to delete.
    allowedPattern: "^AROA[A-Z0-9]+$"
mainSteps:
  - name: GetIAMRoleName
    action: "aws:executeScript"
    description: |-
      ## GetIAMRoleName
      Accepts the AWS IAM role id as an input and gets the name of the AWS IAM role.
      ## outputs
      RoleName: The name of the AWS IAM role.
    isEnd: false
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        RoleId: "{{ IAMRoleID }}"
      Script: |-
        import boto3
        import botocore
        from time import sleep

        THROTTLE_PERIOD = 0.05
        def get_role_name(iam_client, iam_role_id):
            PAGE_SIZE = 1000
            paginator = iam_client.get_paginator("list_roles")
            page_iterator = paginator.paginate(PaginationConfig={"PageSize": PAGE_SIZE})
            for page in page_iterator:
                for role in page["Roles"]:
                    if role["RoleId"] == iam_role_id:
                        return role["RoleName"]
                sleep(THROTTLE_PERIOD)

        def handler(event,context):
            iam_client = boto3.client("iam")
            iam_role_id = event["RoleId"]
            iam_role_name = get_role_name(iam_client, iam_role_id)
            if iam_role_name is not None:
                return {"RoleName": iam_role_name}
            error_message = f"IAM ROLE {iam_role_name} DOES NOT EXIST."
            raise Exception(error_message)
    outputs:
      - Name: RoleName
        Selector: $.Payload.RoleName
        Type: String
  - name: GetInstanceProfilesAndPolicies
    action: "aws:executeScript"
    description: |-
      ## GetInstanceProfilesAndPolicies
      Gets the instance profiles and policies for the given AWS IAM role.
      ## outputs
      InstanceProfileAttachments: The instance profiles associated with the AWS IAM role.
      RoleManagedPolicies: The managed policies attached to the AWS IAM role.
      RoleInlinePolicies: The inline policies attached to the AWS IAM role.
    isEnd: false
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        RoleName: "{{ GetIAMRoleName.RoleName}}"
      Script: |-
        import boto3
        import botocore
        from time import sleep
        THROTTLE_PERIOD = 0.05

        def get_inline_role_policies(iam_client, iam_role_name):
            PAGE_SIZE = 1000
            paginator = iam_client.get_paginator("list_role_policies")
            page_iterator = paginator.paginate(RoleName=iam_role_name, PaginationConfig={"PageSize": PAGE_SIZE})
            policies = []
            for page in page_iterator:
                policy_names = page["PolicyNames"]
                policies.extend(policy_names)
                sleep(THROTTLE_PERIOD)
            return policies

        def get_managed_role_policies(iam_client, iam_role_name):
            PAGE_SIZE = 1000
            paginator = iam_client.get_paginator("list_attached_role_policies")
            page_iterator = paginator.paginate(RoleName=iam_role_name, PaginationConfig={"PageSize": PAGE_SIZE})
            policies = []
            for page in page_iterator:
                for policy in page["AttachedPolicies"]:
                    policy_arn = policy["PolicyArn"]
                    policies.append(policy_arn)
                sleep(THROTTLE_PERIOD)
            return policies

        def get_instance_profile(iam_client, iam_role_name):
            PAGE_SIZE = 1000
            paginator = iam_client.get_paginator("list_instance_profiles_for_role")
            page_iterator = paginator.paginate(RoleName=iam_role_name, PaginationConfig={"PageSize": PAGE_SIZE})
            instance_profiles = []
            for page in page_iterator:
                for instance_profile in page["InstanceProfiles"]:
                    instant_profile_name = instance_profile["InstanceProfileName"]
                    instance_profiles.append(instant_profile_name)
                sleep(THROTTLE_PERIOD)
            return instance_profiles

        def handler(event,context):
            iam_client = boto3.client("iam")
            iam_role_name = event["RoleName"]
            role_inline_policies = get_inline_role_policies(iam_client, iam_role_name)
            role_managed_policies = get_managed_role_policies(iam_client, iam_role_name)
            instance_profile_attachments = get_instance_profile(iam_client,iam_role_name)
            return {
                "role_inline_policies":role_inline_policies,
                "role_managed_policies":role_managed_policies,
                "instance_profile_attachments":instance_profile_attachments
            }
    outputs:
      - Name: RoleInlinePolicies
        Selector: $.Payload.role_inline_policies
        Type: StringList
      - Name: RoleManagedPolicies
        Selector: $.Payload.role_managed_policies
        Type: StringList
      - Name: InstanceProfileAttachments
        Selector: $.Payload.instance_profile_attachments
        Type: StringList
  - name: DeleteInstanceProfilesAndPolicies
    action: "aws:executeScript"
    description: |-
      ## DeleteInstanceProfilesAndPolicies
      Deletes the instance profiles and policies for the given AWS IAM role.
    isEnd: false
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        RoleName: "{{ GetIAMRoleName.RoleName }}"
        InstanceProfileAttachments: "{{ GetInstanceProfilesAndPolicies.InstanceProfileAttachments }}"
        RoleManagedPolicies: "{{ GetInstanceProfilesAndPolicies.RoleManagedPolicies }}"
        RoleInlinePolicies: "{{ GetInstanceProfilesAndPolicies.RoleInlinePolicies }}"
      Script: |-
        import boto3
        import botocore
        from time import sleep
        THROTTLE_PERIOD = 0.05

        def delete_inline_role_policies(iam_client, iam_role_name, role_inline_policies):
            responses = []
            for policy in role_inline_policies:
                response = iam_client.delete_role_policy(RoleName=iam_role_name, PolicyName=policy)
                responses.append(response)
            return responses

        def detach_managed_role_policies(iam_client, iam_role_name, role_managed_policies):
            responses = []
            for policy in role_managed_policies:
                response = iam_client.detach_role_policy(RoleName=iam_role_name, PolicyArn=policy)
                responses.append(response)
            return responses

        def detach_instance_profile (iam_client,iam_role_name, instance_profile_attachments):
            responses = []
            for instantProfileName in instance_profile_attachments:
                response = iam_client.remove_role_from_instance_profile(RoleName=iam_role_name, InstanceProfileName=instantProfileName)
                responses.append(response)
            return responses

        def handler(event,context):
            iam_client = boto3.client("iam")
            iam_role_name = event["RoleName"]
            role_inline_policies = event["RoleInlinePolicies"]
            role_managed_policies = event["RoleManagedPolicies"]
            instance_profile_attachments = event["InstanceProfileAttachments"]
            delete_inline_role_policies(iam_client, iam_role_name, role_inline_policies)
            detach_managed_role_policies(iam_client,iam_role_name,role_managed_policies)
            detach_instance_profile(iam_client,iam_role_name, instance_profile_attachments)

  - name: DeleteIAMRoleAndVerify
    action: "aws:executeScript"
    description: |-
      ## DeleteIAMRoleAndVerify
      Deletes the given AWS IAM role using DeleteRole API and verifies its deletion.      
      ## outputs
      Output: The standard HTTP response from the DeleteRole API.
    isEnd: true
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        RoleName: "{{ GetIAMRoleName.RoleName }}"
      Script: |-
        import boto3
        import botocore
        from time import sleep

        THROTTLE_PERIOD = 0.05

        def delete_iam_role(iam_client,iam_role_name):
            response = iam_client.delete_role(RoleName=iam_role_name)
            return response
            
        def verify_iam_role_deletion(iam_client,iam_role_name):
            try:
                iam_client.get_role(RoleName=iam_role_name)
                error_message = f"VERIFICATION FAILED. IAM ROLE NAME {iam_role_name} NOT DELETED."
                raise Exception(error_message)
            except iam_client.exceptions.NoSuchEntityException:
                return "Verification of 'DeleteIamRole' is successful."

        def handler(event,context):
            iam_client = boto3.client("iam")
            iam_role_name = event["RoleName"]
            response = delete_iam_role(iam_client, iam_role_name)
            output = verify_iam_role_deletion(iam_client, iam_role_name)
            return {
                "output":{
                    "Message":output,
                    "HTTPResponse": response
                }
            }
    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: StringMap

