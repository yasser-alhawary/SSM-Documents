schemaVersion: "0.3"
description: |
  ### Document name - AWSConfigRemediation-EnableCloudFrontAccessLogs

  ## What does this document do?
  This runbook enables access logging on an Amazon CloudFront (CloudFront) distribution you specify using the [UpdateDistribution](https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html) API.

  ## Input Parameters
  * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
  * CloudFrontId: (Required) The ID of the CloudFront distribution you want to enable access logging on.
  * BucketName: (Required) The name of the Amazon Simple Storage Service (Amazon S3) bucket you want to store access logs in. Buckets in the af-south-1, ap-east-1, eu-south-1, and me-south-1 AWS Region are not supported.
  * Prefix: (Optional) An optional string that you want CloudFront to prefix to the access log filenames for your distribution, for example, myprefix/.
  * IncludeCookies: (Required) Set this parameter to 'true', if you want cookies to be included in the access logs.

  ## Output Parameters
  * UpdateDistributionAndVerify.Response: The standard HTTP response from the UpdateDistribution API.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+$
  CloudFrontId:
    type: String
    description: (Required) The ID of the CloudFront distribution you want to enable access logging on.
    allowedPattern: "[A-Z0-9]+"
  BucketName:
    type: String
    description: |
      (Required) The name of the Amazon Simple Storage Service (Amazon S3) bucket you want to store access logs in. Buckets in the af-south-1, ap-east-1, eu-south-1, and me-south-1 AWS Region are not supported.
    allowedPattern: (?=^.{3,63}$)(?!.*[.-]{2})(?!.*[--]{2})(?!^(?:(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\.(?!$)|$)){4}$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  Prefix:
    type: String
    description: (Optional) An optional string that you want CloudFront to prefix to the access log filenames for your distribution, for example, myprefix/.
    allowedPattern: "(.*){1,1024}"
    default: ''
  IncludeCookies:
    type: Boolean
    description: (Required) Set this parameter to 'true', if you want cookies to be included in the access logs.
    allowedValues:
      - True
      - False

outputs:
  - UpdateDistributionAndVerify.Response
mainSteps:
  -
    name: UpdateDistributionAndVerify
    action: aws:executeScript
    description: |
      ## UpdateDistributionAndVerify
      Enables and verifies access logging for the CloudFront distribution you specify in the CloudFrontDistributionId parameter.
      ## Outputs
      * Response: The standard HTTP response from the UpdateDistribution API.
    timeoutSeconds: 600
    isEnd: true
    inputs:
      Runtime: python3.6
      Handler: handler
      InputPayload:
        DistributionId: "{{ CloudFrontId }}"
        BucketName: "{{ BucketName }}"
        Prefix: "{{ Prefix }}"
        IncludeCookies: "{{ IncludeCookies }}"
      Script: |-
        import boto3

        def get_distribution_configuration(cloudfront_client, distribution_id):
            waiter = cloudfront_client.get_waiter('distribution_deployed')
            waiter.wait(Id=distribution_id)
            get_response = cloudfront_client.get_distribution_config(Id=distribution_id)
            return get_response

        def update_distribution_configuration(cloudfront_client, distribution_id, distribution_content, logging_content):
            distribution_content['DistributionConfig']['Logging'] = logging_content
            etag = distribution_content['ETag']
            updated_configuration = distribution_content['DistributionConfig']
            update_distribution_response = cloudfront_client.update_distribution(DistributionConfig=updated_configuration,
                                                                                 Id=distribution_id,
                                                                                 IfMatch=etag)
            return update_distribution_response

        def get_bucket_region(bucket_name):
            s3_client = boto3.client("s3")
            bucket_response = s3_client.get_bucket_location(Bucket=bucket_name)
            bucket_region = bucket_response["LocationConstraint"]
            if bucket_region is None:
                bucket_region = "us-east-1"
            return bucket_region

        def handler(event, context):
            cloudfront_client = boto3.client("cloudfront")
            distribution_id = event["DistributionId"]
            bucket_name = event["BucketName"]
            bucket_region = get_bucket_region(bucket_name)

            if bucket_region in ["af-south-1", "ap-east-1", "eu-south-1", "me-south-1"]:
               raise Exception("CloudFront doesn't deliver access logs to buckets which resides in these region: {}".format(bucket_region))

            logging_content = {
                "Enabled": True,
                "Bucket":  ".".join([bucket_name, "s3", bucket_region, "amazonaws", "com"]),
                "Prefix": event["Prefix"],
                "IncludeCookies": event["IncludeCookies"]
            }
            get_distribution_response = get_distribution_configuration(cloudfront_client, distribution_id)
            update_distribution = update_distribution_configuration(cloudfront_client, distribution_id, get_distribution_response, logging_content)

            # Verification of logging enabled on given Amazon Cloudfront distribution
            verify_response = get_distribution_configuration(cloudfront_client, distribution_id)
            if verify_response['DistributionConfig']['Logging'] == logging_content:
                return {
                    "Message": "Verification of EnableCloudFrontAccessLogs is successful.",
                    "HTTPResponse": update_distribution['ResponseMetadata']
                }
            raise Exception("VERIFICATION OF EnableCloudFrontAccessLogs FAILED.")
    outputs:
      - Name: Response
        Selector: $
        Type: StringMap

