#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
schemaVersion: '0.3'
description: |-
            ## Intent
            'Test app performance and alarm under high CPU load.'

            ## Type
            Test

            ## Risk
            High

            ## Requirements
              * ASG has more than 1 instances
              * Only AmazonLinux instances are supported
              * CPU Alarm is setup for ASG

            ## Permissions required for AutomationAssumeRole
              * ssm:GetParameters
              * ssm:DescribeInstanceInformation
              * ssm:SendCommand
              * ssm:ListCommands
              * ssm:ListCommandInvocations
              * ssm:GetAutomationExecution
              * ssm:StartAutomationExecution
              * cloudwatch:DescribeAlarms
              * cloudwatch:GetMetricStatistics
              * cloudwatch:DescribeAlarmHistory
              * autoscaling:DescribeAutoScalingGroups
              * iam:PassRole (restricted to same role)

            ## Supports Rollback
               Yes.

            ## Cancellation behavior
              Trigger rollback for previous execution.

            ## Inputs
            ### (Required) AutomationAssumeRole:
              * type: String
              * description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf

            ### (Required) AutoScalingGroupName:
              * type: String
              * description: (Required) Name of auto scaling group

            ### (Required) CpuUtilizationAlarmName:
              * type: String
              * description: (Required) ASG CPUUtilization alarm which should be green after test

            ### (Optional) DurationSeconds:
              * type: String
              * description: (Optional) The duration - in seconds - of the CPU stress.
              * allowedPattern: "^[0-9]+$"
              * default: '300'

            ### (Optional) Cpu:
              * type: String
              * description: (Optional) Specify the number of CPU stressors to use (default - 0 which means "all CPUs")
              * default: "0"
              * allowedPattern: "^[0-9]+$"

            ### (Optional) LoadPercent:
              * type: String
              * description: (Optional) Specify the target CPU load percentage. Valid values are between 0 (no load) and 100 (full load) (default - 100)
              * default: "100"
              * allowedPattern: "^(100|[1-9]?[0-9])$"

            ### (Optional) PercentageOfInstances:
              * type: Integer
              * description: (Optional) Percentage of ASG EC2 instances to be impacted, default is 70 percent if not provided
              * default: 70

            ### (Optional) ExpectedRecoveryTime:
              * type: String
              * description: (Optional) Expected ASG EC2 instances recovery time in seconds
              * default: '1'

            ### (Optional) IsRollback:
               * type: String
               * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified.
               * default: 'false'

            ### (Optional) PreviousExecutionId:
               * type: String
               * description: (Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up.
               * default: ''

            ## Details
               * Get healthy ASG EC2 instance ids.
               * Get list of ASG EC2 instance ids which size is based on given percentage of instances should be stressed.
               * Run CPU stress on chosen instances based on previous step for given time duration.
               * Verify cpu utilization alarm is in state 'Alarm' during CPU stress test.
               * Wait for given expected recovery time duration.
               * Verify cpu utilization alarm is in state 'OK' after recovery.
               * Verify stress testing actually happened, by checking EC2 corresponding metric data points.
               * In case of rollback stress testing will be terminated on EC2 machines.

            ## Steps executed in normal flow
              * SelectExecutionMode
              * AssertAlarmToBeGreenBeforeTest
              * GetAsgInstanceIds
              * GetInstancesByPercentage
              * RunCpuStress
              * AssertAlarmToBeRed
              * WaitExpectedRecoveryTime
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * SelectExecutionMode
              * GetInputsFromPreviousExecution
              * AssertAutoScalingGroupName
              * GetPreviousExecutionDetails
              * KillStressCommandOnRollback

            ## Outputs
              None

assumeRole: '{{AutomationAssumeRole}}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf
  AutoScalingGroupName:
    type: String
    description: (Required) Name of auto scaling group
  CpuUtilizationAlarmName:
    type: String
    description: (Required) ASG CPUUtilization alarm which should be green after test
  DurationSeconds:
    type: String
    description: (Optional) The duration - in seconds - of the CPU stress.
    allowedPattern: "^[0-9]+$"
    default: '300'
  Cpu:
    type: String
    description: (Optional) Specify the number of CPU stressors to use (default - 0 which means "all CPUs")
    default: "0"
    allowedPattern: "^[0-9]+$"
  LoadPercent:
    type: String
    description: (Optional) Specify the target CPU load percentage. Valid values are between 0 (no load) and 100 (full load) (default - 100)
    default: "100"
    allowedPattern: "^(100|[1-9]?[0-9])$"
  PercentageOfInstances:
    type: Integer
    description: (Optional) Percentage of ASG EC2 instances to be impacted, default is 70 percent if not provided
    default: 70
  ExpectedRecoveryTime:
    type: String
    description: (Optional) Expected ASG EC2 instances recovery time in seconds
    default: '1'
  IsRollback:
    type: String
    description: (Optional) Provide true to terminate stress testing
    default: 'false'
  PreviousExecutionId:
    type: String
    description: (Optional) Previous execution id for which resources stress testing should be terminated
    default: ''
mainSteps:
  - name: SelectExecutionMode
    description: Check if document should be executed in rollback mode
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: AssertAlarmToBeGreenBeforeTest
          Variable: '{{IsRollback}}'
          StringEquals: 'false'
      Default: GetInputsFromPreviousExecution
  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time.
    action: aws:waitForAwsResourceProperty
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{CpuUtilizationAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: GetAsgInstanceIds
    description: Get all healthy instances in ASG.
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: InstanceIds
        Selector: $.Payload.InstanceIds
        Type: StringList
    inputs:
      Runtime: python3.8
      Handler: get_healthy_instance_ids_in_asg
      InputPayload:
        AutoScalingGroupName: '{{AutoScalingGroupName}}'
      Script: |-
        import logging
        import random
        import time
        from math import ceil
        
        import boto3
        from botocore.config import Config
        
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        
        


        def get_healthy_instance_ids_in_asg(events, context):
            if 'AutoScalingGroupName' not in events:
                raise KeyError('Requires AutoScalingGroupName in events')
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            autoscaling = boto3.client('autoscaling', config=config)
        
            auto_scaling_groups = autoscaling.describe_auto_scaling_groups(
                AutoScalingGroupNames=[
                    events['AutoScalingGroupName']
                ]
            )
        
            # Take all healthy ASG EC2 instances
            asg_healthy_instances = []
            for instance in auto_scaling_groups['AutoScalingGroups'][0]['Instances']:
                if instance['HealthStatus'] == 'Healthy' and instance['LifecycleState'] == 'InService':
                    asg_healthy_instances.append(instance['InstanceId'])
        
            output = {}
            output['InstanceIds'] = asg_healthy_instances
            return output
        
        

  - name: GetInstancesByPercentage
    description: Get instances based on input parameters on which cpu load will be injected.
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: InstanceIds
        Selector: $.Payload.InstanceIds
        Type: StringList
    inputs:
      Runtime: python3.8
      Handler: get_instance_ids_by_percentage
      InputPayload:
        InstanceIds: '{{GetAsgInstanceIds.InstanceIds}}'
        Percentage: '{{PercentageOfInstances}}'
      Script: |-
        import logging
        import random
        import time
        from math import ceil
        
        import boto3
        from botocore.config import Config
        
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        
        


        def get_instance_ids_by_percentage(events, context):
            if 'InstanceIds' not in events or 'Percentage' not in events:
                raise KeyError('Requires InstanceIds and Percentage in events')
            instanceIds = events['InstanceIds']
            percentage = events['Percentage']
            instance_count = len(instanceIds)
            output = {}
            output['InstanceIds'] = []
            if instance_count < 1:
                raise Exception('No given EC2 instances')
            if percentage < 1:
                raise Exception('Given percentage should not be lower than 1%')
            instance_count = ceil(instance_count / 100 * percentage)
            for i in range(instance_count):
                output['InstanceIds'].append(instanceIds[i])
            return output
        
        

  - name: RunCpuStress
    description: Run FIS command document to inject cpu stress.
    action: aws:runCommand
    maxAttempts: 3
    onFailure: 'step:TriggerRollback'
    onCancel: 'step:TriggerRollback'
    inputs:
      DocumentName: AWSFIS-Run-CPU-Stress
      InstanceIds:
        - '{{GetInstancesByPercentage.InstanceIds}}'
      Parameters:
        LoadPercent: '{{LoadPercent}}'
        CPU: '{{Cpu}}'
        DurationSeconds: '{{DurationSeconds}}'
  - name: AssertAlarmToBeRed
    description: Wait for cpu alarm to be red after cpu injection.
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.8
      Handler: verify_alarm_triggered
      InputPayload:
        AlarmName: '{{CpuUtilizationAlarmName}}'
        DurationInSeconds: '{{DurationSeconds}}'
      Script: |-
        import boto3
        import logging
        import time
        from botocore.config import Config
        from datetime import datetime, timedelta
        from typing import Any, Callable, Iterator, List
        
        boto3_config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
        
        PUT_METRIC_ALARM_PARAMS = ['AlarmName', 'AlarmDescription', 'ActionsEnabled', 'OKActions',
                                   'AlarmActions', 'InsufficientDataActions', 'MetricName', 'Namespace', 'Statistic',
                                   'ExtendedStatistic',
                                   'Dimensions', 'Period', 'Unit', 'EvaluationPeriods', 'DatapointsToAlarm',
                                   'Threshold', 'ComparisonOperator', 'TreatMissingData', 'EvaluateLowSampleCountPercentile',
                                   'Metrics', 'Tags', 'ThresholdMetricId']
        
        


        def verify_alarm_triggered(events, context):
            """
            Verify if alarm triggered
            """
            if 'AlarmName' not in events or ('DurationInMinutes' not in events and 'DurationInSeconds' not in events):
                raise KeyError('Requires AlarmName and either DurationInMinutes or DurationInSeconds in events')
        
            cw = boto3.client('cloudwatch', config=boto3_config)
        
            if 'DurationInMinutes' in events:
                start_date = datetime.now() - timedelta(minutes=int(events['DurationInMinutes']))
            else:
                start_date = datetime.now() - timedelta(seconds=int(events['DurationInSeconds']))
        
            response = cw.describe_alarm_history(
                AlarmName=events['AlarmName'],
                HistoryItemType='StateUpdate',
                MaxRecords=5,
                ScanBy='TimestampDescending',
                StartDate=start_date)
        
            for alarm_history_item in response['AlarmHistoryItems']:
                if alarm_history_item['HistorySummary'] == "Alarm updated from OK to ALARM":
                    return
        
            raise Exception('Alarm was not triggered')
        
        

  - name: WaitExpectedRecoveryTime
    description: Wait for expected recovery time.
    action: 'aws:sleep'
    onFailure: Abort
    inputs:
      Duration: 'PT{{ExpectedRecoveryTime}}S'
  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete.
    action: aws:assertAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 600
    onFailure: Abort
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{CpuUtilizationAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
    isEnd: true
  - name: GetInputsFromPreviousExecution
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: AutoScalingGroupName
        Selector: $.Payload.AutoScalingGroupName[0]
        Type: String
    inputs:
      Runtime: python3.8
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_inputs_from_ssm_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events:
                raise KeyError('Requires ExecutionId')
        
            if not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            response_parameters = response['AutomationExecution']['Parameters']
            # TODO DIG-853
            for parameter in response_parameters:
                output[parameter] = response_parameters[parameter]
        
            return output
        
        

  - name: AssertAutoScalingGroupName
    description: Validate that rollback is executed with the same input
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetPreviousExecutionDetails
          Variable: "{{ GetInputsFromPreviousExecution.AutoScalingGroupName }}"
          StringEquals: '{{ AutoScalingGroupName }}'
    isEnd: true
  - name: GetPreviousExecutionDetails
    description: Get instance ids from previous execution details for rollback.
    action: 'aws:executeScript'
    maxAttempts: 2
    onFailure: Abort
    outputs:
    - Name: InstanceIds
      Selector: $.Payload.InstanceIds
      Type: StringList
    inputs:
      Runtime: python3.8
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'GetInstancesByPercentage'
        ResponseField: 'InstanceIds'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_output_from_ssm_step_execution(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:
                raise KeyError('Requires ExecutionId, StepName and ResponseField in events')
        
            ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            for step in ssm_response['AutomationExecution']['StepExecutions']:
                if step['StepName'] == events['StepName']:
                    response_fields = events['ResponseField'].split(',')
                    output = {}
                    for response_field in response_fields:
                        if response_field in step['Outputs']:
                            # Sets values in string type regardless of what is the original value type. In order to set
                            # values with original types please use 'get_typed_output_from_ssm_step_execution'.
                            output[response_field] = step['Outputs'][response_field]
                        else:
                            """
                            By default SSM ignores empty values when encodes API outputs to JSON. It may result in
                            a situation when an empty value is a valid value but step output completely misses it.
                            Usually happens with SQS queue policies, default policy is returned by API as an empty value
                            and executeApi step output ignores it. As a result, further steps in rollback execution will fail.
                            Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string
                            represents a default sqs policy
                            """
                            output[response_field] = ['']
                    return output
        
            # Could not find step name
            raise Exception('Can not find step name % in ssm execution response', events['StepName'])
        
        

  - name: KillStressCommandOnRollback
    description: Kill stress ng command running on ec2 instances during rollback to stop cpu injection.
    action: 'aws:executeAutomation'
    onFailure: Abort
    inputs:
      DocumentName: AWSResilienceHub-KillStressOnHealthyInstances_2020-07-28
      RuntimeParameters:
        AutomationAssumeRole: '{{AutomationAssumeRole}}'
        AutoScalingGroupName: '{{AutoScalingGroupName}}'
        InstanceIds: '{{GetPreviousExecutionDetails.InstanceIds}}'
    isEnd: true
  - name: TriggerRollback
    description: This step is executed when ssm document is cancelled while it was in progress and starts a new execution of document in rollback mode to rollback the changes made as part of normal execution
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.8
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def start_rollback_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
        
            # Get parameters for current execution and add IsRollback and PreviousExecutionId
            response_parameters = response['AutomationExecution']['Parameters']
            response_parameters['IsRollback'] = ['true']
            response_parameters['PreviousExecutionId'] = [events['ExecutionId']]
        
            rollback_execution_response = ssm.start_automation_execution(
                DocumentName=response['AutomationExecution']['DocumentName'],
                DocumentVersion=response['AutomationExecution']['DocumentVersion'],
                Parameters=response_parameters
            )
            output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']
            return output
        
        

    isEnd: true

