#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-ChangeRestApiGwQuotaLimitSOP_2020-10-26

            ## Intent
            Change quota limit and period of the REST API Gateway

            ## Type
            SOP

            ## Risk
            Medium

            ## Requirements
              * REST API Gateway

            ## Permissions required for AutomationAssumeRole
              * apigateway:GET
              * apigateway:POST
              * apigateway:PATCH

            ## Supports Rollback
            No

            ## Cancellation behavior
            Fail

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) RestApiGwUsagePlanId
              * type: String
              * description: The Id of the usage plan to be modified

            ### (Required) RestApiGwQuotaLimit
              * type: Integer
              * description: New limit in requests/period

            ### (Required) RestApiGwQuotaPeriod
              * type: String
              * description: Period for quota limit. DAY/WEEK/MONTH

            ### (Required) ForceExecution
              * type: String
              * description: By default the document raises error if the quota limit is changed by more than 50%. If this option is True, skips this check. True of False.

            ## Details
            The document changes quota limit and period of the REST API Gateway. It also validates the requested values
            and raises error if quota limit is going to be increased/decreased by more than 50%. Users have an option
            to skip this validation using `ForceExecution` parameter or execute the current SOP several times with
            smaller increments.

            ## Steps executed in normal flow
              * RecordStartTime
              * CheckIfForceExecutionIsSet
              * ValidateInputs
              * SetQuotaConfiguration
              * OutputRecoveryTime

            ## Outputs
            ### SetQuotaConfiguration.RestApiGwQuotaLimitNewValue
              * type: Integer
              * description: Quota limit value after update

            ### SetQuotaConfiguration.RestApiGwQuotaPeriodNewValue
              * type: String
              * description: Quota limit period after update. DAY/WEEK/MONTH

            ### ValidateInputs.RestApiGwQuotaLimitOriginalValue
              * type: Integer
              * description: Quota limit value before update

            ### ValidateInputs.RestApiGwQuotaPeriodOriginalValue
              * type: String
              * description: Quota limit period before update. DAY/WEEK/MONTH

            ### ValidateInputs.RestApiGwQuotaLimit
              * type: Integer
              * description: Requested new quota limit value

            ### ValidateInputs.RestApiGwQuotaPeriod
              * type: Integer
              * description: Requested new quota limit period. DAY/WEEK/MONTH

            ### OutputRecoveryTime.RecoveryTime
              * type: Integer
              * description: SOP execution time in seconds

schemaVersion: "0.3"
assumeRole: "{{AutomationAssumeRole}}"
parameters:
  RestApiGwUsagePlanId:
    type: String
    description: (Required) The Id of the usage plan to be modified.
  RestApiGwQuotaLimit:
    type: Integer
    description: (Required) New limit in requests/period
  RestApiGwQuotaPeriod:
    type: String
    description: (Required) DAY/WEEK/MONTH
  ForceExecution:
    type: String
    description: (Required) True/False
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
outputs:
  - "SetQuotaConfiguration.RestApiGwQuotaLimitNewValue"
  - "SetQuotaConfiguration.RestApiGwQuotaPeriodNewValue"
  - "ValidateInputs.RestApiGwQuotaLimitOriginalValue"
  - "ValidateInputs.RestApiGwQuotaPeriodOriginalValue"
  - "ValidateInputs.RestApiGwQuotaLimit"
  - "ValidateInputs.RestApiGwQuotaPeriod"
  - "OutputRecoveryTime.RecoveryTime"
mainSteps:
  - name: RecordStartTime
    description: Start recording execution time
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def start_time(events, context):
            return datetime.now(timezone.utc).isoformat()
        
        

  - name: CheckIfForceExecutionIsSet
    description: Check if `ForceExecution` option is true and changes by more than 50% are allowed
    action: aws:branch
    inputs:
      Choices:
        - NextStep: SetQuotaConfiguration
          Variable: "{{ForceExecution}}"
          StringEquals: "True"
        - NextStep: ValidateInputs
          Variable: "{{ForceExecution}}"
          StringEquals: "False"
      Default:
        SetQuotaConfiguration
  - name: ValidateInputs
    description: |-
      Get current quota limits for given Usage Plan of REST API GW and raise error if requested increase/decrease is by
      more than 50% of original values
    action: aws:executeScript
    outputs:
      - Name: Result
        Selector: "$.Payload.Result"
        Type: "String"
      - Name: RestApiGwQuotaLimitOriginalValue
        Selector: "$.Payload.OriginalLimit"
        Type: "Integer"
      - Name: RestApiGwQuotaPeriodOriginalValue
        Selector: "$.Payload.OriginalPeriod"
        Type: "String"
      - Name: RestApiGwQuotaLimit
        Selector: "$.Payload.NewLimit"
        Type: "Integer"
      - Name: RestApiGwQuotaPeriod
        Selector: "$.Payload.NewPeriod"
        Type: "String"
    inputs:
      Runtime: "python3.7"
      Handler: "check_limit_and_period"
      InputPayload:
        RestApiGwUsagePlanId: '{{ RestApiGwUsagePlanId }}'
        RestApiGwQuotaLimit: "{{ RestApiGwQuotaLimit }}"
        RestApiGwQuotaPeriod: "{{ RestApiGwQuotaPeriod }}"
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        

        def check_limit_and_period(events, context):
            """
            Check if new values do not change usage plan by more than 50%
            :return: Evaluation result, old and new limits and periods
            """
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId  in events')
            if 'RestApiGwQuotaLimit' not in events:
                raise KeyError('Requires RestApiGwQuotaLimit  in events')
            if 'RestApiGwQuotaPeriod' not in events:
                raise KeyError('Requires RestApiGwQuotaPeriod  in events')
        
            usage_plan_id = events['RestApiGwUsagePlanId']
            new_usage_plan_limit = events['RestApiGwQuotaLimit']
            new_usage_plan_period = events['RestApiGwQuotaPeriod']
        
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            apigw_client = boto3.client('apigateway', config=config)
        
            log.debug(f'Getting limit and period from Plan {usage_plan_id} ...')
            apigw_usage_plan = apigw_client.get_usage_plan(usagePlanId=usage_plan_id)
            if apigw_usage_plan['ResponseMetadata']['HTTPStatusCode'] != 200:
                log.error(f'Failed to get usage plan with id {usage_plan_id}, response is {apigw_usage_plan}')
                raise ValueError('Failed to get usage plan limit and period')
        
            current_usage_plan_limit = apigw_usage_plan["quota"]["limit"]
            current_usage_plan_period = apigw_usage_plan["quota"]["period"]
            log.debug(f'The converted period is {current_usage_plan_period}')
            choices = {'DAY': 1, 'WEEK': 7, 'MONTH': 30}
            divider_current = choices[current_usage_plan_period]
            divider_new = choices[new_usage_plan_period]
        
            converted_current_limit = int(apigw_usage_plan["quota"]["limit"]) / divider_current
            converted_new_limit = int(new_usage_plan_limit) / divider_new
        
            evaluation_message = "The converted current/new limits are " + str(converted_current_limit) + """/
                                 """ + str(converted_new_limit)
        
            log.debug(evaluation_message)
        
            if abs(converted_current_limit - converted_new_limit) > converted_current_limit * 0.5:
                result = 'warning'
                exception = """Warning: The quota is going to be increased on more than 50%.
                            Please use smaller increments or use ForceExecution=True
                            parameter to disable validation. """ + evaluation_message
                raise AssertionError(exception)
            else:
                log.debug('Info: The quota is going to be increased not more than 50%')
                result = 'ok'
        
            return {"Result": result,
                    "OriginalLimit": current_usage_plan_limit,
                    "OriginalPeriod": current_usage_plan_period,
                    "NewLimit": new_usage_plan_limit,
                    "NewPeriod": new_usage_plan_period}
        
        

    nextStep: SetQuotaConfiguration
  - name: SetQuotaConfiguration
    description: Update quota limits for given Usage Plan of REST API GW
    action: aws:executeScript
    outputs:
      - Name: RestApiGwQuotaLimitNewValue
        Selector: "$.Payload.Limit"
        Type: "Integer"
      - Name: RestApiGwQuotaPeriodNewValue
        Selector: "$.Payload.Period"
        Type: "String"
    inputs:
      Runtime: "python3.7"
      Handler: "set_limit_and_period"
      InputPayload:
        RestApiGwUsagePlanId: '{{ RestApiGwUsagePlanId }}'
        RestApiGwQuotaLimit: "{{ RestApiGwQuotaLimit }}"
        RestApiGwQuotaPeriod: "{{ RestApiGwQuotaPeriod }}"
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        

        def assert_https_status_code_200(response: dict, error_message: str) -> None:
            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
                raise ValueError(f'{error_message} Response is: {response}')
        
        

        def get_throttling_config(events: dict, context: dict) -> dict:
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId in events')
        
            if 'RestApiGwStageName' in events and events['RestApiGwStageName']:
                if 'RestApiGwId' not in events:
                    raise KeyError('Requires RestApiGwId in events')
                if not events['RestApiGwId']:
                    raise KeyError('RestApiGwId should not be empty')
        
            usage_plan_id: str = events['RestApiGwUsagePlanId']
            gateway_id: str = events.get('RestApiGwId')
            stage_name: str = events.get('RestApiGwStageName')
            resource_path: str = events.get('RestApiGwResourcePath', '*')
            http_method: str = events.get('RestApiGwHttpMethod', '*')
        
            # Need to have it here for rollback case to overcame issue DIG-853 with get_inputs_from_ssm_execution
            if (stage_name and stage_name.startswith('{{')) and (gateway_id and gateway_id.startswith('{{')):
                gateway_id = stage_name = None
            resource_path = '*' if resource_path.startswith('{{') else resource_path
            http_method = '*' if http_method.startswith('{{') else http_method
        
            config: object = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            client = boto3.client('apigateway', config=config)
            usage_plan = client.get_usage_plan(usagePlanId=usage_plan_id)
            assert_https_status_code_200(usage_plan, f'Failed to get usage plan with id {usage_plan_id}')
        
            if stage_name:
                stage_found = False
                for stage in usage_plan['apiStages']:
                    if stage['apiId'] == gateway_id and stage['stage'] == stage_name:
                        stage_found = True
                        if 'throttle' in stage and f'{resource_path}/{http_method}' in stage['throttle']:
                            rate_limit: float = stage['throttle'][f'{resource_path}/{http_method}']['rateLimit']
                            burst_limit: int = stage['throttle'][f'{resource_path}/{http_method}']['burstLimit']
                        else:
                            rate_limit: float = usage_plan['throttle']['rateLimit']
                            burst_limit: int = usage_plan['throttle']['burstLimit']
                if not stage_found:
                    raise KeyError(f'Stage name {stage_name} not found in get_usage_plan response: {usage_plan}')
            else:
                rate_limit: float = usage_plan['throttle']['rateLimit']
                burst_limit: int = usage_plan['throttle']['burstLimit']
        
            return {'RateLimit': int(rate_limit),
                    'BurstLimit': burst_limit,
                    'QuotaLimit': usage_plan['quota']['limit'],
                    'QuotaPeriod': usage_plan['quota']['period']}
        
        

        def wait_limit_and_period_updated(events, context):
            expected_quota_limit: int = int(events['RestApiGwQuotaLimit'])
            expected_quota_period: str = events['RestApiGwQuotaPeriod']
            max_retries: int = events.get('MaxRetries', 40)
            timeout: int = events.get('Timeout', 15)
            max_timeout = max_retries * timeout
            while max_retries > 0:
                actual_throttling_config = get_throttling_config(events, None)
                actual_quota_limit = actual_throttling_config['QuotaLimit']
                actual_quota_period = actual_throttling_config['QuotaPeriod']
                if actual_quota_limit == expected_quota_limit and actual_quota_period == expected_quota_period:
                    log.info('Quota limit and period updated')
                    return
                log.info(f'Waiting for expected values: '
                         f'[QuotaLimit: {expected_quota_limit}, QuotaPeriod: {expected_quota_period}], '
                         f'actual values: [QuotaLimit: {actual_quota_limit}, QuotaPeriod: {actual_quota_period}]')
                max_retries -= 1
                time.sleep(timeout)
        
            raise TimeoutError(f'Error to wait for updated values of QuotaLimit and QuotaPeriod. '
                               f'Expected values: [QuotaLimit: {expected_quota_limit}, QuotaPeriod: {expected_quota_period}]. '
                               f'Actual values: [QuotaLimit: {actual_quota_limit}, QuotaPeriod: {actual_quota_period}] '
                               f'Maximum timeout {max_timeout} seconds exceeded!')
        
        

        def set_limit_and_period(events, context):
            """
            Set usage plan limit and period
            :return: New limit and period
            """
            if 'RestApiGwUsagePlanId' not in events:
                raise KeyError('Requires RestApiGwUsagePlanId  in events')
            if 'RestApiGwQuotaLimit' not in events:
                raise KeyError('Requires RestApiGwQuotaLimit  in events')
            if 'RestApiGwQuotaPeriod' not in events:
                raise KeyError('Requires RestApiGwQuotaPeriod  in events')
        
            usage_plan_id = events['RestApiGwUsagePlanId']
            new_usage_plan_limit = events['RestApiGwQuotaLimit']
            new_usage_plan_period = events['RestApiGwQuotaPeriod']
        
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            apigw_client = boto3.client('apigateway', config=config)
        
            apigw_usage_plan = apigw_client.update_usage_plan(
                usagePlanId=usage_plan_id,
                patchOperations=[
                    {
                        'op': 'replace',
                        'path': '/quota/limit',
                        'value': str(new_usage_plan_limit)
                    },
                    {
                        'op': 'replace',
                        'path': '/quota/period',
                        'value': new_usage_plan_period
                    }
                ])
            log.debug(f'The response from the API : {apigw_usage_plan}')
            if apigw_usage_plan['ResponseMetadata']['HTTPStatusCode'] != 200:
                log.error(f'Failed to update usage plan with id {usage_plan_id}, response is {apigw_usage_plan}')
                raise ValueError('Failed to update usage plan limit and period')
        
            wait_limit_and_period_updated(events, None)
        
            return {"Limit": apigw_usage_plan["quota"]["limit"],
                    "Period": apigw_usage_plan["quota"]["period"]}
        
        

  - name: OutputRecoveryTime
    description: Calculate execution time
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: recovery_time
      Script: |-
        import boto3
        import logging
        from datetime import datetime, timezone
        import time
        
        from botocore.exceptions import ClientError
        from dateutil import parser
        
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        
        

        def recovery_time(events, context):
            return (datetime.now(timezone.utc) - parser.parse(events['StartTime'])).seconds
        
        

      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'

