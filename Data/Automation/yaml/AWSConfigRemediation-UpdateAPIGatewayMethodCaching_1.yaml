description: |
  ### Document name - AWSConfigRemediation-UpdateAPIGatewayMethodCaching

  ## What does this document do?
  This runbook updates the cache method setting for Amazon API Gateway Stage using the [UpdateStage](https://docs.aws.amazon.com/apigateway/api-reference/link-relation/stage-update/) API.

  ## Input Parameters
  * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
  * StageArn: (Required) The Amazon API Gateway Stage ARN for the `REST` API.
  * CachingAuthorizedMethods: (Required) The methods authorized to have caching enabled. The list must be some combination of `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, and `PUT`. Caching is enabled for selected methods and disabled for non-selected methods. Caching is enabled for all methods if `ANY` is selected and is disabled for all methods if `NONE` is selected.

  ## Output Parameters
  * UpdateApiGatewayMethodCacheAndVerify.Output: The standard HTTP response from the UpdateStage API or script response.
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - UpdateApiGatewayMethodCacheAndVerify.Output
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@/-]+$
  CachingAuthorizedMethods:
    type: StringList
    description: (Required) The methods authorized to have caching enabled. The list must be some combination of `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, and `PUT`. Caching is enabled for selected methods and disabled for non-selected methods. Caching is enabled for all methods if `ANY` is selected and is disabled for all methods if `NONE` is selected.
    allowedValues: ["ANY", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "NONE"]
    default: ["GET"]
  StageArn:
    type: String
    description: (Required) The Amazon API Gateway Stage ARN for the `REST` API.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:apigateway:[a-z0-9-]+::/restapis/[a-z0-9]+/stages/[a-zA-Z0-9_-]{1,128}$
mainSteps:
  - name: UpdateApiGatewayMethodCacheAndVerify
    action: "aws:executeScript"
    timeoutSeconds: 600
    isEnd: true
    description: |
      ## UpdateApiGatewayMethodCacheAndVerify
      Accepts the stage resource ID as input, updates cache method setting for Amazon API Gateway Stage using the UpdateStage API, and verifies the update.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        StageArn: "{{ StageArn }}"
        AuthorizedMethods:  "{{ CachingAuthorizedMethods }}"
      Script: |-
        import boto3
        import botocore
        import re
        

        def get_caching_authorized_list(method_list):
            none_method = "false"
            authorized_list = []
            
            # Method ANY will implicitly include all the methods.
            any_method_list = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "*"]
            if "ANY" in method_list:
                authorized_list = any_method_list
            elif "NONE" in method_list:
                authorized_list = []
                none_method = "true"
            else:
                authorized_list += method_list

            return authorized_list, none_method

        def add_method_settings(method, patch_operations, value):
            temp_dict=dict()
            temp_dict["op"] = "replace"
            temp_dict["path"] = "/" + method + "/caching/enabled"
            temp_dict["value"] = value
            patch_operations.append(temp_dict)

        def verify_method_settings_cache(rest_api_id, stage_name, method_list, apigateway_client):
            update_fail_list = []
            authorized_list, none_method = get_caching_authorized_list(method_list)

            response = apigateway_client.get_stage(restApiId=rest_api_id, stageName=stage_name)

            for method in response["methodSettings"]:
                if response["methodSettings"][method]["cachingEnabled"] and method.split("/")[1] not in authorized_list:
                    if (method != "*") or (method == "*" and none_method == "true"):
                        update_fail_list.append(method)
                elif not response["methodSettings"][method]["cachingEnabled"] and method.split("/")[1] in authorized_list:
                    update_fail_list.append(method)
            return update_fail_list

        def get_method_settings_cache_details(rest_api_id, stage_name, method_list, apigateway_client):
            patch_operations = []
            authorized_list, none_method = get_caching_authorized_list(method_list)

            response = apigateway_client.get_stage(restApiId=rest_api_id, stageName=stage_name)

            for method in response["methodSettings"]:
                if response["methodSettings"][method]["cachingEnabled"] and method.split("/")[1] not in authorized_list:
                    if (method != "*") or (method == "*" and none_method == "true"):
                        add_method_settings(method, patch_operations, "false")
                elif not response["methodSettings"][method]["cachingEnabled"] and method.split("/")[1] in authorized_list:
                    add_method_settings(method, patch_operations, "true")
            return patch_operations

        def handler(event, context):
            apigateway_client = boto3.client("apigateway")
            stage_id = event["StageArn"]
            authorized_list = event["AuthorizedMethods"]

            rest_api_id = ""
            patch_operations = []
            update_stage_response = dict()
            update_stage_response["ResponseMetadata"] = ""

            rest_api_arn = stage_id
            rest_api_arn_pattern = "^arn:.*:/restapis/(.*)/stages/(.*)"
            rest_api_match = re.match(rest_api_arn_pattern, rest_api_arn)
            if not rest_api_match:
                raise Exception("GIVEN AMAZON API GATEWAY STAGE ID IS NOT ASSOCIATED WITH ANY REST API ID.")
            rest_api_id = rest_api_match.groups()[0]
            stage_name = rest_api_match.groups()[1]

            # Enables cache method setting for the specified Amazon API Gateway stage.
            patch_operations = get_method_settings_cache_details(rest_api_id, stage_name, authorized_list, apigateway_client)

            if patch_operations:
                update_stage_response = apigateway_client.update_stage(stageName=stage_name, restApiId=rest_api_id, patchOperations=patch_operations)
            else:
               return {
                   "output": {
                       "Message": f"No caching update for API Gateway method(s)."
                       }
                   }

            # Verifies that the stage method caching enabled.
            update_fail_list = verify_method_settings_cache(rest_api_id, stage_name, authorized_list, apigateway_client)
            if update_fail_list:
                error_message = f"VERIFICATION FAILED. API GATEWAY STAGE {stage_name} CACHING NOT UPDATED FOR METHOD(S) {update_fail_list}."
                raise Exception(error_message)
            return {
                "output": {
                    "Message": f"Verification of API Gateway Stage caching updated for the {authorized_list} method(s) is successful.",
                    "HTTPResponse": update_stage_response["ResponseMetadata"]
                    }
                }

    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: StringMap
