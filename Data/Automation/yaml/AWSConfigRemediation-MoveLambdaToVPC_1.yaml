schemaVersion: "0.3"
description: |
   ### Document name - AWSConfigRemediation-MoveLambdaToVPC

   ## What does this document do?
   This document moves the given AWS Lambda function to the user specified Amazon Virtual Private Cloud (VPC) using the 
   [UpdateFunctionConfiguration](https://docs.aws.amazon.com/lambda/latest/dg/API_UpdateFunctionConfiguration.html) API.

   ## Input Parameters
   * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
   * FunctionName: (Required) The AWS Lambda function name.
   * SubnetIds: (Required) The Amazon VPC subnet ids.
   * SecurityGroupIds: (Required) The Amazon EC2 security group ids.

   ## Output Parameters
   * UpdateFunctionVPCConfiguration.Response: The standard HTTP response from the UpdateFunctionConfiguration API call.

assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+
  FunctionName:
    type: String
    description: (Required) The AWS Lambda function name.
    allowedPattern: "[a-zA-Z0-9-_]*$"
  SubnetIds:
    type: StringList
    description: (Required) The Amazon VPC subnet ids.
    allowedPattern: "[a-z0-9-,;]*"
  SecurityGroupIds:
    type: StringList
    description: (Required) The Amazon EC2 security group ids.
    allowedPattern: "[a-z0-9-,;]*"

outputs:
  - UpdateFunctionVPCConfiguration.Response
mainSteps:
  -
    name: UpdateFunctionVPCConfiguration
    action: "aws:executeAwsApi"
    description: |
      ## UpdateFunctionVPCConfiguration
      Makes UpdateFunctionConfiguration API call using AWS Lambda function name to update Amazon VPC Configuration i.e, SubnetIds and SecurityGroupIds.
      ## Outputs
      * Response: The standard response from the UpdateFunctionConfiguration API call.
    timeoutSeconds: 600
    isEnd: false
    inputs:
      Service: lambda
      Api: UpdateFunctionConfiguration
      FunctionName: "{{FunctionName}}"
      VpcConfig:
        SecurityGroupIds: "{{ SecurityGroupIds }}"
        SubnetIds: "{{ SubnetIds }}"
    outputs:
      - Name: Response
        Selector: $
        Type: StringMap
  -
    name: VerifyFunctionUpdateStatus
    action: "aws:waitForAwsResourceProperty"
    timeoutSeconds: 600
    isEnd: false
    description: |
      ## VerifyFunctionUpdateStatus
      Waits for the given AWS Lambda function last update status set to be "Successful".
    inputs:
      Service: lambda
      Api: GetFunction
      FunctionName: "{{FunctionName}}"
      PropertySelector: "$.Configuration.LastUpdateStatus"
      DesiredValues:
        - "Successful"

  - name: VerifyLambdaVPCConfiguration
    action: "aws:executeScript"
    description: |
      ## VerifyLambdaVPCConfiguration
      Verifies the given AWS Lambda function VPC configuration.
      ## Outputs
      * Output: The standard HTTP response from the GetFunctionConfiguration API call.
    isEnd: true
    timeoutSeconds: 600
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        FunctionName: "{{ FunctionName }}"
        SecurityGroupIds: "{{ SecurityGroupIds }}"
        SubnetIds: "{{ SubnetIds }}"
      Script: |-
        import boto3
        def verifySecurityGroups(lambda_config_details, security_group_ids):
          for security_group in security_group_ids:
            if security_group not in lambda_config_details['VpcConfig']['SecurityGroupIds']:
              return False
          return True

        def verifySubnetIds(lambda_config_details, subnet_ids):
          for subnet_id in subnet_ids:
            if subnet_id not in lambda_config_details['VpcConfig']['SubnetIds']:
              return False
          return True

        def handler(event, context):
          lambda_client = boto3.client("lambda")
          function_name = event["FunctionName"]
          security_group_ids = event["SecurityGroupIds"]
          subnet_ids = event["SubnetIds"]
          lambda_config_details = lambda_client.get_function_configuration(FunctionName=function_name)
          if verifySecurityGroups(lambda_config_details,security_group_ids) and verifySubnetIds(lambda_config_details,subnet_ids):
            return {
                "output": {
                    "Message": "Verification of update Amazon VPC configuration for AWS Lambda function {} is successful.".format(function_name),
                    "HTTPResponse": lambda_config_details['ResponseMetadata']
                }
              }
          raise Exception("VERIFICATION FAILED. UPDATE AMAZON VPC CONFIGURATION FOR AWS LAMBDA FUNCTION {} IS FAILED".format(function_name))         
    outputs:
      - Name: Output
        Selector: $.Payload.output
        Type: StringMap
