description: "Delete EBS Volume snapshots"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  VolumeId:
    type: "String"
    description: "(Required) The volume identifier to delete snapshots for."
  RetentionCount:
    type: "String"
    description: "(Optional) Number of snapshots to keep for the volume.  Either RetentionCount
       or RetentionDays should be mentioned, not both."
    default: "10"
  RetentionDays:
    type: "String"
    description: "(Optional) Number of days to keep snapshots for the volume. Either
       RetentionCount or RetentionDays should be mentioned, not both"
    default: ""
  LambdaAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role that allows Lambda created by Automation
       to perform the actions on your behalf. If not specified a transient role will
       be created to execute the Lambda function."
    default: ""
  AutomationAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role that allows Automation to perform
       the actions on your behalf."
    default: ""
mainSteps:
- name: "createDocumentStack"
  action: "aws:createStack"
  inputs:
    Capabilities:
    - "CAPABILITY_IAM"
    StackName: "deleteVolumeSnapshotsLambdaStack{{automation:EXECUTION_ID}}"
    Parameters:
    - ParameterKey: "LambdaRoleArn"
      ParameterValue: "{{LambdaAssumeRole}}"
    - ParameterKey: "LambdaName"
      ParameterValue: "DeleteVolumeSnapshotsLambda-{{automation:EXECUTION_ID}}"
    TemplateBody: "AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  LambdaAssumeRoleNotSpecified:

          Fn::Or:
    - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - ''

          - Fn::Equals:
      - {Ref: LambdaRoleArn}
      - undefined
Parameters:

        LambdaName: {Description: 'The lambda function name

      ', Type: String}

        LambdaRoleArn: {Default: '', Description: 'The ARN of the role that allows
       Lambda
      created by Automation to perform the action on your behalf

      
      ', Type: String}
Resources:
  DeleteSnapshotsLambda:
    Properties:

            Code: {ZipFile: "#
# Copyright 2018 Amazon.com, Inc. or its affiliates.
       All
           Rights Reserved.
#
# Permission is hereby granted,
       free of charge, to
           any person obtaining a copy of this
#
       software and associated documentation
           files (the "Software
      "), to deal in the Software
# without restriction,
           including
       without limitation the rights to use, copy, modify,
# merge,
       
          publish, distribute, sublicense, and/or sell copies of the Software,
       and
           to
# permit persons to whom the Software is furnished
       to do so.
#

          # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
       WARRANTY OF ANY KIND, EXPRESS
           OR IMPLIED,
# INCLUDING BUT
       NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           FITNESS
       FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  
               THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
       OR
           OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT,
       TORT OR OTHERWISE,
           ARISING FROM, OUT OF OR IN CONNECTION WITH
       THE
# SOFTWARE OR THE USE
           OR OTHER DEALINGS IN THE SOFTWARE.
      n#

import boto3
import time
from
           datetime import datetime,
       timedelta, tzinfo

ZERO = timedelta(0)


          
class UTC(tzinfo):
      n
tdef utcoffset(self, dt):
ttreturn ZERO

t
          def
       tzname(self, dt):
ttreturn "UTC"

tdef dst(self, dt):
      ntt
          return ZERO


def get_volume_snapshots(client, volume_id):
      ntargs =
           {
tt"Filters": [
ttt{
t
      ttt"Name": "volume-id",
tt
          tt"Values
      ": [volume_id]},
ttt{
tttt"Name": "status",
      nt
          ttt"Values": ["completed"]
ttt}
      ntt],
tt"OwnerIds": ["
          self"]

t}
      ntsnapshots = []
twhile True:
ttresp = client.describe_snapshots(**args)
      n
          ttsnapshots += resp.get("Snapshots", [])
ttif
       "NextToken" in resp:

          tttargs["NextToken"
      ] = resp["NextToken"]
ttelse:
tttbreak

          
      ntreturn snapshots


def delete_snapshot(client, snapshot_id):

      t
          wait_period = 5
tretries = 5
twhile True:
tttry:
      ntttclient.delete_snapshot(SnapshotId=snapshot_id)

          
      tttreturn True
ttexcept Exception as ex:
ttt# As the list
       of snapshot
           is eventually consistent old snapshots might appear
       in listed snapshots

          tttif getattr(ex, "response
      ", {}).get("Error", {}).get("Code",
           "") ==
       "'InvalidSnapshot.NotFound":
ttttreturn False
ttt
      
          # Throttling might occur when deleting snapshots too fast
t
      ttmessage
           = getattr(ex, "response", {}).get("Error
      ", {}).get("Message", "
          ")
tttif "throttling
      " in message.lower():
ttttretries -= 1

          ttt
      tif retries == 0:
tttttraise ex
tttttime.sleep(wait_period)
      n
          ttttwait_period = min(wait_period + 10 , 30)
t
      tttcontinue
tt
          traise ex


def handler(event,
       context):
tclient = boto3.client("
          ec2")

tsnapshot_id
       = event["VolumeId"].strip()
ttry:
ttretention_count
  
               = int(event.get("RetentionCount", "0").strip('"').strip())
      ntexcept:

          ttretention_count = 0

ttry:
ttretention_days
       = int(event.get("
          RetentionDays", "0").strip('"
      ').strip())
texcept:
ttretention_days
           = 0


      tif (retention_count == 0) and (retention_days == 0):
ttraise
    
             ValueError("RetentionCount or RetentionDays parameter must be specified
      "
          )

tif (retention_count > 0) and (retention_days > 0):
      nttraise ValueError("
          Only one of RetentionCount or RetentionDays
       parameters can be specified"
          )

tsnapshots_for_volume
       = sorted(get_volume_snapshots(client, snapshot_id),
           key=lambda
       s: s["StartTime"], reverse=True)

tsnapshots_to_delete
   
              = []

tif retention_days > 0:
ttdelete_before = datetime.utcnow().replace(tzinfo=UTC())
      
           - timedelta(days=int(retention_days))
tti = 0
ttwhile
       i < len(snapshots_for_volume):

          tttif snapshots_for_volume[i][
      "StartTime"] < delete_before:
ttt
          tsnapshots_to_delete.append(snapshots_for_volume.pop(i)[
      "SnapshotId"
          ])
tttelse:
tttti += 1

      ntelif retention_count > 0:
ttsnapshots_to_delete
           =
       [b["SnapshotId"] for b in snapshots_for_volume[retention_count:]]
      n
          
tsnapshots_deleted = []
tfor snapshot_id in snapshots_to_delete:
      nt
          tif delete_snapshot(client, snapshot_id):
tttsnapshots_deleted.append(snapshot_id)
      n
          
treturn {
tt"DeletedSnapshots": snapshots_deleted
      nt}
"}
      FunctionName: {Ref: LambdaName}
      Handler: index.handler

            MemorySize: 128
      Role:
        Fn::If:
        - LambdaAssumeRoleNotSpecified

              - Fn::GetAtt: [LambdaRole, Arn]
        - {Ref: LambdaRoleArn}
 
           Runtime: python3.7
      Timeout: 60
    Type: AWS::Lambda::Function

        LambdaRole:
    Condition: LambdaAssumeRoleNotSpecified
    Properties:

            AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']

                Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]

              Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:

                Statement:
            Action: ['ec2:DescribeSnapshots', 'ec2:DeleteSnapshot']

                  Effect: Allow
            Resource: '*'
          Version: '2012-10-17'

              PolicyName: DeleteVolumeSnapshotsLambdaPolicy
    Type: AWS::IAM::Role
"
- name: "deleteVolumeSnapshots"
  action: "aws:invokeLambdaFunction"
  inputs:
    FunctionName: "DeleteVolumeSnapshotsLambda-{{automation:EXECUTION_ID}}"
    Payload: "{"VolumeId": "{{VolumeId}}", "RetentionCount": "{{RetentionCount}}"
      , "RetentionDays": "{{RetentionDays}}"}"
- name: "deleteCloudFormationTemplate"
  action: "aws:deleteStack"
  inputs:
    StackName: "deleteVolumeSnapshotsLambdaStack{{automation:EXECUTION_ID}}"
outputs:
- "deleteVolumeSnapshots.Payload"
