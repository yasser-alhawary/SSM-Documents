  ### Document name - AWS-BulkEditOpsItems

  ## What does this document do?
  This document updates a given list of up to 50 OpsItemIds with the new specified status, severity, category, or priority.

  ## Input Parameters
  * AutomationAssumeRoleARN (Optional): The ARN of the role that allows Systems Manager Automation to perform actions on your behalf.
  * OpsItemIds: List of up to 50 OpsItemIds to be edited in bulk  (e.g. oi-XXXXXXXXXXXX, oi-XXXXXXXXXXXX, ...).
  * Status: Specify a new status for OpsItems ("NoChange", "Open", "InProgress", "Resolved").
  * Severity: Specify a new severity for OpsItems ("NoChange", "1", "2", "3", "4").
  * Category: Specify a new category for OpsItems ("NoChange", "Availability", "Cost", "Performance", "Recovery", "Security").
  * Priority: The importance of OpsItems in relation to other OpsItems in the system ("NoChange", "1", "2", "3", "4", "5").
  * WaitTimeBetweenEditsInSecs: The time to wait between UpdateOpsItems calls in seconds (String representation of 0.0 to 2.0 up to 1 decimal point).

  ## Output parameters
  * BulkEditOpsItemsStep.IsSuccessful: A boolean variable describing whether or not the edit was completely successful or not
  * BulkEditOpsItemsStep.OpsItemsFailedEdit: A list of the OpsItems that failed to update if the status was false 

  ## Minimum Permissions Required
  * `ssm:UpdateOpsItem`
schemaVersion: '0.3'
assumeRole: '{{AutomationAssumeRole}}'
outputs:
  - BulkEditOpsItemsStep.IsSuccessful
  - BulkEditOpsItemsStep.OpsItemsFailedEdit
parameters:
  AutomationAssumeRole:
    type: String
    description: (Optional) The role ARN to assume during automation execution.
    default: ''
    allowedPattern: '^arn:aws(-cn|-us-gov)?:iam::d{12}:role/[w+=,.@_/-]+|^$'
  OpsItemIds:
    type: StringList
    description: '(Required) List of up to 50 OpsItemIds to be edited in bulk (e.g. oi-XXXXXXXXXXXX, oi-XXXXXXXXXXXX, ...).'
    allowedPattern: '^(oi)-[0-9a-f]{12}$'
  Status:
    type: String
    description: '(Optional) Specify a new status for OpsItems ("NoChange", "Open", "InProgress", "Resolved").'
    default: NoChange
    allowedValues:
      - NoChange
      - Open
      - InProgress
      - Resolved
  Severity:
    type: String
    description: '(Optional) Specify a new severity for OpsItems ("NoChange", "1", "2", "3", "4").'
    default: NoChange
    allowedValues:
      - NoChange
      - '1'
      - '2'
      - '3'
      - '4'
  Category:
    type: String
    description: '(Optional) Specify a new category for OpsItems ("NoChange", "Availability", "Cost", "Performance", "Recovery", "Security").'
    default: NoChange
    allowedValues:
      - NoChange
      - Availability
      - Cost
      - Performance
      - Recovery
      - Security
  Priority:
    type: String
    description: '(Optional) The importance of OpsItems in relation to other OpsItems in the system ("NoChange", "1", "2", "3", "4", "5").'
    default: NoChange
    allowedValues:
      - NoChange
      - '1'
      - '2'
      - '3'
      - '4'
      - '5'
  WaitTimeBetweenEditsInSecs:
    type: String
    description: (Optional) The time to wait between UpdateOpsItems calls in seconds (String representation of 0.0 to 2.0 up to 1 decimal point).
    default: '.8'
    allowedPattern: '^((2(.0)?)|(?!$)([0-1]?(.[0-9])?))$'
mainSteps:
  - name: BulkEditOpsItemsStep
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: function_start
      Script: |-
        import boto3
        import botocore
        from botocore.config import Config

        import os, time

        region = os.environ['AWS_REGION']

        MAXIMUM_OPS_ITEMS = 50

        config = Config(
          retries = {
              'max_attempts': 5,
              'mode': 'standard'
          }
        )

        ssm_client = boto3.client("ssm", region_name=region, config=config)

        def function_start(event, context):

            # Get parameters
            ops_item_ids = event.get('OpsItemIds')
            status = event.get('Status')
            severity = event.get('Severity')
            category = event.get('Category')
            priority = event.get('Priority')
            spacing = event.get('WaitTimeBetweenEditsInSecs')
            
            # Testing parameters existence
            if ops_item_ids is None or len(ops_item_ids) is 0:
                raise ValueError("OpsItemIds is a required field.")

            # Testing parameters length
            if len(ops_item_ids) > MAXIMUM_OPS_ITEMS:
                raise ValueError("No more than " + MAXIMUM_OPS_ITEMS + " OpsItems can be edited at a time")

            # Get data
            params = create_params(status, severity, category, priority)
            response = bulk_edit(ops_item_ids, params, spacing)

            # Return outputs
            return response

        def create_params(status, severity, category, priority):
            # Only include params if changed from default
            params = {}
            NO_CHANGE = "NoChange"
            if severity != NO_CHANGE:
                params["Severity"] = severity
            if category != NO_CHANGE:
                params["Category"] = category
            if priority != NO_CHANGE:
                params["Priority"] = int(priority)
            if status != NO_CHANGE:
                params["Status"] = status
            if not params:
                raise ValueError("No input parameters were given")
            return params


        def bulk_edit(ops_item_ids, params, spacing):

            ops_items_failed_edit = []

            # Loop through each OpsItem
            for curr_id in ops_item_ids:

                # Update each OpsItem
                response = update_ops_item(curr_id, params)

                # Append to list of failed OpsItems on error
                if response is not None:
                    ops_items_failed_edit.append({
                        'OpsItemId': curr_id,
                        'Response': str(response)
                    })
                
                time.sleep(float(spacing))

            # Determine if bulk edit failed
            is_successful = False
            if len(ops_items_failed_edit) is 0:
                is_successful = True

            return {
                "is_successful": is_successful,
                "ops_items_failed_edit": ops_items_failed_edit
            }

        def update_ops_item(ops_item_id, params):

            error = None
            hasPermissions = True

            try:
                # Try to update
                params["OpsItemId"] = ops_item_id
                ssm_client.update_ops_item(**params)
            except botocore.exceptions.ClientError as e:
                # If there is a permission error, fail early
                if e.response['Error']['Code'].strip() == "AccessDeniedException":
                    hasPermissions = False
                else:
                    # other error, return message
                    error = e
            except botocore.exceptions.NoCredentialsError as e:
                hasPermissions = False
            except Exception as e:
                # Return error if it fails   
                error = e

            if not hasPermissions:
                raise PermissionError("Role provided does not have permission to perform ssm:UpdateOpsItem")
                
            return error
      InputPayload:
        OpsItemIds: '{{OpsItemIds}}'
        Status: '{{Status}}'
        Severity: '{{Severity}}'
        Category: '{{Category}}'
        Priority: '{{Priority}}'
        WaitTimeBetweenEditsInSecs: '{{WaitTimeBetweenEditsInSecs}}'
    outputs:
      - Name: IsSuccessful
        Selector: $.Payload.is_successful
        Type: Boolean
      - Name: OpsItemsFailedEdit
        Selector: $.Payload.ops_items_failed_edit
        Type: MapList
    description: |-
      ## BulkEditOpsItemsStep
      This step iterates through each OpsItem and calls UpdateOpsItem with the specified parameters
      ## Inputs
        * OpsItemIds: List of up to 50 OpsItemIds to be edited in bulk  (e.g. oi-XXXXXXXXXXXX, oi-XXXXXXXXXXXX, ...).
        * Status: Specify a new status for OpsItems ("NoChange", "Open", "InProgress", "Resolved").
        * Severity: Specify a new severity for OpsItems ("NoChange", "1", "2", "3", "4").
        * Category: Specify a new category for OpsItems ("NoChange", "Availability", "Cost", "Performance", "Recovery", "Security").
        * Priority: The importance of OpsItems in relation to other OpsItems in the system ("NoChange", "1", "2", "3", "4", "5").
        * WaitTimeBetweenEditsInSecs: The time to wait between UpdateOpsItems calls in seconds (String representation of 0.0 to 2.0 up to 1 decimal point).
      ## Outputs
        * IsSuccessful: A boolean variable describing whether or not the edit was completely successful or not
        * OpsItemsFailedEdit: A list of the OpsItems that failed to update if the status was false 
    timeoutSeconds: 300
    isEnd: true
