#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: |-
            ## Id
            AWSResilienceHub-SimulateRestApiGwNetworkUnavailableTest_2020-09-21

            ## Intent
            Test REST API Gateway with binding to VPC behavior when security groups are misconfigured and that the setup alarm alerts when network is unavailable

            ## Type
            TEST

            ## Risk
            High

            ## Requirements
              * REST API Gateway with VPC binding
              * Alarm for metric [Count](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) setup for the specified API Gateway
              * There is constant traffic on API Gateway during test

            ## Permissions required for AutomationAssumeRole
              * apigateway:GET
              * ec2:ModifyVpcEndpoint
              * ec2:DescribeVpcEndpoints
              * ec2:CreateSecurityGroup
              * ec2:DescribeSecurityGroups
              * cloudwatch:DescribeAlarms
              * ssm:GetAutomationExecution
              * ssm:StartAutomationExecution
              * ssm:GetParameters
              * iam:PassRole
              * ec2:CreateTags (for `ec2:CreateAction` value "CreateSecurityGroup")

            ##### Permissions required for security groups with tag `ec2:ResourceTag/AWSResilienceHub` value "api-gw:test:simulate_network_unavailable"
              * ec2:DeleteSecurityGroup

            ##### Permissions required to log output to CloudWatch
              * logs:PutLogEvents
              * logs:DescribeLogGroups
              * logs:DescribeLogStreams

            ## Supports Rollback
            Yes, restore original VPC endpoint(s) configuration

            ## Cancellation behavior
            Restore original VPC endpoint(s) configuration

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) RestApiGwId
              * type: String
              * description: The ID of REST API Gateway

            ### (Required) ApiGwCountAlarmName
              * type: String
              * description: Alarm for metric [Count](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) setup for the specified API Gateway

            ### (Optional) SecurityGroupIdListToUnassign
              * type: StringList
              * description: The list of Security Group Ids that should be unassigned from the the API. If not provided, all Security Groups will be unassigned from attached VPC endpoints. Max items: 15
              * default: []

            ### (Optional) IsRollback
              * type: String
              * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
              * default: false

            ### (Optional) PreviousExecutionId
              * type: String
              * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up

            ## Details
            The document injects failure by removing security groups assigned for VPC endpoint(s). If `SecurityGroupIdListToUnassign` is provided, removes only security groups from this list. Alarm for metric [Count](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html) should be trigger by traffic on the gateway. In case of issues users should manually restore original VPC endpoint(s) configuration from backup.

            ## Steps executed in normal flow
              * CheckIsRollback
              * AssertAlarmToBeGreenBeforeTest
              * BackupCurrentExecution
              * InjectFailure
              * AssertAlarmToBeRed
              * RollbackCurrentExecution
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * CheckIsRollback
              * GetInputsFromPreviousExecution
              * AssertInputsFromPreviousExecution
              * PrepareRollbackOfPreviousExecution
              * RollbackPreviousExecution

            ## Outputs
            None
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  RestApiGwId:
    type: String
    description: (Required) The ID of REST API Gateway
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  ApiGwCountAlarmName:
    type: String
    description: (Required) Alarm for metric `Count` setup for the specified API Gateway
  SecurityGroupIdListToUnassign:
    type: StringList
    description: (Optional) The list of Security Group Ids that should be unassigned from the the API. If not provided, all Security Groups will be unassigned from attached VPC endpoints
    maxItems: 15
    default: [ ]
  IsRollback:
    type: String
    description: >-
      (Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: CheckIsRollback
    description: Check if document should be executed in rollback mode
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: '{{ IsRollback }}'
          EqualsIgnoreCase: 'true'
      Default: AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: RestApiGwId
        Selector: '$.Payload.RestApiGwId[0]'
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_inputs_from_ssm_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events:
                raise KeyError('Requires ExecutionId')
        
            if not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            response_parameters = response['AutomationExecution']['Parameters']
            # TODO DIG-853
            for parameter in response_parameters:
                output[parameter] = response_parameters[parameter]
        
            return output
        
        


  - name: AssertInputsFromPreviousExecution
    description: Validate that rollback is executed with the same input
    action: aws:branch
    inputs:
      Choices:
        - NextStep: PrepareRollbackOfPreviousExecution
          Variable: '{{ GetInputsFromPreviousExecution.RestApiGwId }}'
          StringEquals: '{{ RestApiGwId }}'
    isEnd: true

  - name: PrepareRollbackOfPreviousExecution
    description: Get original VPC endpoint(s) configuration for rollback
    action: aws:executeScript
    outputs:
      - Name: VpcEndpointsSecurityGroupsMappingOriginalValue
        Selector: $.Payload.VpcEndpointsSecurityGroupsMappingOriginalValue[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
        StepName: 'BackupCurrentExecution'
        ResponseField: 'VpcEndpointsSecurityGroupsMappingOriginalValue'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def get_output_from_ssm_step_execution(events, context):
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or 'StepName' not in events or 'ResponseField' not in events:
                raise KeyError('Requires ExecutionId, StepName and ResponseField in events')
        
            ssm_response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
            for step in ssm_response['AutomationExecution']['StepExecutions']:
                if step['StepName'] == events['StepName']:
                    response_fields = events['ResponseField'].split(',')
                    output = {}
                    for response_field in response_fields:
                        if response_field in step['Outputs']:
                            output[response_field] = step['Outputs'][response_field]
                        else:
                            """
                            By default SSM ignores empty values when encodes API outputs to JSON. It may result in
                            a situation when an empty value is a valid value but step output completely misses it.
                            Usually happens with SQS queue policies, default policy is returned by API as an empty value
                            and executeApi step output ignores it. As a result, further steps in rollback execution will fail.
                            Instead of ignoring this value we should use a default empty value in rollback, i.e. empty string
                            represents a default sqs policy
                            """
                            output[response_field] = ['']
                    return output
        
            # Could not find step name
            raise Exception('Can not find step name % in ssm execution response', events['StepName'])
        
        


  - name: RollbackPreviousExecution
    description: Rollback VPC endpoint(s) configuration for the REST API Gateway
    onCancel: step:TriggerRollback
    action: aws:executeScript
    inputs:
      Runtime: python3.7
      Handler: update_endpoint_security_group_config
      InputPayload:
        VpcEndpointsSecurityGroupsMapping: '{{ PrepareRollbackOfPreviousExecution.VpcEndpointsSecurityGroupsMappingOriginalValue }}'
        Action: 'ReplaceWithOriginalSg'
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        


        def update_endpoint_security_group_config(events: dict, context: dict) -> None:
            if 'VpcEndpointsSecurityGroupsMapping' not in events:
                raise KeyError('Requires VpcEndpointsSecurityGroupsMapping in events')
        
            vpc_endpoint_security_groups_map: dict = json.loads(events.get('VpcEndpointsSecurityGroupsMapping'))
            action: str = events.get('Action')
        
            if action not in ['ReplaceWithOriginalSg', 'ReplaceWithDummySg']:
                raise KeyError('Possible values for Action: ReplaceWithOriginalSg, ReplaceWithDummySg')
        
            ec2_client = boto3.client('ec2')
        
            for vpc_endpoint_id, security_groups_config in vpc_endpoint_security_groups_map.items():
                original_security_group_ids = [security_group['GroupId']
                                               for security_group in security_groups_config]
        
                dummy_sg_name = 'dummy-sg-' + vpc_endpoint_id
                describe_dummy_sg_args = {'Filters': [dict(Name='group-name', Values=[dummy_sg_name])]}
                describe_dummy_sg = ec2_client.describe_security_groups(**describe_dummy_sg_args)['SecurityGroups']
                dummy_sg_id = describe_dummy_sg[0]['GroupId'] if describe_dummy_sg else None
        
                if action == 'ReplaceWithDummySg':
                    if not dummy_sg_id:
                        log.debug(f'Creating dummy security group {dummy_sg_name} ...')
                        vpc_id = ec2_client.describe_vpc_endpoints(VpcEndpointIds=[vpc_endpoint_id])['VpcEndpoints'][0]['VpcId']
                        log.debug(f'VPC ID: {vpc_id}')
                        create_dummy_sg_args = {
                            'VpcId': vpc_id,
                            'GroupName': dummy_sg_name,
                            'Description': 'Dummy SG',
                            'TagSpecifications': [
                                {
                                    'ResourceType': 'security-group',
                                    'Tags': [
                                        {
                                            'Key': 'AWSResilienceHub',
                                            'Value': 'api-gw:test:simulate_network_unavailable'
                                        }
                                    ]
                                }
                            ]
                        }
                        dummy_sg_id = ec2_client.create_security_group(**create_dummy_sg_args)['GroupId']
        
                        # Security group may be not available right after creation
                        waiter = ec2_client.get_waiter('security_group_exists')
                        waiter.wait(GroupIds=[dummy_sg_id])
                        log.debug(f'Dummy security group {dummy_sg_name} successfully created ID: {dummy_sg_id}')
                    else:
                        log.debug(f'Dummy security group {dummy_sg_name} already exists with ID: {dummy_sg_id}')
        
                    add_security_group_ids = [dummy_sg_id]
                    remove_security_group_ids = original_security_group_ids
        
                elif action == 'ReplaceWithOriginalSg':
                    add_security_group_ids = original_security_group_ids
                    remove_security_group_ids = [dummy_sg_id] if dummy_sg_id else []
        
                log.debug(f'Modifying VPC endpoint {vpc_endpoint_id}')
                log.debug(f'AddSecurityGroupIds: {add_security_group_ids}')
                log.debug(f'RemoveSecurityGroupIds: {remove_security_group_ids}')
                response = ec2_client.modify_vpc_endpoint(VpcEndpointId=vpc_endpoint_id,
                                                          AddSecurityGroupIds=add_security_group_ids,
                                                          RemoveSecurityGroupIds=remove_security_group_ids)
                if not response['Return']:
                    log.error(response)
                    raise Exception('Could not modify VPC endpoint')
                else:
                    log.debug(f'VPC endpoint {vpc_endpoint_id} modified successfully')
        
                if action == 'ReplaceWithOriginalSg' and dummy_sg_id:
                    log.debug(f'Deleting dummy security group {dummy_sg_name} with ID {dummy_sg_id} ...')
                    delete_sg_response = ec2_client.delete_security_group(GroupId=dummy_sg_id)
                    log.debug(
                        f'Delete security group response code: {delete_sg_response["ResponseMetadata"]["HTTPStatusCode"]}')

    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time.
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - '{{ApiGwCountAlarmName}}'
      PropertySelector: '$.MetricAlarms[0].StateValue'
      DesiredValues: [ 'OK' ]

  - name: BackupCurrentExecution
    description: Backup VPC endpoint(s) configuration for REST API Gateway for rollback
    action: aws:executeScript
    outputs:
      - Name: VpcEndpointsSecurityGroupsMappingOriginalValue
        Selector: '$.Payload.VpcEndpointsSecurityGroupsMappingOriginalValue'
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_endpoint_security_group_config
      InputPayload:
        RestApiGwId: '{{ RestApiGwId }}'
        SecurityGroupIdListToUnassign: '{{ SecurityGroupIdListToUnassign }}'
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        


        def get_endpoint_security_group_config(events: dict, context: dict) -> dict:
            if 'RestApiGwId' not in events:
                raise KeyError('Requires RestApiGwId in events')
        
            gateway_id: str = events['RestApiGwId']
            provided_security_group_ids: list = events.get('SecurityGroupIdListToUnassign')
        
            apigw_client = boto3.client('apigateway')
            ec2_client = boto3.client('ec2')
            vpc_endpoint_ids: list = apigw_client.get_rest_api(restApiId=gateway_id)['endpointConfiguration']['vpcEndpointIds']
        
            if not vpc_endpoint_ids:
                raise Exception('Provided REST API gateway does not have any configured VPC endpoint')
        
            vpc_endpoint_configs: dict = ec2_client.describe_vpc_endpoints(VpcEndpointIds=vpc_endpoint_ids)['VpcEndpoints']
            vpc_endpoint_security_groups_map: dict = {}
        
            for vpc_endpoint in vpc_endpoint_configs:
                vpc_endpoint_security_groups_map[vpc_endpoint['VpcEndpointId']] = vpc_endpoint['Groups']
        
            if provided_security_group_ids:
                security_group_found = False
                for vpc_endpoint_id, security_groups_config in vpc_endpoint_security_groups_map.items():
                    for security_group in security_groups_config:
                        if security_group['GroupId'] not in provided_security_group_ids:
                            vpc_endpoint_security_groups_map[vpc_endpoint_id].remove(security_group)
                        else:
                            security_group_found = True
                if not security_group_found:
                    raise Exception('Provided security groups were not found in any configured VPC endpoint')
        
            return {"VpcEndpointsSecurityGroupsMappingOriginalValue": json.dumps(vpc_endpoint_security_groups_map)}
        
        


  - name: InjectFailure
    description: Inject failure by removing security group(s) from VPC endpoint(s) configuration for REST API Gateway
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    action: aws:executeScript
    inputs:
      Runtime: python3.7
      Handler: update_endpoint_security_group_config
      InputPayload:
        VpcEndpointsSecurityGroupsMapping: '{{ BackupCurrentExecution.VpcEndpointsSecurityGroupsMappingOriginalValue }}'
        Action: 'ReplaceWithDummySg'
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        


        def update_endpoint_security_group_config(events: dict, context: dict) -> None:
            if 'VpcEndpointsSecurityGroupsMapping' not in events:
                raise KeyError('Requires VpcEndpointsSecurityGroupsMapping in events')
        
            vpc_endpoint_security_groups_map: dict = json.loads(events.get('VpcEndpointsSecurityGroupsMapping'))
            action: str = events.get('Action')
        
            if action not in ['ReplaceWithOriginalSg', 'ReplaceWithDummySg']:
                raise KeyError('Possible values for Action: ReplaceWithOriginalSg, ReplaceWithDummySg')
        
            ec2_client = boto3.client('ec2')
        
            for vpc_endpoint_id, security_groups_config in vpc_endpoint_security_groups_map.items():
                original_security_group_ids = [security_group['GroupId']
                                               for security_group in security_groups_config]
        
                dummy_sg_name = 'dummy-sg-' + vpc_endpoint_id
                describe_dummy_sg_args = {'Filters': [dict(Name='group-name', Values=[dummy_sg_name])]}
                describe_dummy_sg = ec2_client.describe_security_groups(**describe_dummy_sg_args)['SecurityGroups']
                dummy_sg_id = describe_dummy_sg[0]['GroupId'] if describe_dummy_sg else None
        
                if action == 'ReplaceWithDummySg':
                    if not dummy_sg_id:
                        log.debug(f'Creating dummy security group {dummy_sg_name} ...')
                        vpc_id = ec2_client.describe_vpc_endpoints(VpcEndpointIds=[vpc_endpoint_id])['VpcEndpoints'][0]['VpcId']
                        log.debug(f'VPC ID: {vpc_id}')
                        create_dummy_sg_args = {
                            'VpcId': vpc_id,
                            'GroupName': dummy_sg_name,
                            'Description': 'Dummy SG',
                            'TagSpecifications': [
                                {
                                    'ResourceType': 'security-group',
                                    'Tags': [
                                        {
                                            'Key': 'AWSResilienceHub',
                                            'Value': 'api-gw:test:simulate_network_unavailable'
                                        }
                                    ]
                                }
                            ]
                        }
                        dummy_sg_id = ec2_client.create_security_group(**create_dummy_sg_args)['GroupId']
        
                        # Security group may be not available right after creation
                        waiter = ec2_client.get_waiter('security_group_exists')
                        waiter.wait(GroupIds=[dummy_sg_id])
                        log.debug(f'Dummy security group {dummy_sg_name} successfully created ID: {dummy_sg_id}')
                    else:
                        log.debug(f'Dummy security group {dummy_sg_name} already exists with ID: {dummy_sg_id}')
        
                    add_security_group_ids = [dummy_sg_id]
                    remove_security_group_ids = original_security_group_ids
        
                elif action == 'ReplaceWithOriginalSg':
                    add_security_group_ids = original_security_group_ids
                    remove_security_group_ids = [dummy_sg_id] if dummy_sg_id else []
        
                log.debug(f'Modifying VPC endpoint {vpc_endpoint_id}')
                log.debug(f'AddSecurityGroupIds: {add_security_group_ids}')
                log.debug(f'RemoveSecurityGroupIds: {remove_security_group_ids}')
                response = ec2_client.modify_vpc_endpoint(VpcEndpointId=vpc_endpoint_id,
                                                          AddSecurityGroupIds=add_security_group_ids,
                                                          RemoveSecurityGroupIds=remove_security_group_ids)
                if not response['Return']:
                    log.error(response)
                    raise Exception('Could not modify VPC endpoint')
                else:
                    log.debug(f'VPC endpoint {vpc_endpoint_id} modified successfully')
        
                if action == 'ReplaceWithOriginalSg' and dummy_sg_id:
                    log.debug(f'Deleting dummy security group {dummy_sg_name} with ID {dummy_sg_id} ...')
                    delete_sg_response = ec2_client.delete_security_group(GroupId=dummy_sg_id)
                    log.debug(
                        f'Delete security group response code: {delete_sg_response["ResponseMetadata"]["HTTPStatusCode"]}')


  - name: AssertAlarmToBeRed
    description: Wait for expected alarm to be red after failure is injected
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - '{{ApiGwCountAlarmName}}'
      PropertySelector: '$.MetricAlarms[0].StateValue'
      DesiredValues: [ 'ALARM' ]

  - name: RollbackCurrentExecution
    description: Restore original VPC endpoint(s) configuration for REST API Gateway
    onCancel: step:TriggerRollback
    action: aws:executeScript
    maxAttempts: 5
    inputs:
      Runtime: python3.7
      Handler: update_endpoint_security_group_config
      InputPayload:
        VpcEndpointsSecurityGroupsMapping: '{{ BackupCurrentExecution.VpcEndpointsSecurityGroupsMappingOriginalValue }}'
        Action: 'ReplaceWithOriginalSg'
      Script: |-
        import json
        import logging
        import time
        from random import uniform
        from typing import Any, Callable
        
        import boto3
        from botocore.config import Config
        from botocore.exceptions import ClientError
        
        log = logging.getLogger()
        log.setLevel(logging.INFO)
        
        


        def update_endpoint_security_group_config(events: dict, context: dict) -> None:
            if 'VpcEndpointsSecurityGroupsMapping' not in events:
                raise KeyError('Requires VpcEndpointsSecurityGroupsMapping in events')
        
            vpc_endpoint_security_groups_map: dict = json.loads(events.get('VpcEndpointsSecurityGroupsMapping'))
            action: str = events.get('Action')
        
            if action not in ['ReplaceWithOriginalSg', 'ReplaceWithDummySg']:
                raise KeyError('Possible values for Action: ReplaceWithOriginalSg, ReplaceWithDummySg')
        
            ec2_client = boto3.client('ec2')
        
            for vpc_endpoint_id, security_groups_config in vpc_endpoint_security_groups_map.items():
                original_security_group_ids = [security_group['GroupId']
                                               for security_group in security_groups_config]
        
                dummy_sg_name = 'dummy-sg-' + vpc_endpoint_id
                describe_dummy_sg_args = {'Filters': [dict(Name='group-name', Values=[dummy_sg_name])]}
                describe_dummy_sg = ec2_client.describe_security_groups(**describe_dummy_sg_args)['SecurityGroups']
                dummy_sg_id = describe_dummy_sg[0]['GroupId'] if describe_dummy_sg else None
        
                if action == 'ReplaceWithDummySg':
                    if not dummy_sg_id:
                        log.debug(f'Creating dummy security group {dummy_sg_name} ...')
                        vpc_id = ec2_client.describe_vpc_endpoints(VpcEndpointIds=[vpc_endpoint_id])['VpcEndpoints'][0]['VpcId']
                        log.debug(f'VPC ID: {vpc_id}')
                        create_dummy_sg_args = {
                            'VpcId': vpc_id,
                            'GroupName': dummy_sg_name,
                            'Description': 'Dummy SG',
                            'TagSpecifications': [
                                {
                                    'ResourceType': 'security-group',
                                    'Tags': [
                                        {
                                            'Key': 'AWSResilienceHub',
                                            'Value': 'api-gw:test:simulate_network_unavailable'
                                        }
                                    ]
                                }
                            ]
                        }
                        dummy_sg_id = ec2_client.create_security_group(**create_dummy_sg_args)['GroupId']
        
                        # Security group may be not available right after creation
                        waiter = ec2_client.get_waiter('security_group_exists')
                        waiter.wait(GroupIds=[dummy_sg_id])
                        log.debug(f'Dummy security group {dummy_sg_name} successfully created ID: {dummy_sg_id}')
                    else:
                        log.debug(f'Dummy security group {dummy_sg_name} already exists with ID: {dummy_sg_id}')
        
                    add_security_group_ids = [dummy_sg_id]
                    remove_security_group_ids = original_security_group_ids
        
                elif action == 'ReplaceWithOriginalSg':
                    add_security_group_ids = original_security_group_ids
                    remove_security_group_ids = [dummy_sg_id] if dummy_sg_id else []
        
                log.debug(f'Modifying VPC endpoint {vpc_endpoint_id}')
                log.debug(f'AddSecurityGroupIds: {add_security_group_ids}')
                log.debug(f'RemoveSecurityGroupIds: {remove_security_group_ids}')
                response = ec2_client.modify_vpc_endpoint(VpcEndpointId=vpc_endpoint_id,
                                                          AddSecurityGroupIds=add_security_group_ids,
                                                          RemoveSecurityGroupIds=remove_security_group_ids)
                if not response['Return']:
                    log.error(response)
                    raise Exception('Could not modify VPC endpoint')
                else:
                    log.debug(f'VPC endpoint {vpc_endpoint_id} modified successfully')
        
                if action == 'ReplaceWithOriginalSg' and dummy_sg_id:
                    log.debug(f'Deleting dummy security group {dummy_sg_name} with ID {dummy_sg_id} ...')
                    delete_sg_response = ec2_client.delete_security_group(GroupId=dummy_sg_id)
                    log.debug(
                        f'Delete security group response code: {delete_sg_response["ResponseMetadata"]["HTTPStatusCode"]}')


  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ApiGwCountAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true

  - name: TriggerRollback
    description: This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        import json
        import boto3
        from botocore.config import Config
        
        


        def start_rollback_execution(events, context):
            output = {}
            config = Config(retries={'max_attempts': 20, 'mode': 'standard'})
            ssm = boto3.client('ssm', config=config)
        
            if 'ExecutionId' not in events or not events['ExecutionId']:
                raise KeyError('Requires not empty ExecutionId')
        
            response = ssm.get_automation_execution(AutomationExecutionId=events['ExecutionId'])
        
            # Get parameters for current execution and add IsRollback and PreviousExecutionId
            response_parameters = response['AutomationExecution']['Parameters']
            response_parameters['IsRollback'] = ['true']
            response_parameters['PreviousExecutionId'] = [events['ExecutionId']]
        
            rollback_execution_response = ssm.start_automation_execution(
                DocumentName=response['AutomationExecution']['DocumentName'],
                DocumentVersion=response['AutomationExecution']['DocumentVersion'],
                Parameters=response_parameters
            )
            output['RollbackExecutionId'] = rollback_execution_response['AutomationExecutionId']
            return output
        
        

    isEnd: true
	2021-11-07T00:08:28.139000+01:00	YAML	Automation	1	AWSResilienceHub-SimulateRestApiGwNetworkUnavailableTest_2020-09-21	Active
