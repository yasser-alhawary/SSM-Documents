description: "----
*AWS Support Document to troubleshoot s3 event trigger for Lambda*

  ----

This document can troubleshoot 2 scenarios as below which are discussed
   in the articles : 

https://aws.amazon.com/premiumsupport/knowledge-center/lambda-invoke-error-s3-bucket-permission/

  
https://aws.amazon.com/premiumsupport/knowledge-center/lambda-configure-s3-event-notification/

  
"
schemaVersion: "0.3"
assumeRole: "{{AutomationAssumeRole}}"
outputs:
- "lambdaS3Event.output"
parameters:
  AutomationAssumeRole:
    type: "String"
    default: ""
  LambdaFunctionArn:
    type: "String"
    description: "Enter Arn of the Lambdafunction in the format - arn:aws:lambda:<aws-region>:<account-id>:function:<functionName>:<version
       -optional>"
    allowedPattern: "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-
      d{1}:d{12}:function:[a-zA-Z0-9-_]+(:($LATEST|[a-zA-Z0-9-_]+))?"
  S3BucketName:
    type: "String"
    allowedPattern: "^$|^[_a-zA-Z0-9][-._a-zA-Z0-9]{2,62}$"
mainSteps:
- name: "lambdaS3Event"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.7"
    Handler: "script_handler"
    Script: "import json
import boto3
import botocore
import re

def script_handler(events,
       context):
    resourcepolicyflag = 0
    result = {}
    result["objkey"
      ] = ' '
    result["Filters"] = ' '
    result["policy"] = ''
    result["
      response"] = ''
    result["lambdacheck"] = ''
    result["otherLambdafunctionPolicy"
      ] = ''
    result["otherLambdafunctionPolicyresponse"] = ''
    result["
      Events"] = ''
    functionName = events['functionArn'].split(":",7)[6]

          s3Bucket = events['s3BucketName']
    accountId = events['functionArn'].split("
      :",7)[4]
    if (len(events['functionArn'].split(":")) == 8):
        qualifier
       = events['functionArn'].split(":",8)[7]
    else:
        qualifier =
       ""
    client = boto3.client('s3')
    lambdaclient = boto3.client('lambda')

          bucket_notification = client.get_bucket_notification_configuration(Bucket=s3Bucket)

          
    try:
        test_policy = lambdaclient.get_policy( FunctionName=
       functionName)
    except botocore.exceptions.ClientError as err:
      
        if (err.response['Error']['Message'].find('Function not found')!= -1):

                  result["lambdacheck"] = "Lambda function does not exist"


          def eventPattern(config,lambdaName):
        result["Events"] += '
      n S3 events for the event '+ config['Id'] + ' and the function ' + functionName
       + ' are:' + str(config['Events']) + '
'
        try:
            if (result["
      Filters"].find("Prefix") != -1):
                result["Filters"] +=
       config["Id"] + ' : ' + json.dumps(config['Filter']['Key']['FilterRules'])
       + '
'
            else:
                result["Filters"] = config["
      Id"] + ' : ' + json.dumps(config['Filter']['Key']['FilterRules']) + '
'

                  regex = re.compile('[$&+,:;=?@" "]')
            for i in config['Filter']['Key']['FilterRules']:

                      if (regex.search(i['Value']) == None):
                  
        result["objkey"] += "
 No Special Character found in " + i['Name']
       + " for the event " + config["Id"]
                    if (i['Value']
       == '*' or i['Value'] == '.*'):
                        result["objkey"
      ] += "
 Wild character * found in the " + i['Name'] + " for the event "
       + config["Id"] + " A wildcard character ('*') can't be used in filters
       as a prefix or suffix to represent any character."
                else:

                          result["objkey"] += "
 NOTE: Special characters found
       in the value of the " + i["Name"] +  " for the event " + config["Id"
      ] + " ,you must enter them in URL-encoded (percent-encoded) format : https://www.w3schools.com/tags/ref_urlencode.asp"
      
        except KeyError:
            result["Filters"] = "No event filters
       found"
            result["objkey"] = "No object keys"
    
    if
       'LambdaFunctionConfigurations' in bucket_notification and result["lambdacheck"
      ] != 'Lambda function does not exist':
        match = 0
        for config
       in bucket_notification['LambdaFunctionConfigurations']:
            lambdaName
       = config['LambdaFunctionArn'].split(":",7)[6]
            if (lambdaName
       == functionName and len(config['LambdaFunctionArn'].split(":"))==8 and qualifier
       != ""): 
                if (qualifier == config['LambdaFunctionArn'].split("
      :",8)[7] and lambdaName == functionName):
                    #check code
       
                    match = 1 #match found. This prevents override for EventConfiguration
       in next loop
                    eventPattern(config,lambdaName)        
             
            elif (lambdaName == functionName and len(config['LambdaFunctionArn'].split("
      :"))==7 and qualifier == ""):
                match = 1
              
        eventPattern(config,lambdaName)
        if match == 0:
            result["
      EventConfiguration"] = "No Event configuration exists for the mentioned S3
       bucket and lambda function"
            result["Filters"] = "No Event
       Filters as no Event configuration exists"
            result["objkey"
      ] = " "
            result["policy"] = " "
            result["response"
      ] = " "
    else:
            result["EventConfiguration"] = "No Event
       configuration exists for the mentioned S3 bucket and lambda function"
 
                 result["Filters"] = "No Event Filters as no Event configuration
       exists"
            result["objkey"] = " "
            result["policy"
      ] = " "
            result["response"] = " "
            
    
  
        if (not ('EventConfiguration' in result) and result["lambdacheck"] != 'Lambda
       function does not exist'):
        result["EventConfiguration"] = "Event
       Configuration for the bucket exists"            
        try:
        
          if qualifier == "":
                resource_policy = lambdaclient.get_policy(
       FunctionName= functionName)
            else:
                resource_policy
       = lambdaclient.get_policy( FunctionName= functionName ,Qualifier= qualifier)

      
            policy = json.loads(resource_policy['Policy'])
            for
       statement in policy['Statement']:
                if statement['Action']
       == 'lambda:InvokeFunction':
                    if statement['Principal']['Service']
       == 's3.amazonaws.com' and statement['Effect'] == 'Allow':
              
                for key in statement['Condition']:
                            if
       key == 'ArnLike':
                                if statement['Condition'][key]['AWS:SourceArn'].split("
      :",6)[5] == s3Bucket:
                                    result["policy"
      ] = "Resource policy permission for the Lambda function "+ functionName  +"
       exists and is correct. If event type matches, Please check/configure your
       Lambda concurrency to handle concurrent executions of incoming Amazon S3 event
       notifications"
                                    result["response"]
       = '
'
                                    resourcepolicyflag = 1
    
              if resourcepolicyflag == 0:
            #Resource policy doesnot exist.
       Display CLI command for adding resourcepolicy 
                result["
      policy"] = 'Resource policy for the Lambda function with s3 permissions is
       missing. Please add below Resourcepolicy to lambda using CLI command or alternatively
       use Lambda console for adding the Resource Policy. Try testing if the s3 trigger
       works after adding the below policy'
                if qualifier == ""
      :
                    result["response"] =  "
 ------------- 
 aws lambda
       add-permission --function-name " + functionName + " --action lambda:InvokeFunction
       --statement-id " + accountId + "_event_permissions_from_" + s3Bucket +
       "_for_" + functionName + " --principal s3.amazonaws.com --source-arn arn:aws:s3:::"
      +s3Bucket+ "--source-account "+ accountId + "
 ------------- 
"
  
                    else:
                    result["response"] = "
 -------------
       
 aws lambda add-permission --function-name " + functionName + " --action
       lambda:InvokeFunction --qualifier "+ qualifier + " --statement-id " + accountId
       + "_event_permissions_from_" + s3Bucket + "_for_" + functionName + "
       --principal s3.amazonaws.com --source-arn arn:aws:s3:::"+s3Bucket+ "--source-account
       "+ accountId  + "
 ------------- 
" 
        except:
        #if
       no resource policy exits
            result["policy"] = 'Resource policy
       for the Lambda function with s3 permissions is missing. Please add below Resourcepolicy
       to lambda using CLI command or alternatively use Lambda console for adding
       the Resource Policy. Try testing if the s3 trigger works after adding the
       below policy'
            if qualifier == "":
                result["
      response"] = "
 ------------- 
 aws lambda add-permission --function-name
       " + functionName + " --action lambda:InvokeFunction --statement-id " +
       accountId + "_event_permissions_from_" + s3Bucket + "_for_" + functionName
       + " --principal s3.amazonaws.com --source-arn arn:aws:s3:::"+s3Bucket+ "
       --source-account "+ accountId + "
 ------------- 
"
            else:

                      result["response"] = "
 ------------- 
 aws lambda add-permission
       --function-name " + functionName + " --action lambda:InvokeFunction --qualifier
       "+ qualifier + "--statement-id " + accountId + "_event_permissions_from_"
       + s3Bucket + "_for_" + functionName + " --principal s3.amazonaws.com --source-arn
       arn:aws:s3:::"+s3Bucket+ " --source-account "+ accountId + "
 -------------
       
"
    elif result["lambdacheck"] == 'Lambda function does not exist':

              result["policy"] = ''
        result["response"] = ''
    else:

              #Possible it's unable to validate destination configurations issue

              result["policy"] = "Delete the event notification if exists from
       the Amazon S3 console, and then try adding the notification again. This adds
       the appropriate permissions to your Lambda function's resource-based policy.
       Run the below command from the AWS CLI to add resource policy to lambda function"
      
        if qualifier == "":
                result["response"] = "
      n ------------- 
 aws lambda add-permission --function-name " + functionName
       + " --action lambda:InvokeFunction --statement-id " + accountId + "_event_permissions_from_"
       + s3Bucket + "_for_" + functionName + " --principal s3.amazonaws.com --source-arn
       arn:aws:s3:::"+s3Bucket+ " --source-account "+ accountId + "
 -------------
       
"
        else:
            result["response"] = "
 -------------
       
 aws lambda add-permission --function-name " + functionName + " --action
       lambda:InvokeFunction --qualifier "+ qualifier + "--statement-id " + accountId
       + "_event_permissions_from_" + s3Bucket + "_for_" + functionName + "
       --principal s3.amazonaws.com --source-arn arn:aws:s3:::"+s3Bucket+ " --source-account
       "+ accountId + "
 ------------- 
"


    
    #code for checking
       edge case
    if 'LambdaFunctionConfigurations' in bucket_notification and
       result["lambdacheck"] != 'Lambda function does not exist':
        result["
      otherLambdafunctionPolicy"] = ''
        result["otherLambdafunctionPolicyresponse"
      ] = ''
        for config in bucket_notification['LambdaFunctionConfigurations']:

                      lambdaName = config['LambdaFunctionArn'].split(":",7)[6]

                      resourcepolicyflag = 0
                length = len(config['LambdaFunctionArn'].split("
      :"))
                qual = ""
                if (length==8):
      
                    qual = config['LambdaFunctionArn'].split(":",8)[7]
      
                if not (qualifier == qual and lambdaName == functionName) :
   
                       try:
                        if (length==8):
          
                        resource_policy = lambdaclient.get_policy( FunctionName=
       lambdaName ,Qualifier= qual)
                        else:
            
                      resource_policy = lambdaclient.get_policy( FunctionName= lambdaName)

      
                        policy = json.loads(resource_policy['Policy'])
 
                             for statement in policy['Statement']:
            
                      if statement['Action'] == 'lambda:InvokeFunction':
      
                                if statement['Principal']['Service'] == 's3.amazonaws.com'
       and statement['Effect'] == 'Allow':
                                    for
       key in statement['Condition']:
                                        if
       key == 'ArnLike':
                                            if statement['Condition'][key]['AWS:SourceArn'].split("
      :",6)[5] == s3Bucket:   
                                                resourcepolicyflag
       = 1                                
                        if resourcepolicyflag
       == 0:
                            if (length==8) :
                    
                  result["otherLambdafunctionPolicyresponse"] += "
 -------------
       
 aws lambda add-permission --function-name " + lambdaName + " --action
       lambda:InvokeFunction --qualifier "+ qual + " --statement-id " + accountId
       + "_event_permissions_from_" + s3Bucket + "_for_" + lambdaName + " --principal
       s3.amazonaws.com --source-arn arn:aws:s3:::"+s3Bucket+ " --source-account
       "+ accountId + "
 ------------- 
"
                              
        result["otherLambdafunctionPolicy"] += '
' + 'Resource policy is missing
       for the Lambda function ' + lambdaName + ':' + qual + ' which is also an event
       notification for s3 bucket. Check if the Lambda Function ' + lambdaName +
       ' exists. If exists, Add Resourcepolicy to lambda using below cli command
       to mitigate the issue. You can delete the EventNotification for '+ lambdaName
       + ':' + qual + ' if no longer needed.'
                            else:

                                      result["otherLambdafunctionPolicy"] += '
      n' + 'Resource policy is missing for the Lambda function ' + lambdaName + '
       which is also an event notification for s3 bucket. Check if the Lambda Function
       ' + lambdaName + ' exists. If exists, Add Resourcepolicy to lambda using below
       cli command to mitigate the issue. Otherwise, you can delete the EventNotification
       for ' + lambdaName + ' if no longer needed.'
                           
           result["otherLambdafunctionPolicyresponse"] += "
 ------------- 
      n aws lambda add-permission --function-name " + lambdaName + " --action lambda:InvokeFunction
       --statement-id " + accountId + "_event_permissions_from_" + s3Bucket +
       "_for_" + lambdaName + " --principal s3.amazonaws.com --source-arn arn:aws:s3:::"
      +s3Bucket+ " --source-account "+ accountId + "
 ------------- 
"
 
                         except:
                        if (length==8) :
    
                                  result["otherLambdafunctionPolicyresponse"] +=
       "
 ------------- 
 aws lambda add-permission --function-name " + lambdaName
       + " --action lambda:InvokeFunction --qualifier "+ qual + " --statement-id
       " + accountId + "_event_permissions_from_" + s3Bucket + "_for_" + lambdaName
       + " --principal s3.amazonaws.com --source-arn arn:aws:s3:::"+s3Bucket+ "
       --source-account "+ accountId + "
 ------------- 
"
             
                         result["otherLambdafunctionPolicy"] += '
' + 'Resource
       policy is missing for the Lambda function ' + lambdaName + ':' + qual + '
       which is also an event notification for s3 bucket. Check if the Lambda Function
       ' + lambdaName + ' exists. If exists, Add Resourcepolicy to lambda using below
       cli command to mitigate the issue. You can delete the EventNotification for
       '+ lambdaName + ':' + qual + ' if no longer needed.'
                   
           else:
                            result["otherLambdafunctionPolicy"
      ] += '
' + 'Resource policy is missing for the Lambda function ' + lambdaName
       + ' which is also an event notification for s3 bucket. Check if the Lambda
       Function ' + lambdaName + ' exists. If exists, Add Resourcepolicy to lambda
       using below cli command to mitigate the issue. Otherwise, you can delete the
       EventNotification for ' + lambdaName + ' if no longer needed.'
         
                         result["otherLambdafunctionPolicyresponse"] += "
 -------------
       
 aws lambda add-permission --function-name " + lambdaName + " --action
       lambda:InvokeFunction --statement-id " + accountId + "_event_permissions_from_"
       + s3Bucket + "_for_" + lambdaName + " --principal s3.amazonaws.com --source-arn
       arn:aws:s3:::"+s3Bucket+ " --source-account "+ accountId + "
 -------------
       
"
    
    
    Results = result["lambdacheck"] + result["Events"
      ] + '
' + result["EventConfiguration"] + '
' + 'Event filters are: 
      n' + result["Filters"] + '
' + result["objkey"]  + '
' + result["policy"
      ]  + '
' + result["response"]  + '
' + result["otherLambdafunctionPolicy"
      ] + '
' + result["otherLambdafunctionPolicyresponse"]
    return {'output':
       Results}

    
"
    InputPayload:
      functionArn: "{{LambdaFunctionArn}}"
      s3BucketName: "{{S3BucketName}}"
  description: "executeScript"
  outputs:
  - Name: "output"
    Selector: "$.Payload.output"
    Type: "String"
  isEnd: true
