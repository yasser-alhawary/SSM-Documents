description: "----
*AWS Support Document to troubleshoot/remediate s3 event trigger
   for Lambda*
----

This document can troubleshoot/remediate 2 scenarios as below
   which are discussed in the articles : 

https://aws.amazon.com/premiumsupport/knowledge-center/lambda-invoke-error-s3-bucket-permission/

  
https://aws.amazon.com/premiumsupport/knowledge-center/lambda-configure-s3-event-notification/

  

"
schemaVersion: "0.3"
assumeRole: "{{AutomationAssumeRole}}"
outputs:
- "remediatelambdas3event.output"
- "checkoutput.Output"
parameters:
  AutomationAssumeRole:
    type: "String"
    default: ""
  LambdaFunctionArn:
    type: "String"
    description: "Enter Arn of the Lambdafunction in the format - arn:aws:lambda:<aws-region>:<account-id>:function:<functionName>:<version
       -optional>"
    allowedPattern: "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-
      d{1}:d{12}:function:[a-zA-Z0-9-_]+(:($LATEST|[a-zA-Z0-9-_]+))?"
  S3BucketName:
    type: "String"
    allowedPattern: "^$|^[_a-zA-Z0-9][-._a-zA-Z0-9]{2,62}$"
  Action:
    type: "String"
    allowedValues:
    - "Troubleshoot"
    - "Remediate"
mainSteps:
- name: "branchonAction"
  action: "aws:branch"
  description: "Branch Based on Action"
  inputs:
    Choices:
    - NextStep: "remediatelambdas3event"
      Variable: "{{Action}}"
      StringEquals: "Remediate"
    - NextStep: "troubleshootlambdas3event"
      Variable: "{{Action}}"
      StringEquals: "Troubleshoot"
- name: "troubleshootlambdas3event"
  action: "aws:executeAutomation"
  inputs:
    DocumentName: "AWSSupport-TroubleshootLambdaS3Event"
    RuntimeParameters:
      LambdaFunctionArn: "{{LambdaFunctionArn}}"
      S3BucketName: "{{S3BucketName}}"
      AutomationAssumeRole: "{{AutomationAssumeRole}}"
  isEnd: false
  nextStep: "checkoutput"
- name: "remediatelambdas3event"
  action: "aws:executeScript"
  inputs:
    Runtime: "python3.7"
    Handler: "script_handler"
    Script: "import json
import boto3
import botocore
import re

def script_handler(events,
       context):
    resourcepolicyflag = 0
    result = {}
    result["objkey"
      ] = ' '
    result["Filters"] = ' '
    result["policy"] = ''
    result["
      response"] = ''
    result["lambdacheck"] = ''
    result["otherLambdafunctionPolicy"
      ] = ''
    result["otherLambdafunctionPolicyresponse"] = ''
    result["
      Events"] = ''
    functionName = events['functionArn'].split(":",7)[6]

          s3Bucket = events['s3BucketName']
    accountId = events['functionArn'].split("
      :",7)[4]
    if (len(events['functionArn'].split(":")) == 8):
        qualifier
       = events['functionArn'].split(":",8)[7]
    else:
        qualifier =
       ""
    client = boto3.client('s3')
    lambdaclient = boto3.client('lambda')

          bucket_notification = client.get_bucket_notification_configuration(Bucket=s3Bucket)

          
    try:
        test_policy = lambdaclient.get_policy( FunctionName=
       functionName)
    except botocore.exceptions.ClientError as err:
      
        if (err.response['Error']['Message'].find('Function not found')!= -1):

                  result["lambdacheck"] = "Lambda function does not exist"


          def eventPattern(config,lambdaName):
        result["Events"] += '
      n S3 events for the event '+ config['Id'] + ' and the function ' + functionName
       + ' are:' + str(config['Events']) + '
'
        try:
            if (result["
      Filters"].find("Prefix") != -1):
                result["Filters"] +=
       config["Id"] + ' : ' + json.dumps(config['Filter']['Key']['FilterRules'])
       + '
'
            else:
                result["Filters"] = config["
      Id"] + ' : ' + json.dumps(config['Filter']['Key']['FilterRules']) + '
'

                  regex = re.compile('[$&+,:;=?@" "]')
            for i in config['Filter']['Key']['FilterRules']:

                      if (regex.search(i['Value']) == None):
                  
        result["objkey"] += "
 No Special Character found in " + i['Name']
       + " for the event " + config["Id"]
                    if (i['Value']
       == '*' or i['Value'] == '.*'):
                        result["objkey"
      ] += "
 Wild character * found in the " + i['Name'] + " for the event "
       + config["Id"] + " A wildcard character ('*') can't be used in filters
       as a prefix or suffix to represent any character."
                else:

                          result["objkey"] += "
 NOTE: Special characters found
       in the value of the " + i["Name"] +  " for the event " + config["Id"
      ] + " ,you must enter them in URL-encoded (percent-encoded) format : https://www.w3schools.com/tags/ref_urlencode.asp"
      
        except KeyError:
            result["Filters"] = "No event filters
       found"
            result["objkey"] = "No object keys"
    
    if
       'LambdaFunctionConfigurations' in bucket_notification and result["lambdacheck"
      ] != 'Lambda function does not exist':
        match = 0
        for config
       in bucket_notification['LambdaFunctionConfigurations']:
            lambdaName
       = config['LambdaFunctionArn'].split(":",7)[6]
            if (lambdaName
       == functionName and len(config['LambdaFunctionArn'].split(":"))==8 and qualifier
       != ""): 
                if (qualifier == config['LambdaFunctionArn'].split("
      :",8)[7] and lambdaName == functionName):
                    match = 1

                          eventPattern(config,lambdaName)               
      
            elif (lambdaName == functionName and len(config['LambdaFunctionArn'].split("
      :"))==7 and qualifier == ""):
                match = 1
              
        eventPattern(config,lambdaName)
        if match == 0:
            result["
      EventConfiguration"] = "No Event configuration exists for the mentioned S3
       bucket and lambda function"
            result["Filters"] = "No Event
       Filters as no Event configuration exists"
            result["objkey"
      ] = " "
            result["policy"] = " "
            result["response"
      ] = " "
    else:
            result["EventConfiguration"] = "No Event
       configuration exists for the mentioned S3 bucket and lambda function"
 
                 result["Filters"] = "No Event Filters as no Event configuration
       exists"
            result["objkey"] = " "
            result["policy"
      ] = " "
            result["response"] = " "
            
    
  
        if (not ('EventConfiguration' in result) and result["lambdacheck"] != 'Lambda
       function does not exist'):
        result["EventConfiguration"] = "Event
       Configuration for the bucket exists"            
        try:
        
          if qualifier == "":
                resource_policy = lambdaclient.get_policy(
       FunctionName= functionName)
            else:
                resource_policy
       = lambdaclient.get_policy( FunctionName= functionName ,Qualifier= qualifier)

      
            policy = json.loads(resource_policy['Policy'])
            for
       statement in policy['Statement']:
                if statement['Action']
       == 'lambda:InvokeFunction':
                    if statement['Principal']['Service']
       == 's3.amazonaws.com' and statement['Effect'] == 'Allow':
              
                for key in statement['Condition']:
                            if
       key == 'ArnLike':
                                if statement['Condition'][key]['AWS:SourceArn'].split("
      :",6)[5] == s3Bucket:
                                    result["policy"
      ] = "Resource policy permission exists and is correct. If event type matches,
       please check/configure your Lambda concurrency to handle concurrent executions
       of incoming Amazon S3 event notifications. If you are getting error 'Unable
       to validate the following destination configurations' error while creating
       an Amazon S3 event notification to trigger Lambda function, please check/configure
       existing SNS/SQS S3 event notifications to remediate the issue."
      
                                    result["response"] = '
'
              
                            resourcepolicyflag = 1
            if resourcepolicyflag
       == 0:
                result["policy"] = 'Resource policy for the Lambda
       function with s3 permissions was missing. Added Resourcepolicy to lambda.
       Try testing if the s3 trigger works now.'
                if qualifier ==
       "":
                    response = lambdaclient.add_permission(FunctionName=
       functionName,StatementId= accountId + '_event_permissions_from_' + s3Bucket
       + "_for_" + functionName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com',
       
                    SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount=
       accountId )
                else:
                    response = lambdaclient.add_permission(FunctionName=
       functionName,Qualifier= qualifier,StatementId= accountId + '_event_permissions_from_'
       + s3Bucket + "_for_" + functionName , Action= 'lambda:InvokeFunction',Principal=
       's3.amazonaws.com', 
                    SourceArn= 'arn:aws:s3:::'+s3Bucket
       ,SourceAccount= accountId ) 
        except:
            result["policy"
      ] = 'Resource policy for the Lambda function with s3 permissions was missing.
       Added Resourcepolicy to lambda to mitigate the issue.'
            if qualifier
       == "":
                response = lambdaclient.add_permission(FunctionName=
       functionName,StatementId= accountId + '_event_permissions_from_' + s3Bucket
       + "_for_" + functionName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com',
       
                SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId
       )
            else:
                response = lambdaclient.add_permission(FunctionName=
       functionName,Qualifier= qualifier,StatementId= accountId + '_event_permissions_from_'
       + s3Bucket + "_for_" + functionName , Action= 'lambda:InvokeFunction',Principal=
       's3.amazonaws.com', 
                SourceArn= 'arn:aws:s3:::'+s3Bucket
       ,SourceAccount= accountId )
    elif result["lambdacheck"] == 'Lambda function
       does not exist':
        result["policy"] = ''
        result["response"
      ] = ''
    else:
        result["policy"] = "Resource policy for the Lambda
       function with s3 permissions was missing. Added Resourcepolicy to lambda to
       mitigate the issue."
        if qualifier == "":
            response
       = lambdaclient.add_permission(FunctionName= functionName,StatementId= accountId
       + '_event_permissions_from_' + s3Bucket + "_for_" + functionName , Action=
       'lambda:InvokeFunction',Principal= 's3.amazonaws.com', 
            SourceArn=
       'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId )
        else:
    
              response = lambdaclient.add_permission(FunctionName= functionName,Qualifier=
       qualifier,StatementId= accountId + '_event_permissions_from_' + s3Bucket +
       "_for_" + functionName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com',
       
            SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount= accountId
       )


        if 'LambdaFunctionConfigurations' in bucket_notification and
       result["lambdacheck"] != 'Lambda function does not exist':
           
       result["otherLambdafunctionPolicy"] = ''
            result["otherLambdafunctionPolicyresponse"
      ] = ''
            for config in bucket_notification['LambdaFunctionConfigurations']:

                      lambdaName = config['LambdaFunctionArn'].split(":",7)[6]

                      resourcepolicyflag = 0
                length = len(config['LambdaFunctionArn'].split("
      :"))
                qual = ""
                if (length==8):
      
                    qual = config['LambdaFunctionArn'].split(":",8)[7]
      
                if not (qualifier == qual and lambdaName == functionName) :
   
                       try:
                        if (length==8):
          
                        resource_policy = lambdaclient.get_policy( FunctionName=
       lambdaName ,Qualifier= qual)
                        else:
            
                      resource_policy = lambdaclient.get_policy( FunctionName= lambdaName)

      
                        policy = json.loads(resource_policy['Policy'])
 
                             for statement in policy['Statement']:
            
                      if statement['Action'] == 'lambda:InvokeFunction':
      
                                if statement['Principal']['Service'] == 's3.amazonaws.com'
       and statement['Effect'] == 'Allow':
                                    for
       key in statement['Condition']:
                                        if
       key == 'ArnLike':
                                            if statement['Condition'][key]['AWS:SourceArn'].split("
      :",6)[5] == s3Bucket:   
                                                resourcepolicyflag
       = 1                                
                        if resourcepolicyflag
       == 0:
                            if (length==8) :
                    
                  response = lambdaclient.add_permission(FunctionName= lambdaName,Qualifier=
       qual,StatementId= accountId + '_event_permissions_from_' + s3Bucket + "_for_"
       + lambdaName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com',
       
                                SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount=
       accountId )
                                result["otherLambdafunctionPolicy"
      ] += '
' + 'Resource policy did not exist previously for the function ' +
       lambdaName + ':' + qual + ' which is also an event notification for s3 bucket.
       Added Resourcepolicy to lambda to mitigate the issue. You can delete the EventNotification
       for '+ lambdaName + ':' + qual + ' if no longer needed.'
               
                   else:
                                result["otherLambdafunctionPolicy"
      ] += '
' + 'Resource policy did not exist previously for the function ' +
       lambdaName + ' which is also an event notification for s3 bucket. Added Resourcepolicy
       to lambda to mitigate the issue. You can delete the EventNotification for
       ' + lambdaName + ' if no longer needed.'
                               
       response = lambdaclient.add_permission(FunctionName= lambdaName,StatementId=
       accountId + '_event_permissions_from_' + s3Bucket + "_for_" + lambdaName
       , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com', 
      
                                SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount=
       accountId )    
                    except botocore.exceptions.ClientError
       as err:
                        if (err.response['Error']['Message'].find('Function
       not found')!= -1):
                            result["otherLambdafunctionPolicy"
      ] += '
' + 'Function ' + lambdaName + ' does not exist. Please delete the
       event notification ' + config['Id']
                        else:
     
                             if (length==8) :
                                 
         response = lambdaclient.add_permission(FunctionName= lambdaName,Qualifier=
       qual,StatementId= accountId + '_event_permissions_from_' + s3Bucket + "_for_"
       + lambdaName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com',
       
                                    SourceArn= 'arn:aws:s3:::'+s3Bucket
       ,SourceAccount= accountId )
                                    result["
      otherLambdafunctionPolicy"] += '
' + 'Resource policy did not exist previously
       for the function ' + lambdaName + ':' + qual + ' which is also an event notification
       for s3 bucket. Added Resourcepolicy to lambda to mitigate the issue. You can
       delete the EventNotification for '+ lambdaName + ':' + qual + ' if no longer
       needed.'
                            else:
                            
          result["otherLambdafunctionPolicy"] += '
' + 'Resource policy did not
       exist previously for the function ' + lambdaName + ' which is also an event
       notification for s3 bucket. Added Resourcepolicy to lambda to mitigate the
       issue. You can delete the EventNotification for ' + lambdaName + ' if no longer
       needed.'
                                response = lambdaclient.add_permission(FunctionName=
       lambdaName,StatementId= accountId + '_event_permissions_from_' + s3Bucket
       + "_for_" + lambdaName , Action= 'lambda:InvokeFunction',Principal= 's3.amazonaws.com',
       
                                SourceArn= 'arn:aws:s3:::'+s3Bucket ,SourceAccount=
       accountId )  
    
    
    Results = result["lambdacheck"] + result["
      Events"] + '
' + result["EventConfiguration"] + '
' + 'Event filters
       are: 
' + result["Filters"] + '
' + result["objkey"]  + '
' + result["
      policy"]  + '
' + result["response"]  + '
' + result["otherLambdafunctionPolicy"
      ] + '
' + result["otherLambdafunctionPolicyresponse"]
    return {'output':
       Results}
"
    InputPayload:
      functionArn: "{{LambdaFunctionArn}}"
      s3BucketName: "{{S3BucketName}}"
  description: "executeScript"
  outputs:
  - Name: "output"
    Selector: "$.Payload.output"
    Type: "String"
  isEnd: true
- name: "checkoutput"
  action: "aws:executeAwsApi"
  inputs:
    Service: "ssm"
    Api: "GetAutomationExecution"
    AutomationExecutionId: "{{troubleshootlambdas3event.ExecutionId}}"
  outputs:
  - Name: "Output"
    Selector: "$.AutomationExecution.Outputs.'lambdaS3Event.output'"
    Type: "StringList"
  isEnd: true
